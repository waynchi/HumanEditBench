import numpy as np

def conjugate_gradient(A, b, x0=None, tol=1e-6, max_iter=1000):
    """
    Resuelve el sistema Ax = b usando el método de gradientes conjugados.
    
    Parámetros:
    A: matriz simétrica y definida positiva (n x n)
    b: vector del lado derecho (n x 1)
    x0: solución inicial (opcional)
    tol: tolerancia para convergencia
    max_iter: número máximo de iteraciones
    
    Retorna:
    x: solución aproximada
    iterations: número de iteraciones realizadas
    """
    
    n = len(b)
    
    # Inicializar x0 si no se proporciona
    if x0 is None:
        x = np.zeros(n)
    else:
        x = x0.copy()
    
    # Calcular residuo inicial
    r = b - A @ x
    p = r.copy()
    
    # Valor inicial de r^T * r
    rsold = r @ r
    
    for iteration in range(max_iter):
        # Calcular A * p
        Ap = A @ p
        
        # Calcular el paso alpha
        alpha = rsold / (p @ Ap)
        
        # Actualizar la solución
        x = x + alpha * p
        
        # Actualizar el residuo
        r = r - alpha * Ap
        
        # Verificar convergencia
        rsnew = r @ r
        if np.sqrt(rsnew) < tol:
            return x, iteration + 1
        
        # Calcular beta para la nueva dirección conjugada
        beta = rsnew / rsold
        
        # Actualizar la dirección de búsqueda
        p = r + beta * p
        
        # Actualizar rsold para la siguiente iteración
        rsold = rsnew
    
    print(f"Advertencia: No se alcanzó la convergencia después de {max_iter} iteraciones")
    return x, max_iter

# Ejemplo de uso
if __name__ == "__main__":
    # Ejemplo con una matriz simple
    A = np.array([[4, 1],
                  [1, 3]], dtype=float)
    
    b = np.array([1, 2], dtype=float)
    
    # Resolver usando gradientes conjugados
    x, iterations = conjugate_gradient(A, b)
    
    print(f"Solución: {x}")
    print(f"Iteraciones: {iterations}")
    print(f"Verificación A*x: {A @ x}")
    print(f"Vector b: {b}")
    print(f"Error: {np.linalg.norm(A @ x - b)}")