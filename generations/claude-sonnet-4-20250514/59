import torch
import torch.nn as nn

class SimpleConvNet1(nn.Module):
    def __init__(self, input_height=32, input_width=32):  # Принимаем размеры входного изображения
        super().__init__()

        self.conv1 = nn.Sequential(
            nn.Conv2d(3, 32, 3),
            nn.ReLU(),
            nn.MaxPool2d(2)
        )

        self.conv2 = nn.Sequential(
            nn.Conv2d(32, 64, 3),
            nn.ReLU(),
            nn.MaxPool2d(2)
        )

        self.flatten = nn.Flatten()
        
        # Вычисляем размер после свертки автоматически
        # После conv1: (input_size - 3 + 1) / 2 = (input_size - 2) / 2
        # После conv2: ((input_size - 2) / 2 - 3 + 1) / 2 = ((input_size - 2) / 2 - 2) / 2
        conv1_out_h = (input_height - 3 + 1) // 2  # После conv и maxpool
        conv1_out_w = (input_width - 3 + 1) // 2
        
        conv2_out_h = (conv1_out_h - 3 + 1) // 2   # После conv и maxpool
        conv2_out_w = (conv1_out_w - 3 + 1) // 2
        
        flattened_size = 64 * conv2_out_h * conv2_out_w
        
        self.fc1 = nn.Sequential(
            nn.Linear(flattened_size, 512),
            nn.ReLU(),
            nn.Linear(512, 3)
        )

    def forward(self, x):
        x = self.conv1(x)
        x = self.conv2(x)
        x = self.flatten(x)
        x = self.fc1(x)
        return x