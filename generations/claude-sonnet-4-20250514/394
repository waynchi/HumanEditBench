from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import numpy as np

def cluster_data(features_transformed, cluster_configs, n_clusters=2, clustering_method='kmeans'):
    """
    Выполняет кластеризацию данных для указанных наборов колонок.

    Args:
        features_transformed (pandas.DataFrame): Преобразованный DataFrame с параметрами.
        cluster_configs (dict): Словарь вида {имя_столбца_кластера: (колонка1, колонка2, ...)}.
        n_clusters (int): Количество кластеров.
        clustering_method (str): Метод кластеризации ('kmeans').

    Returns:
        pandas.DataFrame: DataFrame с добавленными столбцами меток кластеров.
    """
    if features_transformed is None:
        print("Сначала выполните преобразование данных (этап 5).")
        return None

    result_df = features_transformed.copy()

    for cluster_feature_name, columns in cluster_configs.items():
        # Проверяем, что все указанные колонки существуют в DataFrame
        missing_cols = [col for col in columns if col not in features_transformed.columns]
        if missing_cols:
            print(f"Колонки {missing_cols} не найдены в DataFrame. Пропуск кластеризации для '{cluster_feature_name}'.")
            continue

        # Выбираем данные для кластеризации
        features_for_clustering = features_transformed[list(columns)].copy()
        
        if clustering_method == 'kmeans':
            model = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
            cluster_labels = model.fit_predict(features_for_clustering)
            
            # Оценка качества кластеризации (например, с помощью коэффициента силуэта)
            if len(np.unique(cluster_labels)) > 1: # Проверка на случай, когда все точки отнесены к одному кластеру
                silhouette_avg = silhouette_score(features_for_clustering, cluster_labels)
                print(f"Коэффициент силуэта для '{cluster_feature_name}' ({columns}) с {n_clusters} кластерами: {silhouette_avg:.4f}")
            else:
                print(f"Невозможно рассчитать коэффициент силуэта для '{cluster_feature_name}' с {n_clusters} кластерами (все точки в одном кластере).")

        else:
            print("Неподдерживаемый метод кластеризации.")
            return None

        result_df[cluster_feature_name] = cluster_labels
        print(f"Кластеризация выполнена для колонок {columns}. Метки кластеров добавлены в столбец '{cluster_feature_name}'.")
    
    return result_df

# Выполнение кластеризации (после этапа 5 и до этапа 6)
if 'features_transformed' in locals() and features_transformed is not None:
    # Пример конфигурации кластеризации
    cluster_configs = {
        'cluster1': ('column1', 'column2'),  # Замените на реальные имена колонок
        'cluster2': ('column3',)             # Замените на реальные имена колонок
    }
    n_clusters = 3  # Количество кластеров (подберите оптимальное значение)
    features_transformed = cluster_data(features_transformed, cluster_configs, n_clusters)
    
    # Визуализация кластеров для первого набора колонок (если есть как минимум 2 колонки)
    first_cluster_name = list(cluster_configs.keys())[0]
    first_cluster_cols = cluster_configs[first_cluster_name]
    
    if len(first_cluster_cols) >= 2:
        plt.figure(figsize=(8, 6))
        plt.scatter(features_transformed[first_cluster_cols[0]], 
                   features_transformed[first_cluster_cols[1]], 
                   c=features_transformed[first_cluster_name], cmap='viridis')
        plt.xlabel(first_cluster_cols[0])
        plt.ylabel(first_cluster_cols[1])
        plt.title(f'Результаты кластеризации для {first_cluster_name}')
        plt.colorbar(label='Номер кластера')
        plt.show()
    else:
        print("Недостаточно числовых признаков для визуализации кластеров на плоскости.")
else:
    print("Сначала выполните этап 5 (Преобразование данных).")