from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

def cluster_data(features_transformed, cluster_configs, n_clusters=2, clustering_method='kmeans'):
    """
    Выполняет кластеризацию данных для указанных групп колонок.

    Args:
        features_transformed (pandas.DataFrame): Преобразованный DataFrame с параметрами.
        cluster_configs (dict): Словарь вида {имя_колонки_кластера: (колонки_для_кластеризации,)}.
        n_clusters (int): Количество кластеров.
        clustering_method (str): Метод кластеризации ('kmeans').

    Returns:
        pandas.DataFrame: DataFrame с добавленными столбцами меток кластеров.
    """
    if features_transformed is None:
        print("Сначала выполните преобразование данных (этап 5).")
        return None

    result_df = features_transformed.copy()

    for cluster_feature_name, columns_to_cluster in cluster_configs.items():
        # Проверяем, что все указанные колонки существуют в DataFrame
        missing_columns = [col for col in columns_to_cluster if col not in result_df.columns]
        if missing_columns:
            print(f"Колонки {missing_columns} не найдены в DataFrame. Пропускаем кластеризацию для '{cluster_feature_name}'.")
            continue

        # Выбираем данные для кластеризации
        features_for_clustering = result_df[list(columns_to_cluster)]

        if clustering_method == 'kmeans':
            model = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
            cluster_labels = model.fit_predict(features_for_clustering)
            
            # Оценка качества кластеризации (например, с помощью коэффициента силуэта)
            if len(np.unique(cluster_labels)) > 1: # Проверка на случай, когда все точки отнесены к одному кластеру
                silhouette_avg = silhouette_score(features_for_clustering, cluster_labels)
                print(f"Коэффициент силуэта для {n_clusters} кластеров ({cluster_feature_name}): {silhouette_avg:.4f}")
            else:
                print(f"Невозможно рассчитать коэффициент силуэта для {n_clusters} кластера ({cluster_feature_name}) - все точки в одном кластере.")

        else:
            print("Неподдерживаемый метод кластеризации.")
            return None

        result_df[cluster_feature_name] = cluster_labels
        print(f"Кластеризация выполнена для колонок {columns_to_cluster}. Метки кластеров добавлены в столбец '{cluster_feature_name}'.")

    return result_df

# Выполнение кластеризации (после этапа 5 и до этапа 6)
if 'features_transformed' in locals() and features_transformed is not None:
    # Пример конфигурации кластеризации
    cluster_configs = {
        'cluster1': ('columna1', 'columna2'),  # Замените на реальные имена колонок
        'cluster2': ('columna3',)             # Замените на реальные имена колонок
    }
    n_clusters = 3  # Количество кластеров (подберите оптимальное значение)
    features_transformed = cluster_data(features_transformed, cluster_configs, n_clusters)
    
    # Визуализация кластеров (пример для первого кластера если есть 2 числовых признака)
    if 'cluster1' in features_transformed.columns:
        first_cluster_config = list(cluster_configs.values())[0]
        if len(first_cluster_config) >= 2:
            plt.figure(figsize=(8, 6))
            plt.scatter(features_transformed[first_cluster_config[0]], 
                       features_transformed[first_cluster_config[1]], 
                       c=features_transformed[list(cluster_configs.keys())[0]], 
                       cmap='viridis')
            plt.xlabel(first_cluster_config[0])
            plt.ylabel(first_cluster_config[1])
            plt.title('Результаты кластеризации')
            plt.colorbar(label='Номер кластера')
            plt.show()
        else:
            print("Недостаточно числовых признаков для визуализации кластеров на плоскости.")
else:
    print("Сначала выполните этап 5 (Преобразование данных).")