import torch
import torch.nn as nn

class SimpleConvNet1(nn.Module):
    def __init__(self, input_height=32, input_width=32):  # Cambiamos a dimensiones de entrada
        super().__init__()

        self.conv1 = nn.Sequential(
            nn.Conv2d(3, 32, 3),
            nn.ReLU(),
            nn.MaxPool2d(2)
        )

        self.conv2 = nn.Sequential(
            nn.Conv2d(32, 64, 3),
            nn.ReLU(),
            nn.MaxPool2d(2)
        )

        self.flatten = nn.Flatten()
        
        # Calculamos automáticamente el tamaño después de las capas convolucionales
        # Para entrada de 32x32: después de conv1 -> (30x30)/2 = 15x15
        # Después de conv2 -> (13x13) = 169, con 64 canales = 64 * 169 = 10816
        conv_output_size = self._get_conv_output_size(input_height, input_width)
        
        self.fc1 = nn.Sequential(
            nn.Linear(conv_output_size, 512),
            nn.ReLU(),
            nn.Linear(512, 3)
        )

    def _get_conv_output_size(self, height, width):
        # Simulamos el paso a través de las capas convolucionales
        # Conv1: kernel=3, no padding -> size - 2
        # MaxPool: kernel=2 -> size / 2
        h1 = ((height - 2) // 2)
        w1 = ((width - 2) // 2)
        
        # Conv2: kernel=3, no padding -> size - 2
        # MaxPool: kernel=2 -> size / 2
        h2 = ((h1 - 2) // 2)
        w2 = ((w1 - 2) // 2)
        
        return 64 * h2 * w2

    def forward(self, x):
        x = self.conv1(x)
        x = self.conv2(x)
        x = self.flatten(x)
        x = self.fc1(x)
        return x