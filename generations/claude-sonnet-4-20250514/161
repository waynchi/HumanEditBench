def can_be_expressed_as_four_squares(n):
    """
    Check if a number can be expressed as the sum of four non-zero squares.
    According to Lagrange's four-square theorem, every positive integer can be
    represented as the sum of four integer squares (including zero).
    This function checks for four NON-ZERO squares.
    """
    if n < 4:  # Minimum sum of four non-zero squares is 1+1+1+1=4
        return False
    
    # Check all possible combinations of four non-zero squares
    max_sqrt = int(n**0.5) + 1
    
    for a in range(1, max_sqrt):
        if a*a >= n:
            break
        for b in range(1, max_sqrt):
            if a*a + b*b >= n:
                break
            for c in range(1, max_sqrt):
                if a*a + b*b + c*c >= n:
                    break
                d_squared = n - a*a - b*b - c*c
                if d_squared > 0:
                    d = int(d_squared**0.5)
                    if d*d == d_squared:
                        return True, (a, b, c, d)
    
    return False, None

def find_numbers_expressible_as_four_squares(limit):
    """
    Find all numbers up to limit that can be expressed as four non-zero squares.
    """
    results = []
    for n in range(4, limit + 1):
        can_express, squares = can_be_expressed_as_four_squares(n)
        if can_express:
            results.append((n, squares))
    return results

# Example usage
if __name__ == "__main__":
    # Find numbers up to 50 that can be expressed as four non-zero squares
    numbers = find_numbers_expressible_as_four_squares(50)
    
    print("可以表示为四个非零平方和的数字：")
    for num, squares in numbers:
        print(f"{num} = {squares[0]}² + {squares[1]}² + {squares[2]}² + {squares[3]}²")
        print(f"{num} = {squares[0]**2} + {squares[1]**2} + {squares[2]**2} + {squares[3]**2}")
        print()