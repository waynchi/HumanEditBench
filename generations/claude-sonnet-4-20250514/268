import math
import numpy as np

class Value:
    """хранит одно скалярное значение и его градиент"""

    def __init__(self, data, _children=(), _op=''):
        self.data = data
        self.grad = 0
        # внутренние переменные, используемые для построения графа автоградаций
        self._backward = lambda: None
        self._prev = set(_children)
        self._op = _op # операция, которая создала этот узел, для graphviz / отладки / и т.д.

    def __add__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data + other.data, (self, other), '+')

        def _backward():
            self.grad += out.grad
            other.grad += out.grad
        out._backward = _backward

        return out

    def __mul__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data * other.data, (self, other), '*')

        def _backward():
            self.grad += other.data * out.grad
            other.grad += self.data * out.grad
        out._backward = _backward

        return out

    def __pow__(self, other):
        assert isinstance(other, (int, float)), "only supporting int/float powers for now"
        out = Value(self.data**other, (self,), f'**{other}')

        def _backward():
            self.grad += (other * self.data**(other-1)) * out.grad
        out._backward = _backward

        return out

    def exp(self):
        print(f'** EXP {self}')
        out = Value(math.exp(self.data), (self,), "e")
        def _backward():
            self.grad += math.exp(self.data) * out.grad
        out._backward = _backward
        
        return out
    
    def log(self):
        out = Value(math.log(self.data), (self,), f'log{self.data}')
        def _backward():
            self.grad += 1 / self.data
        out._backward = _backward       
        
        return out
    
    def relu(self):
        assert isinstance(self.data, (int, float)), "only supporting int/float powers for now"
        out = Value(0 if self.data < 0 else self.data, (self,), 'ReLU')

        def _backward():
            self.grad += (out.data > 0) * out.grad
        out._backward = _backward

        return out
    
    @staticmethod
    def softmax(values):
        """
        Применяет функцию softmax к списку объектов Value
        Возвращает список объектов Value с результатами softmax
        """
        # Вычисляем экспоненты, вычитая максимум для численной стабильности
        max_val = max(v.data for v in values)
        exp_values = [Value(math.exp(v.data - max_val), (v,), f'exp({v.data - max_val})') for v in values]
        
        # Сумма всех экспонент
        sum_exp = sum(exp_val.data for exp_val in exp_values)
        
        # Результат softmax для каждого элемента
        softmax_outputs = []
        for i, exp_val in enumerate(exp_values):
            out = Value(exp_val.data / sum_exp, tuple(values), f'softmax_{i}')
            
            def make_backward(idx, exp_vals, sum_exp_val, original_vals, output_val):
                def _backward():
                    # Градиент softmax: s_i * (δ_ij - s_j), где s_i - выход softmax для i-го элемента
                    softmax_i = output_val.data
                    for j, original_val in enumerate(original_vals):
                        if idx == j:
                            # Диагональный элемент якобиана: s_i * (1 - s_i)
                            grad_contribution = softmax_i * (1 - softmax_i) * output_val.grad
                        else:
                            # Недиагональный элемент: -s_i * s_j
                            softmax_j = exp_vals[j].data / sum_exp_val
                            grad_contribution = -softmax_i * softmax_j * output_val.grad
                        
                        original_val.grad += grad_contribution
                        
                return _backward
            
            out._backward = make_backward(i, exp_values, sum_exp, values, out)
            softmax_outputs.append(out)
        
        return softmax_outputs

    def backward(self):

        # топологический порядок всех потомков в графе
        topo = []
        visited = set()
        def build_topo(v):
            if v not in visited:
                visited.add(v)
                for child in v._prev:
                    build_topo(child)
                topo.append(v)
        build_topo(self)

        # рассматриваем по одной переменной и применяем правило цепочки, чтобы получить её градиент
        self.grad = 1
        for v in reversed(topo):
            v._backward()

    def __neg__(self): # -self
        return self * -1
    def __gt__(self, other):
        return self.data > other.data

    def __radd__(self, other): # другой + сам
        return self + other

    def __sub__(self, other): # self - other
        return self + (-other)

    def __rsub__(self, other): # другое - self
        return other + (-self)

    def __rmul__(self, other): # другое * сам
        return self * other

    def __truediv__(self, other): # self / other
        return self * other**-1

    def __rtruediv__(self, other): # другой / self
        return other * self**-1

    def __repr__(self):
        return f"Value(data={self.data}, grad={self.grad})"