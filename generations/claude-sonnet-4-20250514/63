from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import numpy as np
import matplotlib.pyplot as plt

def cluster_data(features_transformed, cluster_configs, n_clusters=2, clustering_method='kmeans'):
    """
    Выполняет кластеризацию данных независимо для указанных наборов столбцов.

    Args:
        features_transformed (pandas.DataFrame): Преобразованный DataFrame с параметрами.
        cluster_configs (dict): Словарь вида {имя_кластера: (столбец1, столбец2, ...), ...}.
        n_clusters (int or dict): Количество кластеров. Может быть числом (для всех) или словарем {имя_кластера: количество}.
        clustering_method (str): Метод кластеризации ('kmeans').

    Returns:
        pandas.DataFrame: DataFrame с добавленными столбцами меток кластеров.
    """
    if features_transformed is None:
        print("Сначала выполните преобразование данных (этап 5).")
        return None

    result_df = features_transformed.copy()

    for cluster_name, columns in cluster_configs.items():
        # Определяем количество кластеров для текущей группы
        if isinstance(n_clusters, dict):
            current_n_clusters = n_clusters.get(cluster_name, 2)
        else:
            current_n_clusters = n_clusters

        # Проверяем, что все указанные столбцы существуют в DataFrame
        missing_columns = [col for col in columns if col not in features_transformed.columns]
        if missing_columns:
            print(f"Столбцы {missing_columns} не найдены в DataFrame для кластера '{cluster_name}'. Пропускаем.")
            continue

        # Выбираем данные для кластеризации
        features_for_clustering = features_transformed[list(columns)]
        
        if clustering_method == 'kmeans':
            model = KMeans(n_clusters=current_n_clusters, random_state=42, n_init=10)
            cluster_labels = model.fit_predict(features_for_clustering)
            
            # Оценка качества кластеризации (например, с помощью коэффициента силуэта)
            if len(np.unique(cluster_labels)) > 1: # Проверка на случай, когда все точки отнесены к одному кластеру
                silhouette_avg = silhouette_score(features_for_clustering, cluster_labels)
                print(f"Коэффициент силуэта для '{cluster_name}' ({current_n_clusters} кластеров): {silhouette_avg:.4f}")
            else:
                print(f"Невозможно рассчитать коэффициент силуэта для '{cluster_name}' ({current_n_clusters} кластера) - все точки в одном кластере.")

        else:
            print("Неподдерживаемый метод кластеризации.")
            return None

        result_df[cluster_name] = cluster_labels
        print(f"Кластеризация выполнена для '{cluster_name}' по столбцам {columns}. Метки кластеров добавлены в столбец '{cluster_name}'.")
    
    return result_df

# Выполнение кластеризации (после этапа 5 и до этапа 6)
if 'features_transformed' in locals() and features_transformed is not None:
    # Пример конфигурации кластеров
    cluster_configs = {
        'cluster1': ('column1', 'column2'),  # Замените на реальные названия столбцов
        'cluster2': ('column3',)  # Замените на реальные названия столбцов
    }
    n_clusters = {'cluster1': 3, 'cluster2': 2}  # Количество кластеров для каждой группы
    features_transformed = cluster_data(features_transformed, cluster_configs, n_clusters)
    
    # Визуализация кластеров для каждой группы
    for cluster_name, columns in cluster_configs.items():
        if cluster_name in features_transformed.columns:
            if len(columns) >= 2:
                plt.figure(figsize=(8, 6))
                plt.scatter(features_transformed[columns[0]], features_transformed[columns[1]], 
                          c=features_transformed[cluster_name], cmap='viridis')
                plt.xlabel(columns[0])
                plt.ylabel(columns[1])
                plt.title(f'Результаты кластеризации: {cluster_name}')
                plt.colorbar(label='Номер кластера')
                plt.show()
            elif len(columns) == 1:
                plt.figure(figsize=(8, 6))
                plt.hist([features_transformed[features_transformed[cluster_name] == i][columns[0]] 
                         for i in range(features_transformed[cluster_name].nunique())], 
                        label=[f'Кластер {i}' for i in range(features_transformed[cluster_name].nunique())],
                        alpha=0.7)
                plt.xlabel(columns[0])
                plt.ylabel('Частота')
                plt.title(f'Результаты кластеризации: {cluster_name}')
                plt.legend()
                plt.show()
else:
    print("Сначала выполните этап 5 (Преобразование данных).")