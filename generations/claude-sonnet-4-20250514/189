import torch
import torch.nn as nn

class SimpleConvNet1(nn.Module):
    def __init__(self, input_height=32, input_width=32):  # 接收输入尺寸参数
        super().__init__()

        self.conv1 = nn.Sequential(
            nn.Conv2d(3, 32, 3),
            nn.ReLU(),
            nn.MaxPool2d(2)
        )

        self.conv2 = nn.Sequential(
            nn.Conv2d(32, 64, 3),
            nn.ReLU(),
            nn.MaxPool2d(2)
        )

        # 计算展平后的尺寸
        # 经过conv1后: (input_height-3+1)//2, (input_width-3+1)//2
        # 经过conv2后: ((input_height-3+1)//2-3+1)//2, ((input_width-3+1)//2-3+1)//2
        conv_output_height = ((input_height - 3 + 1) // 2 - 3 + 1) // 2
        conv_output_width = ((input_width - 3 + 1) // 2 - 3 + 1) // 2
        flattened_size = 64 * conv_output_height * conv_output_width

        self.flatten = nn.Flatten()
        self.fc1 = nn.Sequential(
            nn.Linear(flattened_size, 512),  # 使用计算出的 flattened_size
            nn.ReLU(),
            nn.Linear(512, 3)
        )

    def forward(self, x):
        x = self.conv1(x)
        x = self.conv2(x)
        x = self.flatten(x)
        x = self.fc1(x)
        return x