def create_matrix(rows: int, cols: int, fill_value=0) -> list:
    """
    Tworzy macierz o rozmiarze rows x cols, wypełnioną wartością fill_value.
    
    Parametry:
    rows (int): liczba wierszy.
    cols (int): liczba kolumn.
    fill_value (dowolny typ): wartość do wypełnienia macierzy.
    
    Zwraca:
    list: macierz w postaci listy list.
    """
    return [[fill_value for _ in range(cols)] for _ in range(rows)]


def add_matrices(matrix_a: list, matrix_b: list) -> list:
    """
    Dodaje dwie macierze o tym samym rozmiarze.
    
    Parametry:
    matrix_a (list): pierwsza macierz.
    matrix_b (list): druga macierz.
    
    Zwraca:
    list: wynik dodawania macierzy.
    """
    rows = len(matrix_a)
    cols = len(matrix_a[0])
    result = []
    
    for i in range(rows):
        row = []
        for j in range(cols):
            row.append(matrix_a[i][j] + matrix_b[i][j])
        result.append(row)
    
    return result


def scalar_multiply(matrix: list, scalar: float) -> list:
    """
    Mnoży wszystkie elementy macierzy przez skalar.
    
    Parametry:
    matrix (list): macierz źródłowa.
    scalar (float): liczba, przez którą mnożone są elementy macierzy.
    
    Zwraca:
    list: wynik mnożenia macierzy przez skalar.
    """
    rows = len(matrix)
    cols = len(matrix[0])
    result = []
    
    for i in range(rows):
        row = []
        for j in range(cols):
            row.append(matrix[i][j] * scalar)
        result.append(row)
    
    return result


def multiply_matrices(matrix_a: list, matrix_b: list) -> list:
    """
    Mnoży dwie macierze.
    
    Parametry:
    matrix_a (list): pierwsza macierz.
    matrix_b (list): druga macierz.
    
    Zwraca:
    list: wynik mnożenia macierzy.
    """
    rows_a = len(matrix_a)
    cols_a = len(matrix_a[0])
    rows_b = len(matrix_b)
    cols_b = len(matrix_b[0])
    
    result = []
    
    for i in range(rows_a):
        row = []
        for j in range(cols_b):
            sum_value = 0
            for k in range(cols_a):
                sum_value += matrix_a[i][k] * matrix_b[k][j]
            row.append(sum_value)
        result.append(row)
    
    return result


def transpose_matrix(matrix: list) -> list:
    """
    Transponuje macierz.
    
    Parametry:
    matrix (list): macierz źródłowa.
    
    Zwraca:
    list: macierz transponowana.
    """
    rows = len(matrix)
    cols = len(matrix[0])
    result = []
    
    for j in range(cols):
        row = []
        for i in range(rows):
            row.append(matrix[i][j])
        result.append(row)
    
    return result


def determinant_3x3(matrix: list) -> float:
    """
    Oblicza wyznacznik macierzy 3x3.
    
    Parametry:
    matrix (list): macierz źródłowa o rozmiarze 3x3.
    
    Zwraca:
    float: wyznacznik macierzy.
    """
    a11, a12, a13 = matrix[0][0], matrix[0][1], matrix[0][2]
    a21, a22, a23 = matrix[1][0], matrix[1][1], matrix[1][2]
    a31, a32, a33 = matrix[2][0], matrix[2][1], matrix[2][2]
    
    det = (a11 * (a22 * a33 - a23 * a32) - 
           a12 * (a21 * a33 - a23 * a31) + 
           a13 * (a21 * a32 - a22 * a31))
    
    return float(det)