def create_matrix(rows: int, cols: int, fill_value=0) -> list:
    """ 
    Tworzy macierz o rozmiarze rows x cols, wypełnioną wartością fill_value.
    Parametry:
    rows (int): liczba wierszy.
    cols (int): liczba kolumn.
    fill_value (dowolny typ): wartość do wypełnienia macierzy.
    Zwraca:
    list: macierz w postaci listy list.
    """
    return [[fill_value for _ in range(cols)] for _ in range(rows)]

def add_matrices(matrix_a: list, matrix_b: list) -> list:
    """ 
    Dodaje dwie macierze o tym samym rozmiarze.
    Parametry:
    matrix_a (list): pierwsza macierz.
    matrix_b (list): druga macierz.
    Zwraca:
    list: wynik dodawania macierzy.
    """
    if len(matrix_a) != len(matrix_b) or len(matrix_a[0]) != len(matrix_b[0]):
        raise ValueError("Macierze muszą mieć ten sam rozmiar")
    return [[a + b for a, b in zip(row_a, row_b)] for row_a, row_b in zip(matrix_a, matrix_b)]

def scalar_multiply(matrix: list, scalar: float) -> list:
    """ 
    Mnoży wszystkie elementy macierzy przez skalar.
    Parametry:
    matrix (list): macierz źródłowa.
    scalar (float): liczba, przez którą mnożone są elementy macierzy.
    Zwraca:
    list: wynik mnożenia macierzy przez skalar.
    """
    return [[element * scalar for element in row] for row in matrix]

def multiply_matrices(matrix_a: list, matrix_b: list) -> list:
    """ 
    Mnoży dwie macierze.
    Parametry:
    matrix_a (list): pierwsza macierz.
    matrix_b (list): druga macierz.
    Zwraca:
    list: wynik mnożenia macierzy.
    """
    if len(matrix_a[0]) != len(matrix_b):
        raise ValueError("Liczba kolumn pierwszej macierzy musi być równa liczbie wierszy drugiej macierzy")
    return [[sum(a * b for a, b in zip(row_a, col_b)) for col_b in zip(*matrix_b)] for row_a in matrix_a]

def transpose_matrix(matrix: list) -> list:
    """ 
    Transponuje macierz.
    Parametry:
    matrix (list): macierz źródłowa.
    Zwraca:
    list: macierz transponowana.
    """
    return list(map(list, zip(*matrix)))

def determinant_3x3(matrix: list) -> float:
    """ 
    Oblicza wyznacznik macierzy 3x3.
    Parametry:
    matrix (list): macierz źródłowa o rozmiarze 3x3.
    Zwraca:
    float: wyznacznik macierzy.
    """
    if len(matrix) != 3 or len(matrix[0]) != 3:
        raise ValueError("Macierz musi być 3x3")
    a11, a12, a13 = matrix[0]
    a21, a22, a23 = matrix[1]
    a31, a32, a33 = matrix[2]
    return a11 * (a22 * a33 - a23 * a32) - a12 * (a21 * a33 - a23 * a31) + a13 * (a21 * a32 - a22 * a31)