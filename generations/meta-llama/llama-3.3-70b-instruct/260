import numpy as np

def conjugate_gradients(A, b, x0=None, tol=1e-10, max_iter=1000):
    """
    Solves a system of linear scalar equations Ax = b using the conjugate gradient method.

    Args:
        A (numpy array): A square matrix representing the system of equations.
        b (numpy array): A vector representing the right-hand side of the system.
        x0 (numpy array, optional): An initial guess for the solution. Defaults to None.
        tol (float, optional): The tolerance for convergence. Defaults to 1e-10.
        max_iter (int, optional): The maximum number of iterations. Defaults to 1000.

    Returns:
        numpy array: The solution to the system of equations.
    """
    n = len(b)
    
    if x0 is None:
        x = np.zeros(n)
    else:
        x = x0
    
    r = b - np.dot(A, x)
    p = r.copy()
    rsold = np.dot(r, r)
    
    for _ in range(max_iter):
        Ap = np.dot(A, p)
        alpha = rsold / np.dot(p, Ap)
        x += alpha * p
        r -= alpha * Ap
        rsnew = np.dot(r, r)
        
        if np.sqrt(rsnew) < tol:
            break
        
        p = r + (rsnew / rsold) * p
        rsold = rsnew
    
    return x

# Example usage:
A = np.array([[4, 12, -16], [12, 37, -43], [-16, -43, 98]])
b = np.array([10, 25, -35])
x = conjugate_gradients(A, b)
print(x)