from langchain_ollama import ChatOllama
from langchain_core.prompts.chat import ChatPromptTemplate
import json

# Initialize the ChatOllama model with error handling
try:
    chat_model = ChatOllama(model="llama3.2", base_url="http://localhost:11434")
except Exception as e:
    print(f"Error initializing ChatOllama model: {str(e)}")
    chat_model = None

# Load SHAP values from JSON file with error handling
try:
    with open("Vuori_Final_Approval_2024_09_24.json", "r") as file:
        shap_values_json = json.load(file).get("shap_values")
except FileNotFoundError:
    print("Error: File 'Vuori_Final_Approval_2024_09_24.json' not found.")
    shap_values_json = None
except json.JSONDecodeError:
    print("Error: Failed to parse JSON from file 'Vuori_Final_Approval_2024_09_09_24.json'.")
    shap_values_json = None

# Load system prompt from file with error handling
try:
    with open("system.prompt", "r") as file:
        sys_prompt = file.read().strip()
except FileNotFoundError:
    print("Error: File 'system.prompt' not found.")
    sys_prompt = None

# Prepare the messages
if chat_model and shap_values_json and sys_prompt:
    template = ChatPromptTemplate([
        ("system", sys_prompt),
        ("human", "{user_input}"),
    ])

    # Generate the response
    try:
        prompt_value = template.invoke(json.dumps(shap_values_json))
        chain = prompt_value | chat_model
        # Print the response
        chain.invoke()
    except Exception as e:
        print(f"Error generating response: {str(e)}")
else:
    print("Error: One or more required components are missing.")
