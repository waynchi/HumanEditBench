def create_matrix(rows: int, cols: int, fill_value=0) -> list:
    """
    创建一个大小为rows x cols的矩阵，并用fill_value填充。
    
    Parameters:
    rows (int): 行数。
    cols (int): 列数。
    fill_value (任意类型): 用于填充矩阵的值。
    
    Returns:
    list: 以列表形式表示的矩阵。
    """
    return [[fill_value for _ in range(cols)] for _ in range(rows)]

def add_matrices(matrix_a: list, matrix_b: list) -> list:
    """
    加法两个相同大小的矩阵。
    
    Parameters:
    matrix_a (list): 第一个矩阵。
    matrix_b (list): 第二个矩阵。
    
    Returns:
    list: 矩阵加法的结果。
    """
    if len(matrix_a) != len(matrix_b) or len(matrix_a[0]) != len(matrix_b[0]):
        raise ValueError("两个矩阵的大小必须相同")
    return [[a + b for a, b in zip(row_a, row_b)] for row_a, row_b in zip(matrix_a, matrix_b)]

def scalar_multiply(matrix: list, scalar: float) -> list:
    """
    将矩阵的所有元素乘以标量。
    
    Parameters:
    matrix (list): 原始矩阵。
    scalar (float): 用于乘以矩阵元素的数。
    
    Returns:
    list: 矩阵数乘的结果。
    """
    return [[element * scalar for element in row] for row in matrix]

def multiply_matrices(matrix_a: list, matrix_b: list) -> list:
    """
    乘法两个矩阵。
    
    Parameters:
    matrix_a (list): 第一个矩阵。
    matrix_b (list): 第二个矩阵。
    
    Returns:
    list: 矩阵乘法的结果。
    """
    if len(matrix_a[0]) != len(matrix_b):
        raise ValueError("第一个矩阵的列数必须等于第二个矩阵的行数")
    result = [[0 for _ in range(len(matrix_b[0]))] for _ in range(len(matrix_a))]
    for i in range(len(matrix_a)):
        for j in range(len(matrix_b[0])):
            for k in range(len(matrix_b)):
                result[i][j] += matrix_a[i][k] * matrix_b[k][j]
    return result

def transpose_matrix(matrix: list) -> list:
    """
    转置矩阵。
    
    Parameters:
    matrix (list): 原始矩阵。
    
    Returns:
    list: 转置后的矩阵。
    """
    return [[row[i] for row in matrix] for i in range(len(matrix[0]))]

def determinant_3x3(matrix: list) -> float:
    """
    计算3x3矩阵的行列式。
    
    Parameters:
    matrix (list): 大小为3x3的原始矩阵。
    
    Returns:
    float: 矩阵的行列式。
    """
    if len(matrix) != 3 or len(matrix[0]) != 3:
        raise ValueError("仅支持3x3矩阵")
    a11, a12, a13 = matrix[0]
    a21, a22, a23 = matrix[1]
    a31, a32, a33 = matrix[2]
    return a11 * (a22 * a33 - a23 * a32) - a12 * (a21 * a33 - a23 * a31) + a13 * (a21 * a32 - a22 * a31)