import numpy as np

def grad_conjunto(A, b, x0, tol=1e-5, max_iter=100):
    """
    Función para el método de gradientes conjugados.

    Parámetros:
    A (numpy array): Matriz de coeficientes.
    b (numpy array): Vector de términos independientes.
    x0 (numpy array): Valor inicial de la solución.
    tol (float, opcional): Tolerancia para la convergencia. Por defecto es 1e-5.
    max_iter (int, opcional): Número máximo de iteraciones. Por defecto es 100.

    Regresa:
    x (numpy array): Solución aproximada del sistema de ecuaciones lineales Ax = b.
    """
    n = len(b)
    x = x0.copy()
    r = b - np.dot(A, x)
    p = r.copy()
    rsold = np.dot(r, r)

    for _ in range(max_iter):
        Ap = np.dot(A, p)
        alpha = rsold / np.dot(p, Ap)
        x = x + alpha * p
        r = r - alpha * Ap
        rsnew = np.dot(r, r)
        if np.sqrt(rsnew) < tol:
            break
        p = r + (rsnew / rsold) * p
        rsold = rsnew

    return x

# Ejemplo de uso
A = np.array([[4, 12, -16], [12, 37, -43], [-16, -43, 98]])
b = np.array([10, 25, 35])
x0 = np.array([0, 0, 0])

sol = grad_conjunto(A, b, x0)
print(sol)