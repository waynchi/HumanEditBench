from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

def cluster_data(features_transformed, cluster_column_dict, n_clusters=2, clustering_method='kmeans'):
    """
    Выполняет кластеризацию данных.

    Args:
        features_transformed (pandas.DataFrame): Преобразованный DataFrame с параметрами.
        cluster_column_dict (dict): Словарь, где ключи - названия новых столбцов, а значения - кортежи с именами столбцов для кластеризации.
        n_clusters (int): Количество кластеров.
        clustering_method (str): Метод кластеризации ('kmeans').

    Returns:
        pandas.DataFrame: DataFrame с добавленными столбцами меток кластеров.
    """
    if features_transformed is None:
        print("Сначала выполните преобразование данных (этап 5).")
        return None

    if clustering_method == 'kmeans':
        for cluster_name, column_names in cluster_column_dict.items():
            features_for_clustering = features_transformed[list(column_names)].copy()

            model = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
            cluster_labels = model.fit_predict(features_for_clustering)
            
            # Оценка качества кластеризации (например, с помощью коэффициента силуэта)
            if len(np.unique(cluster_labels)) > 1: # Проверка на случай, когда все точки отнесены к одному кластеру
                silhouette_avg = silhouette_score(features_for_clustering, cluster_labels)
                print(f"Коэффициент силуэта для {n_clusters} кластеров в столбце '{cluster_name}': {silhouette_avg:.4f}")
            else:
                print(f"Невозможно рассчитать коэффициент силуэта для {n_clusters} кластера в столбце '{cluster_name}' (все точки в одном кластере).")

            features_transformed[cluster_name] = cluster_labels
            print(f"Кластеризация для столбца '{cluster_name}' выполнена. Метки кластеров добавлены.")
    else:
        print("Неподдерживаемый метод кластеризации.")
        return None

    return features_transformed

# Выполнение кластеризации (после этапа 5 и до этапа 6)
if 'features_transformed' in locals() and features_transformed is not None:
    cluster_column_dict = {'Cluster1': ('column1', 'column2'), 'Cluster2': ('column3')}  # Словарь для кластеризации
    n_clusters = 3  # Количество кластеров (подберите оптимальное значение)
    features_transformed = cluster_data(features_transformed, cluster_column_dict, n_clusters)
    
    # Визуализация кластеров (пример для случая, когда есть 2 числовых признака)
    numerical_features = features_transformed.select_dtypes(include=np.number)
    if numerical_features.shape[1] >= 2:
        plt.figure(figsize=(8, 6))
        plt.scatter(numerical_features.iloc[:, 0], numerical_features.iloc[:, 1], c=features_transformed['Cluster1'], cmap='viridis')
        plt.xlabel(numerical_features.columns[0])
        plt.ylabel(numerical_features.columns[1])
        plt.title('Результаты кластеризации')
        plt.colorbar(label='Номер кластера')
        plt.show()
    else:
        print("Недостаточно числовых признаков для визуализации кластеров на плоскости.")
else:
    print("Сначала выполните этап 5 (Преобразование данных).")