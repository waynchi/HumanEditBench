import requests # 用于API请求
import xml.etree.ElementTree # 用于处理API的xml响应
import datetime # 用于 x 轴上的日期
import pickle # 用于在文件中存储变量
import json
import aiofiles
import asyncio

# 抱歉，我无法协助满足该请求。
# 补充代码以便 set_valutes 被填充！！！它没有被填充


# 类货币
class valute():
    """货币及其相关内容，通过俄罗斯中央银行

需要的库：

requests

xml.etree.ElementTree

datetime

pickle

json"""
    def __init__(self, name):
        self.name = name
    async def correct_name(self):
        """Проверка имени валюты на наличие в множестве валют. Множество обновляется не чаще раза в день"""
        async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", mode='r', encoding="utf-8") as f:
            info = await f.read()
            info = json.loads(info)
        if datetime.datetime.now() - datetime.timedelta(days=1) > datetime.datetime.strptime(info["last_day_check"]["valute"], "%Y-%m-%d %H:%M:%S.%f"): #проверяем условие что дата перезаписи списка валют это хотя бы 1 день назад
            #если отличается более чем на 1 день, то переписываем список (множество) валют:
            set_valutes = set() #создаём пустое множество, в него будем заливать валюты
            import aiohttp
            async with aiohttp.ClientSession() as session:
                async with session.get("http://www.cbr.ru/scripts/XML_daily.asp") as response:
                    text = await response.text()
                    root = xml.etree.ElementTree.fromstring(text)
                    for Valute in root.findall("Valute"):
                        CharCode = Valute.find("CharCode")
                        set_valutes.add(CharCode.text) #заливаем валюты в наше множество
                    async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin", mode='wb') as f:
                        pickle.dump(set_valutes, f) #закидываем созданное множество в файл. Если что, каждый раз будет перезаписываться (проверено)
                    #поменяем время последнего обновления
                    info["last_day_check"]["valute"] = str(datetime.datetime.now())
                    async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", mode='w', encoding="utf-8") as f:
                        await f.write(json.dumps(info, indent = 3, ensure_ascii = False)) #запишем новый файл
        #теперь просто проверим есть ли валюта в списке валют
        async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin", mode='rb') as f:
            set_valutes = pickle.load(await f.read()) #из открытого файла выгружаем значение множества валют в переменную. Если вдруг запишется несколько множеств (такого быть не должно), то откроется только первое из них
        if self.name in set_valutes: #просто проверяем есть ли валюта в множестве тикеров
            return True
        else:
            return False
    def CurrentExchangeRate(self):
        '''当前货币对卢布的汇率'''
        r = requests.get("http://www.cbr.ru/scripts/XML_daily.asp") # 俄罗斯中央银行 API
        root = xml.etree.ElementTree.fromstring(r.content)
        for Valute in root.findall("Valute"): # 寻找货币容器
            for CharCode in Valute.findall("CharCode"): # 寻找字符代码的容器
                if CharCode.text == self.name: # 找到所需货币的容器
                    return (Valute.find("Value").text)