def create_matrix(rows: int, cols: int, fill_value=0) -> list:
    """ Creates a matrix of size rows x cols, filled with fill_value.
    Parameters:
    rows (int): number of rows.
    cols (int): number of columns.
    fill_value (any type): value to fill the matrix.
    Returns:
    list: matrix as a list of lists.
    """
    return [[fill_value for _ in range(cols)] for _ in range(rows)]

def add_matrices(matrix_a: list, matrix_b: list) -> list:
    """ Adds two matrices of the same size.
    Parameters:
    matrix_a (list): first matrix.
    matrix_b (list): second matrix.
    Returns:
    list: result of matrix addition.
    """
    if len(matrix_a) != len(matrix_b) or len(matrix_a[0]) != len(matrix_b[0]):
        raise ValueError("Matrices are not the same size")
    return [[a + b for a, b in zip(row_a, row_b)] for row_a, row_b in zip(matrix_a, matrix_b)]

def scalar_multiply(matrix: list, scalar: float) -> list:
    """ Multiplies all elements of a matrix by a scalar.
    Parameters:
    matrix (list): original matrix.
    scalar (float): number by which matrix elements are multiplied.
    Returns:
    list: result of matrix scalar multiplication.
    """
    return [[element * scalar for element in row] for row in matrix]

def multiply_matrices(matrix_a: list, matrix_b: list) -> list:
    """ Multiplies two matrices.
    Parameters:
    matrix_a (list): first matrix.
    matrix_b (list): second matrix.
    Returns:
    list: result of matrix multiplication.
    """
    if len(matrix_a[0]) != len(matrix_b):
        raise ValueError("Matrices are not compatible for multiplication")
    return [[sum(a[j] * b[j] for j in range(len(matrix_b[0]))) for b in matrix_b] for a in matrix_a]

def transpose_matrix(matrix: list) -> list:
    """ Transposes a matrix.
    Parameters:
    matrix (list): original matrix.
    Returns:
    list: transposed matrix.
    """
    return [[row[i] for row in matrix] for i in range(len(matrix[0]))]

def determinant_3x3(matrix: list) -> float:
    """ Calculates the determinant of a 3x3 matrix.
    Parameters:
    matrix (list): original 3x3 matrix.
    Returns:
    float: determinant of the matrix.
    """
    a, b, c = matrix[0]
    d, e, f = matrix[1]
    g, h, i = matrix[2]
    return a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g)