from langchain_ollama import ChatOllama
from langchain_core.prompts.chat import ChatPromptTemplate
import json

def generate_response(model_name="llama3.2", base_url="http://localhost:11434", 
                      json_file_path="Vuori_Final_Approval_2024_09_24.json",
                      system_prompt_path="system.prompt"):
    """
    Generate a response using LangChain and Ollama model based on SHAP values.
    
    Args:
        model_name (str): Name of the Ollama model to use
        base_url (str): Base URL for Ollama API
        json_file_path (str): Path to JSON file containing SHAP values
        system_prompt_path (str): Path to system prompt file
        
    Returns:
        str: Generated response content
    """
    # Initialize the ChatOllama model
    chat_model = ChatOllama(model=model_name, base_url=base_url)
    
    # Load SHAP values from JSON file
    with open(json_file_path, "r") as file:
        shap_values_json = json.load(file).get("shap_values")
    
    # Load system prompt from file
    with open(system_prompt_path, "r") as file:
        sys_prompt = file.read().strip()
    
    # Prepare the messages
    prompt = ChatPromptTemplate(
        [
            ("system", sys_prompt),
            ("human", "{user_input}"),
        ]
    )
    
    # Generate the response
    user_input = json.dumps(shap_values_json)  # Prepare user input
    
    chain = prompt | chat_model
    
    # Return the response
    response = chain.invoke({"user_input": user_input})
    return response.content

# Example usage:
if __name__ == "__main__":
    result = generate_response()
    print(result)