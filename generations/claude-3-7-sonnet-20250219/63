from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import numpy as np
import matplotlib.pyplot as plt

def cluster_data(features_transformed, clusters_config, n_clusters=2, clustering_method='kmeans'):
    """
    Выполняет кластеризацию данных для различных наборов столбцов.

    Args:
        features_transformed (pandas.DataFrame): Преобразованный DataFrame с параметрами.
        clusters_config (dict): Словарь с конфигурацией кластеров в формате {имя_кластера: (столбец1, столбец2, ...)}.
        n_clusters (int): Количество кластеров.
        clustering_method (str): Метод кластеризации ('kmeans').

    Returns:
        pandas.DataFrame: DataFrame с добавленными столбцами меток кластеров.
    """
    if features_transformed is None:
        print("Сначала выполните преобразование данных (этап 5).")
        return None

    result_df = features_transformed.copy()
    
    if clustering_method != 'kmeans':
        print("Неподдерживаемый метод кластеризации.")
        return None
    
    for cluster_name, columns in clusters_config.items():
        if isinstance(columns, str):  # Если передана одна колонка в виде строки
            columns = (columns,)
            
        # Выбираем только нужные столбцы для данной кластеризации
        features_for_clustering = result_df[list(columns)].copy()
        
        model = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
        cluster_labels = model.fit_predict(features_for_clustering)
        
        # Оценка качества кластеризации (например, с помощью коэффициента силуэта)
        if len(np.unique(cluster_labels)) > 1:  # Проверка на случай, когда все точки отнесены к одному кластеру
            silhouette_avg = silhouette_score(features_for_clustering, cluster_labels)
            print(f"Коэффициент силуэта для кластера '{cluster_name}' ({n_clusters} кластеров): {silhouette_avg:.4f}")
        else:
            print(f"Невозможно рассчитать коэффициент силуэта для кластера '{cluster_name}' (все точки в одном кластере).")

        result_df[cluster_name] = cluster_labels
        print(f"Кластеризация для колонок {columns} выполнена. Метки кластеров добавлены в столбец '{cluster_name}'.")
    
    return result_df

# Выполнение кластеризации (после этапа 5 и до этапа 6)
if 'features_transformed' in locals() and features_transformed is not None:
    # Словарь с конфигурацией кластеров: {имя_кластера: (столбец1, столбец2, ...)}
    clusters_config = {
        'cluster_features_1_2': ('feature1', 'feature2'),  # Пример: кластеризация по первым двум признакам
        'cluster_feature_3': ('feature3',)  # Пример: кластеризация по третьему признаку
    }
    n_clusters = 3  # Количество кластеров (подберите оптимальное значение)
    features_transformed = cluster_data(features_transformed, clusters_config, n_clusters)
    
    # Визуализация кластеров для первой группы признаков (если есть 2 числовых признака)
    if 'cluster_features_1_2' in features_transformed.columns and 'feature1' in features_transformed.columns and 'feature2' in features_transformed.columns:
        plt.figure(figsize=(8, 6))
        plt.scatter(
            features_transformed['feature1'], 
            features_transformed['feature2'], 
            c=features_transformed['cluster_features_1_2'], 
            cmap='viridis'
        )
        plt.xlabel('feature1')
        plt.ylabel('feature2')
        plt.title('Результаты кластеризации для feature1 и feature2')
        plt.colorbar(label='Номер кластера')
        plt.show()
    else:
        print("Невозможно визуализировать кластеры для первой группы признаков.")
        
    # Аналогичную визуализацию можно добавить для других групп признаков, если нужно
else:
    print("Сначала выполните этап 5 (Преобразование данных).")