import os
import json
import sys
import re
from   tkinter import *
from   tkinter import filedialog
from   tkinter import messagebox as mb
import eel
import tasks
import datetime

@eel.expose
def loadJSONFile(initialdir):
    root = Tk()
    root.withdraw()
    root.wm_attributes('-topmost', 1)
    file_path = filedialog.askopenfilename(title="Выберите JSON файл для загрузки",filetypes=[("JSON files", "*.json"), ("All files", "*.*")],initialdir=initialdir)
    if file_path:
        try:
            with open(file_path, 'r', encoding='utf-8') as file:
                data = json.load(file)
            return data
        except Exception as e:
            print(f"Ошибка при загрузке JSON файла: {e}")
            return None
    else:
        print("Файл не выбран.")
        return None

@eel.expose
def saveJSONFile(json_data):
    root = Tk()
    root.withdraw()
    root.wm_attributes('-topmost', 1)
    file_path = filedialog.asksaveasfilename(title="Сохранить JSON файл как",defaultextension=".json",filetypes=[("JSON files", "*.json"), ("All files", "*.*")])
    if file_path:
        try:
            with open(file_path, 'w', encoding='utf-8') as file:
                json.dump(json_data, file, ensure_ascii=False, indent=4)
            print(f"JSON файл успешно сохранен: {file_path}")
        except Exception as e:
            print(f"Ошибка при сохранении JSON файла: {e}")
    else:
        print("Файл не выбран.")

@eel.expose
def select_file(title,patterns,initialdir):
    patterns=patterns or ['*.*']
    filetypes = [ [p,p.split('/')[-1]] for p in patterns]
    regex     = [ p.split('/')[0] for p in patterns if len(p.split('/'))==2 ]
    root = Tk()
    root.withdraw()
    root.wm_attributes('-topmost', 1)
    while  True:
        file     = filedialog.askopenfilename(filetypes=filetypes,title=title,initialdir=initialdir)
        if not file or not regex: break
        folder=file.replace('\\','/').split('/')[-2]
        for r in regex:
            if re.match(r, folder):
                return file
        mb.showerror("Ошибка",f"Папка не соответствует паттерну {','.join(regex)}. \nПовторите выбор файла")
    return file

@eel.expose
def save_task(taskData,taskName,settings):
    try:
        return tasks.save_task(taskData,taskName,settings),0
    except Exception as e:
        return  0,str(e)

# Write get_task_list to get a list of *.xml file names from the folder settings['taskPath'].
# In the first line of each file, an optional string is recorded: <!-- comment -->
# Present the response in the format of a list of objects {fileName, comment, file_date_str}
@eel.expose
def get_task_list(settings):
    path = settings['taskPath']
    result = []
    
    try:
        # Get list of all .xml files in directory
        xml_files = [f for f in os.listdir(path) if f.endswith('.xml')]
        
        for file_name in xml_files:
            file_path = os.path.join(path, file_name)
            comment = ""
            
            # Get file modification date
            file_date = os.path.getmtime(file_path)
            file_date_str = datetime.datetime.fromtimestamp(file_date).strftime('%Y-%m-%d %H:%M:%S')
            
            # Extract comment from first line if it exists
            try:
                with open(file_path, 'r', encoding='utf-8') as file:
                    first_line = file.readline().strip()
                    comment_match = re.search(r'<!--\s*(.*?)\s*-->', first_line)
                    if comment_match:
                        comment = comment_match.group(1)
            except Exception as e:
                print(f"Error reading file {file_name}: {e}")
            
            result.append({
                "fileName": file_name,
                "comment": comment,
                "file_date_str": file_date_str
            })
        
        # Sort by modification date (newest first)
        result.sort(key=lambda x: x["file_date_str"], reverse=True)
        
        return result
    except Exception as e:
        print(f"Error getting task list: {e}")
        return []


if __name__ == "__main__":
    options={'mode':'chrome'}
    for i in range(2,len(sys.argv),2):
        if sys.argv[i-1]=='mode':  options['mode']=sys.argv[i]

    eel.init('web')
    eel.start('index.html', **options) # , host='localhost', port=8000, size=(1280,800), cmdline_args=['--start-fullscreen'])
    # eel.start('index.html', mode='chrome-app', host='localhost', port=8000, cmdline_args=['--start-fullscreen'])