import { useState, useEffect, useCallback, useMemo } from 'react';

function useDashboardData(user) {
  const [data, setData] = useState({
    customerData: { summary: null, loading: false, customers: [] },
    healthData: [],
    websiteStatus: { checking: false },
    stripeApiKey: "",
    dateRange: {
      startDate: (() => {
        const date = new Date();
        date.setFullYear(date.getFullYear() - 1);
        return date;
      })(),
      endDate: new Date(),
    }
  });

  const calculateHealthData = useCallback(() => {
    const { summary } = data.customerData;
    const { startDate, endDate } = data.dateRange;
    
    if (!summary?.customers?.length) return [];
    
    // Pre-calculate all months between start and end date
    const months = [];
    const currentDate = new Date(startDate);
    
    while (currentDate <= endDate) {
      months.push({
        month: currentDate.toLocaleString("default", { month: "short" }),
        year: currentDate.getFullYear(),
        date: new Date(currentDate)
      });
      currentDate.setMonth(currentDate.getMonth() + 1);
    }

    // Create a map of customer creation dates for faster lookup
    const customersByMonth = {};
    
    summary.customers.forEach(customer => {
      const customerDate = new Date(customer.created);
      const key = `${customerDate.getMonth()}-${customerDate.getFullYear()}`;
      
      if (!customersByMonth[key]) {
        customersByMonth[key] = { active: 0, churned: 0, delinquent: 0 };
      }
      
      if (customer.status === "active") customersByMonth[key].active++;
      else if (customer.status === "churned") customersByMonth[key].churned++;
      else if (customer.status === "delinquent") customersByMonth[key].delinquent++;
    });

    return months.map(({ month, year }) => {
      const monthYear = `${month} ${year}`;
      const key = `${new Date(`${year}-${month}-01`).getMonth()}-${year}`;
      const stats = customersByMonth[key] || { active: 0, churned: 0, delinquent: 0 };
      
      return {
        monthYear,
        healthy: stats.active,
        warning: stats.churned,
        critical: stats.delinquent
      };
    });
  }, [data.customerData.summary, data.dateRange]);

  const loadSettings = useCallback(async () => {
    if (!user?.id || data.stripeApiKey) return;
    
    try {
      const response = await fetch("/api/db/churnary_user_settings", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          query: "SELECT stripe_api_key FROM `user_settings` WHERE `user_id` = ? LIMIT 1",
          values: [user.id],
        }),
      });
      
      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
      const settings = await response.json();
      
      setData(prev => ({ 
        ...prev, 
        stripeApiKey: settings[0]?.stripe_api_key || "" 
      }));
    } catch (error) {
      setData(prev => ({ ...prev, error: "Failed to load user settings" }));
    }
  }, [user?.id, data.stripeApiKey]);

  const loadData = useCallback(async () => {
    if (!user?.id || !data.stripeApiKey) return;

    setData(prev => ({ 
      ...prev, 
      customerData: { ...prev.customerData, loading: true },
      error: null 
    }));

    try {
      const response = await fetch("/api/stripe-customer-summary", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ userId: user.id }),
      });

      if (!response.ok) throw new Error("Failed to fetch customer summary");
      const summary = await response.json();
      if (summary.error) throw new Error(summary.error);

      setData(prev => ({
        ...prev,
        customerData: { 
          summary, 
          loading: false,
          customers: summary.customers 
        },
        healthData: calculateHealthData()
      }));
    } catch (error) {
      setData(prev => ({
        ...prev,
        customerData: { ...prev.customerData, loading: false },
        error: error.message
      }));
    }
  }, [user?.id, data.stripeApiKey, calculateHealthData]);

  const actions = useMemo(() => ({
    checkWebsites: async () => {
      const { customers, summary } = data.customerData;
      if (!summary?.customers?.length || !customers?.length) return;
      
      setData(prev => ({ 
        ...prev, 
        websiteStatus: { checking: true },
        error: null 
      }));

      try {
        const updatedCustomers = await Promise.all(
          customers.map(async (customer) => {
            const response = await fetch("/api/website-churn-detector", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ websiteUrl: customer.website }),
            });
            const health = await response.json();
            return { 
              ...customer, 
              health, 
              status: health.status === "active" ? "active" : "churned" 
            };
          })
        );

        const active = updatedCustomers.filter(c => c.status === "active").length;
        const churned = updatedCustomers.filter(c => c.status === "churned").length;

        setData(prev => ({
          ...prev,
          customerData: { 
            ...prev.customerData, 
            summary: {
              ...prev.customerData.summary,
              customers: updatedCustomers,
              active,
              churned
            }
          },
          healthData: calculateHealthData(),
          websiteStatus: { checking: false }
        }));
      } catch (err) {
        setData(prev => ({
          ...prev,
          websiteStatus: { checking: false },
          error: "Failed to check websites. Please try again."
        }));
      }
    },
    
    setDateRange: (range) => {
      if (range.startDate > range.endDate) {
        setData(prev => ({ ...prev, error: "Start date cannot be after end date" }));
        return;
      }
      setData(prev => {
        const newData = { ...prev, dateRange: range, error: null };
        // Recalculate health data immediately if we have customer data
        if (prev.customerData.summary?.customers) {
          newData.healthData = calculateHealthData();
        }
        return newData;
      });
    },

    clearError: () => {
      setData(prev => ({ ...prev, error: null }));
    }
  }), [data.customerData, calculateHealthData]);

  // Load settings once when user is available
  useEffect(() => {
    if (user?.id) loadSettings();
  }, [user?.id, loadSettings]);

  // Load data when stripe API key is available
  useEffect(() => {
    if (user?.id && data.stripeApiKey) loadData();
  }, [user?.id, data.stripeApiKey, loadData]);

  return { 
    data, 
    actions,
    isLoading: data.customerData.loading || data.websiteStatus.checking 
  };
}

export default useDashboardData;