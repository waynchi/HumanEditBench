def visualize_results_grid(results_df):
    # Get the number of columns in the dataframe
    num_columns = len(results_df.columns)
    
    # Extract and convert all columns to numeric if necessary
    columns = [results_df.iloc[:, i] for i in range(num_columns)]
    columns = [pd.to_numeric(col, errors='coerce') if not pd.api.types.is_numeric_dtype(col) else col for col in columns]
    
    # Deduce the grid shape from the number of results rows
    grid_size = int(np.sqrt(len(results_df)))
    # Reshape columns into matrices
    matrices = [col.to_numpy().reshape(grid_size, grid_size) for col in columns]
    
    # Visualization setup
    fig, axes = plt.subplots(1, num_columns, figsize=(6 * num_columns, 2))
    titles = [f"{results_df.columns[i]} (Categorical/Binary)" if pd.api.types.is_categorical_dtype(columns[i]) or pd.api.types.is_bool_dtype(columns[i]) else f"{results_df.columns[i]} (Continuous)" for i in range(num_columns)]
    
    # Create list of colormaps that cycles between "coolwarm" and "viridis"
    cmaps = ["coolwarm", "viridis"] * (num_columns // 2 + 1)
    cmaps = cmaps[:num_columns]

    # Handle the case where there's only one column
    if num_columns == 1:
        axes = [axes]
        
    # Plot each matrix
    for i, (matrix, ax, title, cmap) in enumerate(zip(matrices, axes, titles, cmaps)):
        im = ax.imshow(matrix, cmap=cmap, interpolation="none")
        ax.set_title(title)
        ax.set_xticks(range(grid_size))
        ax.set_yticks(range(grid_size))
        fig.colorbar(im, ax=ax)

    # Display the plot
    plt.tight_layout()
    plt.show()