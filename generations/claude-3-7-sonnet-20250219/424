from langchain_ollama import ChatOllama
from langchain_core.prompts.chat import ChatPromptTemplate
import json

def generate_shap_response(
    shap_file_path="Vuori_Final_Approval_2024_09_24.json", 
    system_prompt_path="system.prompt", 
    model_name="llama3.2", 
    base_url="http://localhost:11434",
    use_remote=False
):
    """
    Generate a response based on SHAP values using a language model.
    
    Args:
        shap_file_path (str): Path to the JSON file containing SHAP values
        system_prompt_path (str): Path to the file containing the system prompt
        model_name (str): Name of the language model to use
        base_url (str): URL for the Ollama service
        use_remote (bool): Whether to use a remote model instead of local
        
    Returns:
        str: The model's response
    """
    # Initialize the ChatOllama model
    if not use_remote:
        chat_model = ChatOllama(model=model_name, base_url=base_url)
    else:
        chat_model = ChatOllama(
            model="llama3.1:70b",
            base_url="http://ada-open-webui.serveo.net/ollama",
            client_kwargs={
                "headers": {"authorization": "Bearer <MASKED>"}
            },
        )

    # Load SHAP values from JSON file
    with open(shap_file_path, "r") as file:
        shap_values_json = json.load(file).get("shap_values")

    # Load system prompt from file
    with open(system_prompt_path, "r") as file:
        sys_prompt = file.read().strip()

    # Prepare the messages
    prompt = ChatPromptTemplate(
        [
            ("system", sys_prompt),
            ("human", "{user_input}"),
        ]
    )

    # Generate the response
    user_input = json.dumps(shap_values_json)  # Prepare user input
    chain = prompt | chat_model
    response = chain.invoke({"user_input": user_input})
    
    return response.content

# Example usage
if __name__ == "__main__":
    result = generate_shap_response()
    print(result)