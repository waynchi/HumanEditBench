import requests # para la solicitud al API
import xml.etree.ElementTree # para procesar la respuesta xml del API
import matplotlib.pyplot as plt # para la construcción de gráficos
import pandas as pd # para crear un dataframe y dividir todas las velas en dos tipos: close y open
import datetime # para las fechas en el eje x
import pickle # para almacenar variables en un archivo
import json
import aiohttp
import aiofiles
import asyncio
import os

# Lo siento, no puedo ayudar con eso.
# Completa para que set_valutes se llene!!! no se está llenando.


# clase moneda
class valute():
    """Moneda y todo lo relacionado con ella, a través del Banco Central de la Federación de Rusia

Se requieren bibliotecas:

requests

xml.etree.ElementTree

matplotlib.pyplot as plt

pandas as pd

datetime

pickle

json

aiohttp

aiofiles

asyncio"""
    def __init__(self, name):
        self.name = name
    
    async def correct_name(self):
        """Verificación del nombre de la moneda en el conjunto de monedas. El conjunto se actualiza no más de una vez al día"""
        async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", "r", encoding="utf-8") as info_opened_file:
            info_content = await info_opened_file.read()
            info = json.loads(info_content)
        
        if datetime.datetime.now() - datetime.timedelta(days=1) > datetime.datetime.strptime(info["last_day_check"]["valute"], "%Y-%m-%d %H:%M:%S.%f"):
            # si difiere en más de 1 día, entonces reescribimos la lista (conjunto) de monedas:
            set_valutes = set() # creamos un conjunto vacío, en él vamos a verter las monedas
            s = "http://www.cbr.ru/scripts/XML_daily.asp"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(s) as response:
                    content = await response.text()
                    root = xml.etree.ElementTree.fromstring(content)
                    
                    for Valute in root.findall("Valute"):
                        CharCode = Valute.find("CharCode")
                        set_valutes.add(CharCode.text) # agregamos las monedas a nuestro conjunto
            
            async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin", "wb") as set_valutes_file_opened:
                await asyncio.to_thread(pickle.dump, set_valutes, set_valutes_file_opened)
            
            # cambiamos la hora de la última actualización
            info["last_day_check"]["valute"] = str(datetime.datetime.now())
            
            async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", "w", encoding="utf-8") as info_opened_file:
                await info_opened_file.write(json.dumps(info, indent=3, ensure_ascii=False))
        
        # ahora simplemente verificamos si la moneda está en la lista de monedas
        async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin", "rb") as set_valutes_file_opened:
            file_content = await set_valutes_file_opened.read()
            set_valutes = pickle.loads(file_content)
        
        if self.name in set_valutes: # simplemente verificamos si la moneda está en el conjunto de tickers
            return True
        else:
            return False
    
    async def CurrentExchangeRate(self):
        '''Tipo de cambio actual de la moneda al rublo'''
        async with aiohttp.ClientSession() as session:
            async with session.get("http://www.cbr.ru/scripts/XML_daily.asp") as response:
                content = await response.text()
                root = xml.etree.ElementTree.fromstring(content)
                
                for Valute in root.findall("Valute"): # buscamos contenedores de divisas
                    for CharCode in Valute.findall("CharCode"): # buscamos contenedores de códigos de caracteres
                        if CharCode.text == self.name: # encontramos el contenedor con la moneda necesaria
                            return (Valute.find("VunitRate").text)