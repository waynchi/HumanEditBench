import random
import logging
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.common.exceptions import NoSuchElementException, TimeoutException, WebDriverException
import time

class SearchModule:
    def __init__(self, driver, config):
        self.driver = driver
        self.config = config
        self.search_engine = config.get('Search', 'search_engine')
        self.queries = [q.strip() for q in config.get('Search', 'queries').split(',')]
        self.random_query = config.getboolean('Search', 'random_query')

    def perform_search(self):
        try:
            query = random.choice(self.queries) if self.random_query else self.queries[0]
            logging.info(f"Performing search with query: {query}")

            try:
                if self.search_engine.lower() == 'google':
                    self.driver.get("https://www.google.com")
                    search_box = self.driver.find_element(By.NAME, "q")
                elif self.search_engine.lower() == 'yandex':
                    self.driver.get("https://ya.ru")
                    search_box = self.driver.find_element(By.CSS_SELECTOR, 'input[placeholder="Найдётся всё"]')
                elif self.search_engine.lower() == 'bing':
                    self.driver.get("https://www.bing.com")
                    search_box = self.driver.find_element(By.NAME, "q")
                else:
                    logging.error("Unsupported search engine.")
                    return
            except NoSuchElementException as e:
                logging.error(f"Could not find search box element: {e}")
                return
            except WebDriverException as e:
                logging.error(f"Error loading search engine page: {e}")
                return

            try:
                search_box.send_keys(query + Keys.RETURN)
                time.sleep(random.uniform(2, 4))  # Waiting for results to load
            except Exception as e:
                logging.error(f"Error sending keys to search box: {e}")
        except Exception as e:
            logging.error(f"Unexpected error in perform_search: {e}")

    def navigate_random_link(self):
        try:
            logging.info("Navigating to a random search result link.")
            links = []
            
            try:
                if self.search_engine.lower() == 'google':
                    links = self.driver.find_elements(By.CSS_SELECTOR, 'div.yuRUbf > a')
                elif self.search_engine.lower() == 'yandex':
                    links = self.driver.find_elements(By.CSS_SELECTOR, 'a.link')
                elif self.search_engine.lower() == 'bing':
                    links = self.driver.find_elements(By.CSS_SELECTOR, 'li.b_algo h2 a')
                else:
                    logging.error("Unsupported search engine.")
                    return
            except Exception as e:
                logging.error(f"Error finding links on search results page: {e}")
                return

            if not links:
                logging.warning("No links found on the search results page.")
                return

            try:
                random_link = random.choice(links)
                href = random_link.get_attribute('href')
                if not href:
                    logging.warning("Selected link does not have a valid href attribute.")
                    return
                    
                logging.info(f"Navigating to: {href}")
                self.driver.get(href)
                time.sleep(random.uniform(3, 6))  # Waiting for the page to load
            except IndexError:
                logging.error("Error selecting random link from empty list.")
            except WebDriverException as e:
                logging.error(f"Error navigating to the selected link: {e}")
        except Exception as e:
            logging.error(f"Unexpected error in navigate_random_link: {e}")