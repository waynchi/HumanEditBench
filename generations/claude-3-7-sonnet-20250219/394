from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import numpy as np
import matplotlib.pyplot as plt

def cluster_data(features_transformed, clustering_config, n_clusters=2, clustering_method='kmeans'):
    """Wykonuje klasteryzację danych dla wskazanych zestawów kolumn.

    Args:
        features_transformed (pandas.DataFrame): Przekształcony DataFrame z parametrami.
        clustering_config (dict): Słownik w formacie {nazwa_klastra: (kolumna1, kolumna2, ...), ...},
                                  określający które kolumny mają być używane dla każdego klastra.
        n_clusters (int): Liczba klastrów.
        clustering_method (str): Metoda klasteryzacji ('kmeans').

    Returns:
        pandas.DataFrame: DataFrame z dodanymi kolumnami etykiet klastrów.
    """
    if features_transformed is None:
        print("Сначала выполните преобразование данных (этап 5).")
        return None

    features_result = features_transformed.copy()

    # Dla każdego zestawu kolumn wykonaj klasteryzację
    for cluster_name, columns in clustering_config.items():
        if not all(col in features_transformed.columns for col in columns):
            print(f"Ostrzeżenie: Niektóre kolumny dla klastra '{cluster_name}' nie istnieją w danych.")
            continue

        features_for_clustering = features_transformed[list(columns)].copy()

        if clustering_method == 'kmeans':
            model = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
            cluster_labels = model.fit_predict(features_for_clustering)
            
            # Ocena jakości klasteryzacji
            if len(np.unique(cluster_labels)) > 1:
                silhouette_avg = silhouette_score(features_for_clustering, cluster_labels)
                print(f"Коэффициент силуэта для '{cluster_name}' ({n_clusters} кластеров): {silhouette_avg:.4f}")
            else:
                print(f"Невозможно рассчитать коэффициент силуэта для '{cluster_name}' ({n_clusters} кластера - все точки в одном кластере).")
        else:
            print("Неподдерживаемый метод кластеризации.")
            continue

        features_result[cluster_name] = cluster_labels
        print(f"Кластеризация для '{cluster_name}' выполнена. Метки кластеров добавлены в столбец '{cluster_name}'.")

    return features_result

# Wykonywanie klasteryzacji (po etapie 5 i przed etapem 6)
if 'features_transformed' in locals() and features_transformed is not None:
    # Definiujemy konfigurację klastrów - które kolumny mają być używane do każdego klastra
    clustering_config = {
        'cluster1': ('feature1', 'feature2'),  # Pierwszy klaster używa feature1 i feature2
        'cluster2': ('feature3',)              # Drugi klaster używa tylko feature3
    }
    
    n_clusters = 3  # Liczba klastrów (dobierz optymalną wartość)
    features_transformed = cluster_data(features_transformed, clustering_config, n_clusters)
    
    # Wizualizacja klastrów (przykład dla pierwszego klastra, jeśli ma 2 cechy)
    if 'cluster1' in features_transformed.columns and len(clustering_config['cluster1']) >= 2:
        plt.figure(figsize=(8, 6))
        plt.scatter(
            features_transformed[clustering_config['cluster1'][0]], 
            features_transformed[clustering_config['cluster1'][1]], 
            c=features_transformed['cluster1'], 
            cmap='viridis'
        )
        plt.xlabel(clustering_config['cluster1'][0])
        plt.ylabel(clustering_config['cluster1'][1])
        plt.title('Результаты кластеризации (cluster1)')
        plt.colorbar(label='Номер кластера')
        plt.show()
    else:
        print("Недостаточно числовых признаков для визуализации кластеров на плоскости.")
else:
    print("Сначала выполните этап 5 (Преобразование данных).")