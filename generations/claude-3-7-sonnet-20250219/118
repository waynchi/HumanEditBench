from beem.discussions import Discussions, Query
from beem.comment import Comment
import random
import string

n_respuestas_minimas = 5
diccionario = {}

def procesar (texto: str):
    return "count me " in texto
def is_own_author (autor: str):
    return author == 'subidu'
def is_banned (autor: str):
    list_banned = []
    return autor in list_banned
def generar_permlink_unico () -> str:
    return "".join(random.choices(string.digits, k=10))
def procesar_replies (replies: Comment):
    pass
def preparar_comentario (parent_author: str, parent_permlink: str, permlink: str, title: str = '', author: str = 'subidu' , body: str = 'Count me in ^^ @subidu') -> dict[str:str]:
    return {
        "parent_author": parent_author,
        "parent_permlink": parent_permlink,
        "author": author,
        "permlink": permlink,
        "title": title,
        "body": body,
    }

def build_hierarchical_dictionary(posts_generator):
    """
    Creates a hierarchical dictionary of posts and their replies.
    """
    hierarchy = {}
    
    for post in posts_generator:
        post_author = post['author']
        post_permlink = post['permlink']
        post_children = post['children']
        
        # Create entry for the post
        post_key = f"{post_author}/{post_permlink}"
        hierarchy[post_key] = {
            'author': post_author,
            'permlink': post_permlink,
            'children_count': post_children,
            'replies': {}
        }
        
        # If the post has minimum replies, fetch them
        if post_children > n_respuestas_minimas:
            comment = Comment(authorperm=post_key)
            post_replies = comment.get_replies()
            
            for reply in post_replies:
                reply_author = reply['author']
                reply_permlink = reply['permlink']
                reply_text = reply['body']
                
                # Add reply to the hierarchy
                reply_key = f"{reply_author}/{reply_permlink}"
                hierarchy[post_key]['replies'][reply_key] = {
                    'author': reply_author,
                    'permlink': reply_permlink,
                    'body': reply_text,
                    'contains_count_me': procesar(reply_text),
                    'is_own_author': is_own_author(reply_author),
                    'is_banned': is_banned(reply_author)
                }
    
    return hierarchy


q = Query()
d = Discussions()
posts_generator = d.get_discussions("created", q, limit=6000)
X = 0

# Build the hierarchical dictionary
post_hierarchy = build_hierarchical_dictionary(posts_generator)

# Process the hierarchy for counting and printing
for post_key, post_data in post_hierarchy.items():
    post_author, post_permlink = post_key.split('/')
    cnt = 0
    X += 1
    
    if post_data['children_count'] > n_respuestas_minimas:
        cnt = 0
        last_reply = None
        
        for reply_key, reply_data in post_data['replies'].items():
            author = reply_data['author']
            text = reply_data['body']
            
            if reply_data['is_own_author']:
                # Reevaluate the comment
                break
            if reply_data['is_banned']:
                break
            if reply_data['contains_count_me']:
                cnt += 1
                last_reply = reply_data
    
    if cnt > 3 and last_reply:
        print("Iterador: ", X)
        print(last_reply['author'], '/', last_reply['permlink'])