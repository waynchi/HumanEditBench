import requests # для запроса к API
import xml.etree.ElementTree # для обработки xml-ответа API
import matplotlib.pyplot as plt # для построения графиков
import pandas as pd # для создания датафрейма и разделения всех свечей на два типа: close и open
import datetime # для дат по оси x
import pickle # для хранения переменных в файле
import json
import aiohttp # для асинхронных запросов
import aiofiles # для асинхронной работы с файлами
import asyncio # для асинхронных операций


# класс валюта
class valute():
    """Валюта и всё с ней связанное, через ЦБ РФ

Требуются библиотеки:

requests

xml.etree.ElementTree

matplotlib.pyplot as plt

pandas as pd

datetime

pickle

json

aiohttp

aiofiles

asyncio"""
    def __init__(self, name):
        self.name = name
        
    async def correct_name(self):
        """Проверка имени валюты на наличие в множестве валют. Множество обновляется не чаще раза в день."""
        async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", "r", encoding="utf-8") as info_opened_file:
            info_content = await info_opened_file.read()
            info = json.loads(info_content)
            
        if datetime.datetime.now() - datetime.timedelta(days=1) > datetime.datetime.strptime(info["last_day_check"]["valute"], "%Y-%m-%d %H:%M:%S.%f"):
            # если отличается более чем на 1 день, то переписываем список (множество) валют:
            set_valutes = set() # создаём пустое множество, в него будем добавлять валюты
            url = "http://www.cbr.ru/scripts/XML_daily.asp"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as r:
                    content = await r.text()
                    root = xml.etree.ElementTree.fromstring(content)
                    
            for Valute in root.findall("Valute"):
                CharCode = Valute.find("CharCode")
                set_valutes.add(CharCode.text) # добавляем валюты в наше множество
                
            async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin", "wb") as set_valutes_file_opened:
                await set_valutes_file_opened.write(pickle.dumps(set_valutes))
                
            # обновим время последнего обновления
            info["last_day_check"]["valute"] = str(datetime.datetime.now())
            
            async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", "w", encoding="utf-8") as info_opened_file:
                await info_opened_file.write(json.dumps(info, indent=3, ensure_ascii=False))
                
        # теперь просто проверим, есть ли валюта в списке валют
        async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin", "rb") as set_valutes_file_opened:
            set_valutes_data = await set_valutes_file_opened.read()
            set_valutes = pickle.loads(set_valutes_data)
            
        if self.name in set_valutes:
            return True
        else:
            return False
            
    async def CurrentExchangeRate(self):
        '''Текущий курс обмена валюты на рубль'''
        async with aiohttp.ClientSession() as session:
            async with session.get("http://www.cbr.ru/scripts/XML_daily.asp") as r:
                content = await r.text()
                root = xml.etree.ElementTree.fromstring(content)
                
        for Valute in root.findall("Valute"):
            for CharCode in Valute.findall("CharCode"):
                if CharCode.text == self.name:
                    return (Valute.find("VunitRate").text)