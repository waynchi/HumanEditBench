from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

def cluster_data(features_transformed, clusters_config, n_clusters=2, clustering_method='kmeans'):
    """Realiza la agrupación de datos independiente para los conjuntos de columnas especificados.

Args:
    features_transformed (pandas.DataFrame): DataFrame transformado con parámetros.
    clusters_config (dict): Diccionario donde las claves son los nombres de las columnas para
                           las etiquetas de clústeres, y los valores son tuplas con los nombres
                           de las columnas a utilizar para la clusterización.
    n_clusters (int): Número de clústeres.
    clustering_method (str): Método de agrupación ('kmeans').

Returns:
    pandas.DataFrame: DataFrame con las columnas de etiquetas de clústeres añadidas."""
    if features_transformed is None:
        print("Сначала выполните преобразование данных (этап 5).")
        return None

    features_result = features_transformed.copy()
    
    for cluster_feature_name, columns in clusters_config.items():
        # Seleccionar solo las columnas especificadas para este clúster
        if isinstance(columns, tuple) or isinstance(columns, list):
            features_for_clustering = features_result[list(columns)].copy()
        else:
            features_for_clustering = features_result[[columns]].copy()  # Para el caso de una sola columna

        if clustering_method == 'kmeans':
            model = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
            cluster_labels = model.fit_predict(features_for_clustering)
            
            # Evaluación de la calidad de la agrupación
            if len(np.unique(cluster_labels)) > 1:
                silhouette_avg = silhouette_score(features_for_clustering, cluster_labels)
                print(f"Коэффициент силуэта для {cluster_feature_name} ({n_clusters} кластеров): {silhouette_avg:.4f}")
            else:
                print(f"Невозможно рассчитать коэффициент силуэта для {cluster_feature_name} (все точки в одном кластере).")

            features_result[cluster_feature_name] = cluster_labels
            print(f"Кластеризация для {cluster_feature_name} выполнена. Метки добавлены в столбец '{cluster_feature_name}'.")
        else:
            print(f"Неподдерживаемый метод кластеризации для {cluster_feature_name}.")
            return None

    return features_result

# Ejecución de la clusterización (después de la etapa 5 y antes de la etapa 6)
if 'features_transformed' in locals() and features_transformed is not None:
    # Configuración de clústeres: {nombre_columna_resultado: (columnas_para_clustering)}
    clusters_config = {
        'cluster1': ('columna1', 'columna2'),  # Clusterización basada en las columnas 1 y 2
        'cluster2': ('columna3',)              # Clusterización basada en la columna 3
    }
    n_clusters = 3  # Cantidad de clústeres (seleccione el valor óptimo)
    features_transformed = cluster_data(features_transformed, clusters_config, n_clusters)
    
    # Visualización de los clústeres (ejemplo para el primer conjunto de clústeres)
    if 'cluster1' in features_transformed.columns:
        cluster_columns = list(clusters_config['cluster1'])
        if len(cluster_columns) >= 2:
            plt.figure(figsize=(8, 6))
            plt.scatter(
                features_transformed[cluster_columns[0]], 
                features_transformed[cluster_columns[1]], 
                c=features_transformed['cluster1'], 
                cmap='viridis'
            )
            plt.xlabel(cluster_columns[0])
            plt.ylabel(cluster_columns[1])
            plt.title('Результаты кластеризации (Cluster1)')
            plt.colorbar(label='Номер кластера')
            plt.show()
        else:
            print("Недостаточно признаков для визуализации кластеров cluster1 на плоскости.")
    else:
        print("Недостаточно числовых признаков для визуализации кластеров на плоскости.")
else:
    print("Сначала выполните этап 5 (Преобразование данных).")