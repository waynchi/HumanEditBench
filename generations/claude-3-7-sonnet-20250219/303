import { useState, useEffect, useCallback, useMemo } from 'react';

function useDashboardData(user) {
  // Initialize with previous year as start date
  const getDefaultStartDate = () => {
    const date = new Date();
    date.setFullYear(date.getFullYear() - 1);
    return date;
  };

  const [data, setData] = useState({
    customerData: { summary: null, loading: false, customers: [] },
    healthData: [],
    websiteStatus: { checking: false },
    stripeApiKey: "",
    dateRange: {
      startDate: getDefaultStartDate(),
      endDate: new Date(),
    },
    error: null
  });

  const calculateHealthData = useCallback(() => {
    const { summary } = data.customerData;
    const { startDate, endDate } = data.dateRange;
    
    if (!summary?.customers?.length) return [];
    
    // Generate array of month/year pairs within date range
    const months = [];
    const currentDate = new Date(startDate);
    const monthCache = {};
    
    while (currentDate <= endDate) {
      const month = currentDate.toLocaleString("default", { month: "short" });
      const year = currentDate.getFullYear();
      months.push({ month, year });
      
      // Cache month date for performance
      const key = `${month}-${year}`;
      monthCache[key] = new Date(currentDate).getMonth();
      
      currentDate.setMonth(currentDate.getMonth() + 1);
    }
    
    // Map of customer status counts by month
    const customersGrouped = {};
    
    // Pre-process customers once
    summary.customers.forEach(customer => {
      const customerDate = new Date(customer.created);
      const customerMonth = customerDate.toLocaleString("default", { month: "short" });
      const customerYear = customerDate.getFullYear();
      const key = `${customerMonth}-${customerYear}`;
      
      // Check if the customer date is within our range
      if (monthCache[key] !== undefined && customerDate.getFullYear() === customerYear) {
        if (!customersGrouped[key]) {
          customersGrouped[key] = { active: 0, churned: 0, delinquent: 0 };
        }
        
        switch (customer.status) {
          case "active": customersGrouped[key].active++; break;
          case "churned": customersGrouped[key].churned++; break;
          case "delinquent": customersGrouped[key].critical++; break;
          default: break;
        }
      }
    });
    
    // Generate final health data array
    return months.map(({ month, year }) => {
      const monthYear = `${month} ${year}`;
      const key = `${month}-${year}`;
      const stats = customersGrouped[key] || { active: 0, churned: 0, delinquent: 0 };
      
      return {
        monthYear,
        healthy: stats.active || 0,
        warning: stats.churned || 0,
        critical: stats.delinquent || 0,
      };
    });
  }, [data.customerData.summary, data.dateRange]);

  const loadSettings = useCallback(async () => {
    if (!user?.id || data.stripeApiKey) return;
    
    try {
      const response = await fetch("/api/db/churnary_user_settings", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          query: "SELECT stripe_api_key FROM `user_settings` WHERE `user_id` = ? LIMIT 1",
          values: [user.id],
        }),
      });
      
      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
      const settings = await response.json();
      
      setData(prev => ({ 
        ...prev, 
        stripeApiKey: settings[0]?.stripe_api_key || "" 
      }));
    } catch (error) {
      console.error("Failed to load settings:", error);
      setData(prev => ({ ...prev, error: "Failed to load user settings" }));
    }
  }, [user?.id, data.stripeApiKey]);

  const loadData = useCallback(async () => {
    if (!user?.id || !data.stripeApiKey) return;
    
    // Set loading state only once
    setData(prev => ({ 
      ...prev, 
      customerData: { ...prev.customerData, loading: true },
      error: null 
    }));

    try {
      const response = await fetch("/api/stripe-customer-summary", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ userId: user.id }),
      });

      if (!response.ok) throw new Error("Failed to fetch customer summary");
      const summary = await response.json();
      if (summary.error) throw new Error(summary.error);

      // Update data in a single state update
      setData(prev => {
        const newState = {
          ...prev,
          customerData: { 
            summary, 
            loading: false,
            customers: summary.customers 
          }
        };
        // Calculate health data after updating customer data
        newState.healthData = calculateHealthData();
        return newState;
      });
    } catch (error) {
      console.error("Failed to load data:", error);
      setData(prev => ({
        ...prev,
        customerData: { ...prev.customerData, loading: false },
        error: error.message
      }));
    }
  }, [user?.id, data.stripeApiKey, calculateHealthData]);

  const actions = useMemo(() => ({
    checkWebsites: async () => {
      const { customers } = data.customerData;
      if (!customers?.length) return;
      
      setData(prev => ({ 
        ...prev, 
        websiteStatus: { checking: true },
        error: null 
      }));

      try {
        // Process in batches to avoid too many concurrent requests
        const batchSize = 5;
        const updatedCustomers = [];
        
        for (let i = 0; i < customers.length; i += batchSize) {
          const batch = customers.slice(i, i + batchSize);
          const batchResults = await Promise.all(
            batch.map(async (customer) => {
              const response = await fetch("/api/website-churn-detector", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ websiteUrl: customer.website }),
              });
              const health = await response.json();
              return { ...customer, health, status: health.status === "active" ? "active" : "churned" };
            })
          );
          updatedCustomers.push(...batchResults);
        }

        // Count statuses once
        const active = updatedCustomers.filter(c => c.status === "active").length;
        const churned = updatedCustomers.filter(c => c.status === "churned").length;

        const summary = {
          ...data.customerData.summary,
          customers: updatedCustomers,
          active,
          churned,
        };

        setData(prev => {
          const newState = {
            ...prev,
            customerData: { ...prev.customerData, summary },
            websiteStatus: { checking: false }
          };
          // Calculate health data after updating customer data
          newState.healthData = calculateHealthData();
          return newState;
        });
      } catch (err) {
        console.error("Failed to check websites:", err);
        setData(prev => ({
          ...prev,
          websiteStatus: { checking: false },
          error: "Failed to check websites. Please try again."
        }));
      }
    },
    
    setDateRange: (range) => {
      if (range.startDate > range.endDate) {
        setData(prev => ({ ...prev, error: "Start date cannot be after end date" }));
        return;
      }
      setData(prev => {
        const newState = { ...prev, dateRange: range, error: null };
        if (prev.customerData.summary?.customers) {
          newState.healthData = calculateHealthData();
        }
        return newState;
      });
    },

    clearError: () => {
      setData(prev => ({ ...prev, error: null }));
    }
  }), [data.customerData, calculateHealthData]);

  // Load settings only when user changes
  useEffect(() => {
    if (user?.id) loadSettings();
  }, [loadSettings, user?.id]);

  // Load data when stripe API key is available
  useEffect(() => {
    if (user?.id && data.stripeApiKey) loadData();
  }, [loadData, user?.id, data.stripeApiKey]);

  return { 
    data, 
    actions,
    isLoading: data.customerData.loading || data.websiteStatus.checking 
  };
}

export default useDashboardData;