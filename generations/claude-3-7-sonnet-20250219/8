def is_sum_of_four_squares(n):
    """
    Finds a representation of n as the sum of four squares.
    Returns a tuple (a, b, c, d) such that a^2 + b^2 + c^2 + d^2 = n,
    or None if no such representation exists.
    """
    if n < 0:
        return False
    
    # For efficiency, we only need to check up to the square root of n
    limit = int(n**0.5) + 1
    
    for a in range(1, limit):  # Start from 1 to ensure non-zero
        a_squared = a**2
        if a_squared > n:
            break
        
        for b in range(1, limit):  # Start from 1 to ensure non-zero
            ab_squared = a_squared + b**2
            if ab_squared > n:
                break
            
            for c in range(1, limit):  # Start from 1 to ensure non-zero
                abc_squared = ab_squared + c**2
                if abc_squared > n:
                    break
                
                # Calculate the required value for d^2
                d_squared = n - abc_squared
                
                # Check if d_squared is a perfect square and d > 0
                d = int(d_squared**0.5)
                if d > 0 and d*d == d_squared:
                    return a, b, c, d
    
    return None

def find_four_squares_sums(limit):
    """
    Finds numbers up to a limit that can be expressed as the sum of four squares
    without any of the squares being zero.
    """
    results = []
    for n in range(1, limit + 1):
        result = is_sum_of_four_squares(n)
        if result:
            results.append(n)
    return results

# Example usage:
limit = int(input("Digite o limite superior: "))
sums_found = find_four_squares_sums(limit)
print("Números que podem ser expressos como a soma de quatro quadrados não nulos:")
for num in sums_found:
    result = is_sum_of_four_squares(num)
    a, b, c, d = result
    print(f"{num} = {a}^2 + {b}^2 + {c}^2 + {d}^2")