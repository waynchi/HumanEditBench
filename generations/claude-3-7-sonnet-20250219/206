import { useState, useEffect, useCallback, useMemo } from 'react';

function useDashboardData(user) {
  const [data, setData] = useState({
    customerData: { summary: null, loading: false, customers: [] },
    healthData: [],
    websiteStatus: { checking: false },
    stripeApiKey: "",
    dateRange: {
      startDate: (() => {
        const date = new Date();
        date.setFullYear(date.getFullYear() - 1);
        return new Date(date);
      })(),
      endDate: new Date(),
    },
    error: null
  });

  // 优化日期范围内月份生成
  const getMonthsInRange = useCallback((startDate, endDate) => {
    const months = [];
    const currentDate = new Date(startDate);
    
    while (currentDate <= endDate) {
      months.push({
        month: currentDate.toLocaleString("default", { month: "short" }),
        year: currentDate.getFullYear(),
        date: new Date(currentDate)
      });
      currentDate.setMonth(currentDate.getMonth() + 1);
    }
    return months;
  }, []);

  // 优化健康数据计算
  const calculateHealthData = useCallback(() => {
    const { customers } = data.customerData.summary || { customers: null };
    if (!customers?.length) return [];
    
    const months = getMonthsInRange(data.dateRange.startDate, data.dateRange.endDate);
    const customersByMonth = new Map();
    
    // 预处理客户数据，按月份分组
    customers.forEach(customer => {
      const createdDate = new Date(customer.created);
      const monthKey = `${createdDate.getMonth()}-${createdDate.getFullYear()}`;
      
      if (!customersByMonth.has(monthKey)) {
        customersByMonth.set(monthKey, []);
      }
      customersByMonth.get(monthKey).push(customer);
    });
    
    return months.map(({ month, year, date }) => {
      const monthYear = `${month} ${year}`;
      const monthKey = `${date.getMonth()}-${year}`;
      const monthCustomers = customersByMonth.get(monthKey) || [];
      
      const statusCounts = monthCustomers.reduce((acc, c) => {
        acc[c.status] = (acc[c.status] || 0) + 1;
        return acc;
      }, {});
      
      return {
        monthYear,
        healthy: statusCounts.active || 0,
        warning: statusCounts.churned || 0,
        critical: statusCounts.delinquent || 0,
      };
    });
  }, [data.customerData.summary, data.dateRange, getMonthsInRange]);

  // 优化设置加载逻辑
  const loadSettings = useCallback(async () => {
    if (!user?.id || data.stripeApiKey) return;
    
    try {
      const response = await fetch("/api/db/churnary_user_settings", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          query: "SELECT stripe_api_key FROM `user_settings` WHERE `user_id` = ? LIMIT 1",
          values: [user.id],
        }),
      });
      
      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
      const settings = await response.json();
      
      setData(prev => ({ 
        ...prev, 
        stripeApiKey: settings[0]?.stripe_api_key || "" 
      }));
    } catch (error) {
      console.error("Settings load error:", error);
      setData(prev => ({ ...prev, error: "Failed to load user settings" }));
    }
  }, [user?.id, data.stripeApiKey]);

  // 优化数据加载逻辑
  const loadData = useCallback(async () => {
    if (!user?.id || !data.stripeApiKey) return;

    setData(prev => ({ 
      ...prev, 
      customerData: { ...prev.customerData, loading: true },
      error: null 
    }));

    try {
      const response = await fetch("/api/stripe-customer-summary", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ userId: user.id }),
      });

      if (!response.ok) throw new Error(`Failed to fetch customer summary: ${response.status}`);
      
      const summary = await response.json();
      if (summary.error) throw new Error(summary.error);

      setData(prev => {
        const updatedData = {
          ...prev,
          customerData: { 
            summary, 
            loading: false,
            customers: summary.customers || [] 
          }
        };
        
        // 计算健康数据，但确保在state更新后才进行
        return {
          ...updatedData,
          healthData: calculateHealthData()
        };
      });
    } catch (error) {
      console.error("Data load error:", error);
      setData(prev => ({
        ...prev,
        customerData: { ...prev.customerData, loading: false },
        error: error.message
      }));
    }
  }, [user?.id, data.stripeApiKey, calculateHealthData]);

  // 优化网站检查和操作
  const actions = useMemo(() => ({
    checkWebsites: async () => {
      const { customers } = data.customerData;
      if (!customers?.length) return;
      
      setData(prev => ({ 
        ...prev, 
        websiteStatus: { checking: true },
        error: null 
      }));

      try {
        // 批量处理，每批10个网站
        const batchSize = 10;
        const updatedCustomers = [];
        
        for (let i = 0; i < customers.length; i += batchSize) {
          const batch = customers.slice(i, i + batchSize);
          const batchResults = await Promise.all(
            batch.map(async (customer) => {
              try {
                const response = await fetch("/api/website-churn-detector", {
                  method: "POST",
                  headers: { "Content-Type": "application/json" },
                  body: JSON.stringify({ websiteUrl: customer.website }),
                  timeout: 10000 // 添加超时
                });
                
                const health = await response.json();
                return { 
                  ...customer, 
                  health, 
                  status: health.status === "active" ? "active" : "churned" 
                };
              } catch (err) {
                // 单个网站检查失败不应影响整体
                console.warn(`Failed to check website ${customer.website}:`, err);
                return { ...customer, health: { error: err.message } };
              }
            })
          );
          
          updatedCustomers.push(...batchResults);
        }

        const summary = {
          ...data.customerData.summary,
          customers: updatedCustomers,
          active: updatedCustomers.filter(c => c.status === "active").length,
          churned: updatedCustomers.filter(c => c.status === "churned").length,
        };

        setData(prev => {
          const updatedData = {
            ...prev,
            customerData: { ...prev.customerData, summary, customers: updatedCustomers },
            websiteStatus: { checking: false }
          };
          
          return {
            ...updatedData,
            healthData: calculateHealthData()
          };
        });
      } catch (err) {
        console.error("Website check error:", err);
        setData(prev => ({
          ...prev,
          websiteStatus: { checking: false },
          error: "Failed to check websites. Please try again."
        }));
      }
    },
    
    setDateRange: (range) => {
      if (range.startDate > range.endDate) {
        setData(prev => ({ ...prev, error: "Start date cannot be after end date" }));
        return;
      }
      
      setData(prev => {
        const updatedData = { ...prev, dateRange: range, error: null };
        // 如果有客户数据，立即重新计算健康数据
        if (prev.customerData.summary?.customers?.length) {
          updatedData.healthData = calculateHealthData();
        }
        return updatedData;
      });
    },

    clearError: () => {
      setData(prev => ({ ...prev, error: null }));
    }
  }), [data.customerData, calculateHealthData]);

  // 优化副作用
  useEffect(() => {
    loadSettings();
  }, [loadSettings]);

  useEffect(() => {
    if (user?.id && data.stripeApiKey) {
      loadData();
    }
  }, [loadData, user?.id, data.stripeApiKey]);

  return { 
    data, 
    actions,
    isLoading: data.customerData.loading || data.websiteStatus.checking 
  };
}

export default useDashboardData;