from langchain_ollama import ChatOllama
from langchain_core.prompts.chat import ChatPromptTemplate
import json

def generate_response(
    shap_values_path, 
    system_prompt_path, 
    model_name="llama3.2", 
    base_url="http://localhost:11434",
    use_alternate_model=False
):
    # Initialize the ChatOllama model
    if not use_alternate_model:
        chat_model = ChatOllama(model=model_name, base_url=base_url)
    else:
        chat_model = ChatOllama(
            model="llama3.1:70b",
            base_url="http://ada-open-webui.serveo.net/ollama",
            client_kwargs={
                "headers": {"authorization": "Bearer <OCULTO>"}
            },
        )

    # Load SHAP values from JSON file
    with open(shap_values_path, "r") as file:
        shap_values_json = json.load(file).get("shap_values")

    # Load system prompt from file
    with open(system_prompt_path, "r") as file:
        sys_prompt = file.read().strip()

    # Prepare the messages
    prompt = ChatPromptTemplate(
        [
            ("system", sys_prompt),
            ("human", "{user_input}"),
        ]
    )

    # Generate the response
    user_input = json.dumps(shap_values_json)  # Prepare user input

    chain = prompt | chat_model

    # Return the response
    response = chain.invoke({"user_input": user_input})
    return response.content

# Example usage
if __name__ == "__main__":
    result = generate_response(
        shap_values_path="Vuori_Final_Approval_2024_09_24.json",
        system_prompt_path="system.prompt"
    )
    print(result)