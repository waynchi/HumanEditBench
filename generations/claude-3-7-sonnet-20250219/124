import torch.nn as nn

class SimpleConvNet1(nn.Module):
    def __init__(self, input_size=(3, 32, 32)):  # Accept input_size with default value
        super().__init__()

        self.conv1 = nn.Sequential(
            nn.Conv2d(3, 32, 3),
            nn.ReLU(),
            nn.MaxPool2d(2)
        )

        self.conv2 = nn.Sequential(
            nn.Conv2d(32, 64, 3),
            nn.ReLU(),
            nn.MaxPool2d(2)
        )

        self.flatten = nn.Flatten()
        
        # Calculate the flattened size dynamically
        # For input of size (3, 32, 32):
        # After conv1: (32, 15, 15)
        # After conv2: (64, 6, 6)
        # Flattened size: 64 * 6 * 6 = 2304
        c, h, w = input_size
        h_out = (h - 2) // 2  # After first conv and pooling
        h_out = (h_out - 2) // 2  # After second conv and pooling
        w_out = (w - 2) // 2  # After first conv and pooling
        w_out = (w_out - 2) // 2  # After second conv and pooling
        flattened_size = 64 * h_out * w_out
        
        self.fc1 = nn.Sequential(
            nn.Linear(flattened_size, 512),
            nn.ReLU(),
            nn.Linear(512, 3)
        )

    def forward(self, x):
        x = self.conv1(x)
        x = self.conv2(x)
        x = self.flatten(x)
        x = self.fc1(x)
        return x