from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import numpy as np
import matplotlib.pyplot as plt

def cluster_data(features_transformed, cluster_features_dict, n_clusters=2, clustering_method='kmeans'):
    """Performs data clustering independently for specified sets of columns.

Args:
    features_transformed (pandas.DataFrame): Transformed DataFrame with parameters.
    cluster_features_dict (dict): Dictionary mapping cluster column names to tuple/list of features to use for clustering.
                                Example: {'Cluster1': ('column1', 'column2'), 'Cluster2': ('column3',)}
    n_clusters (int): Number of clusters.
    clustering_method (str): Clustering method ('kmeans').

Returns:
    pandas.DataFrame: DataFrame with added columns of cluster labels."""
    if features_transformed is None:
        print("Сначала выполните преобразование данных (этап 5).")
        return None

    features_result = features_transformed.copy()

    if clustering_method != 'kmeans':
        print("Неподдерживаемый метод кластеризации.")
        return None
    
    for cluster_name, feature_columns in cluster_features_dict.items():
        # Extract features for clustering
        if not all(col in features_transformed.columns for col in feature_columns):
            print(f"Некоторые столбцы для кластеризации '{cluster_name}' отсутствуют в данных.")
            continue
            
        features_for_clustering = features_transformed[list(feature_columns)].copy()
        
        # Perform clustering
        model = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
        cluster_labels = model.fit_predict(features_for_clustering)
        
        # Evaluation of clustering quality (e.g., using the silhouette coefficient)
        if len(np.unique(cluster_labels)) > 1: # Check for the case when all points are assigned to one cluster
            silhouette_avg = silhouette_score(features_for_clustering, cluster_labels)
            print(f"Коэффициент силуэта для '{cluster_name}' ({n_clusters} кластеров): {silhouette_avg:.4f}")
        else:
            print(f"Невозможно рассчитать коэффициент силуэта для '{cluster_name}' ({n_clusters} кластера - все точки в одном кластере).")

        # Add cluster labels to the result DataFrame
        features_result[cluster_name] = cluster_labels
        print(f"Кластеризация для '{cluster_name}' выполнена. Метки кластеров добавлены в столбец '{cluster_name}'.")

    return features_result

# Clustering execution (after step 5 and before step 6)
if 'features_transformed' in locals() and features_transformed is not None:
    # Dictionary that specifies which columns to use for each clustering
    cluster_features_dict = {
        'cluster1': ('column1', 'column2'),  # Example: first cluster based on two columns
        'cluster2': ('column3',)             # Example: second cluster based on one column
    }
    
    n_clusters = 3  # Number of clusters (select the optimal value)
    features_transformed = cluster_data(features_transformed, cluster_features_dict, n_clusters)
    
    # Visualization of clusters (example for the case when there are 2 numerical features)
    numerical_features = features_transformed.select_dtypes(include=np.number)
    if numerical_features.shape[1] >= 2:
        # For each cluster column, create a visualization if possible
        for cluster_name in cluster_features_dict.keys():
            if cluster_name in features_transformed.columns:
                feature_cols = cluster_features_dict[cluster_name]
                if len(feature_cols) >= 2:  # We need at least 2 features for 2D visualization
                    plt.figure(figsize=(8, 6))
                    plt.scatter(
                        features_transformed[feature_cols[0]], 
                        features_transformed[feature_cols[1]], 
                        c=features_transformed[cluster_name], 
                        cmap='viridis'
                    )
                    plt.xlabel(feature_cols[0])
                    plt.ylabel(feature_cols[1])
                    plt.title(f'Результаты кластеризации: {cluster_name}')
                    plt.colorbar(label='Номер кластера')
                    plt.show()
    else:
        print("Недостаточно числовых признаков для визуализации кластеров на плоскости.")
else:
    print("Сначала выполните этап 5 (Преобразование данных).")