import pandas as pd
import numpy as np
import copy

class Stock:
	def __init__(self, filename, name):
		self.filename = filename
		try:
			self.data = pd.read_csv(self.filename,index_col=0,parse_dates=True)
		except Exception as e:
			print(f"Unable to read file {self.filename}")
			raise e
		self.data.index.name = 'time'
		self.name = name
		self.attrs = {}

	def get_attr(self, key):
		try:
			return self.attrs[key]
		except KeyError:
			return None

	def set_attr(self, key, value):
		self.attrs[key] = value

	def get(self, i):
		return self.data.iloc[i]

	def get_range(self, s, t):
		return self.data.iloc[s:t+1]

	def __len__(self):
		return len(self.data)

class Transaction:
	def __init__(self, num, price):
		self.num = num
		self.price = price
		self.date = None

	def set_date(self, date):
		self.date = date

class Trade:
	def __init__(self, stock, long=True, num=0, price=0.0):
		self.stock = stock
		self.num = 0
		self.profit = 0
		self.closed = False
		self.long = long

		self.opens = []
		self.closes = []

		if num != 0:
			self.open(num, price)

	def close(self, num, price):
		if num > self.num:
			raise ValueError(f"ERR: Trying to close {num} of {self.stock.name} but only {self.num} available")
		self.num -= num
		self.closes.append(Transaction(num, price))

		if self.long:
			self.profit = self.get_num_closed() * (self.get_avg_close_price() - self.get_avg_open_price())
		else:
			self.profit = self.get_num_closed() * (self.get_avg_open_price() - self.get_avg_close_price())

		if self.num == 0:
			self.closed = True

	def open(self, num, price):
		self.num += num

		self.opens.append(Transaction(num, price))

	def get_equity(self, i):
		current_price = self.stock.get(i)["close"]
		if self.long:
			return self.num * current_price
		else:
			# Para operaciones en corto, el capital podría reflejar el costo potencial para cerrar la posición
			return self.num * (self.get_avg_open_price() - current_price)

	def set_date(self, date):
		[transaction.set_date(date) for transaction in self.opens if transaction.date is None]
		[transaction.set_date(date) for transaction in self.closes if transaction.date is None]

	def get_avg_open_price(self):
		total_price = sum(transaction.price * transaction.num for transaction in self.opens)
		total_num = sum(transaction.num for transaction in self.opens)
		return total_price / total_num if total_num else 0
	
	def get_avg_close_price(self):
		total_price = sum(transaction.price * transaction.num for transaction in self.closes)
		total_num = sum(transaction.num for transaction in self.closes)
		return total_price / total_num if total_num else 0

	def get_num_opened(self):
		return sum(transaction.num for transaction in self.opens)

	def get_num_closed(self):
		return sum(transaction.num for transaction in self.closes)

class Strategy:
	def __init__(self):
		self.stocks = []
		self.starting_money = 100000.0
		self.money = self.starting_money
		self.closed_trades = []
		self.open_trades = []
		self.attrs = {}
		self.analyzers = []

	def get_attr(self, key):
		return self.attrs[key]

	def set_attr(self, key, value):
		self.attrs[key] = value

	def add_analyzer(self, analyzer):
		analyzer.strategy = self
		self.analyzers.append(analyzer)

	def has_open_trade(self, stock):
		for trade in self.open_trades:
			if stock is trade.stock:
				return True
		return False

	def get_open_trade(self, stock):
		for trade in self.open_trades:
			if trade.stock is stock:
				return trade
		raise ValueError("No open trade on stock "+str(stock.name))

	def open_trade(self, stock, num, price):
		if self.money < num*price:
			raise ValueError("Insufficient funds: have $"+str(self.money)+" available and trying to open "+str(num)+" of "+str(stock.name)+" at $"+str(price)+" on "+str(stock.get(self.get_attr("i")).name))

		if self.has_open_trade(stock):
			trade = self.get_open_trade(stock)
			trade.open(num, price)
			trade.set_date(stock.get(self.get_attr("i")).name)
		else:
			self.open_trades.append(Trade(stock, True, num, price))
			self.open_trades[-1].set_date(stock.get(self.get_attr("i")).name)

		self.money -= num*price

	def sell(self, stock, num, price):
		if self.has_open_trade(stock):
			trade = self.get_open_trade(stock)
			trade.close(num, price)
			if trade.closed:
				self.open_trades.remove(trade)
				self.closed_trades.append(trade)
			trade.set_date(stock.get(self.get_attr("i")).name)
		else:
			raise ValueError("No position to close in "+str(stock.name))

		self.money += num*price

	def get_equity(self, i):
		res = self.money
		for trade in self.open_trades:
			res += trade.get_equity(i)
		return res

	def next(self, i):
		pass

class Computer:
	def __init__(self, simulations=10, variation=0.01):
		self.stocks = []
		self.strategies = []
		self.simulations = simulations  # Número de simulaciones por vela
		self.variation = variation      # Porcentaje de variación en las velas

	def add_stock(self, stock):
		if not isinstance(stock, Stock):
			exit("ERR: called 'add_stock' on type: "+str(type(stock)))
		self.stocks.append(stock)
	
	def add_strategy(self, strategy):
		if not isinstance(strategy, Strategy):
			exit("ERR: called 'add_strategy' on type: "+str(type(strategy)))
		self.strategies.append(strategy)

	def generate_candle_variations(self, candle):
		"""Genera variaciones aleatorias para una vela"""
		varied_candle = candle.copy()
		
		# Obtener valores originales
		open_price = candle['open']
		high_price = candle['high']
		low_price = candle['low']
		close_price = candle['close']
		volume = candle['volume'] if 'volume' in candle else 0
		
		# Generar variaciones aleatorias manteniendo la relación entre valores
		max_variation = self.variation
		
		# Añadir variación al alto (siempre debe ser el máximo)
		high_variation = 1.0 + np.random.uniform(-max_variation, max_variation)
		varied_candle['high'] = high_price * high_variation
		
		# Añadir variación al bajo (siempre debe ser el mínimo)
		low_variation = 1.0 + np.random.uniform(-max_variation, max_variation)
		varied_candle['low'] = low_price * low_variation
		
		# Asegurar que high sigue siendo mayor que low
		varied_candle['high'] = max(varied_candle['high'], varied_candle['low'] * 1.001)
		
		# Ajustar el cierre dentro del rango de alto y bajo
		close_variation = 1.0 + np.random.uniform(-max_variation, max_variation)
		varied_candle['close'] = close_price * close_variation
		varied_candle['close'] = min(varied_candle['close'], varied_candle['high'])
		varied_candle['close'] = max(varied_candle['close'], varied_candle['low'])
		
		# Añadir variación al volumen si existe
		if 'volume' in candle:
			volume_variation = 1.0 + np.random.uniform(-max_variation, max_variation)
			varied_candle['volume'] = max(0, volume * volume_variation)
		
		return varied_candle

	def run(self):
		# poner acciones en estrategias
		for strategy in self.strategies:
			j = 1
			for stock in self.stocks:
				strategy.stocks = [stock]
				print(f"stock #{j}/{len(self.stocks)}")
				j += 1

				# guardar el dataframe original para restaurarlo después
				original_data = stock.data.copy()

				# ejecutar todos los días en las estrategias
				for i in range(len(stock)):
					strategy.set_attr("i", i)
					
					# Obtener la vela original
					original_candle = stock.get(i).copy()
					
					# Realizar n simulaciones con variaciones
					for sim in range(self.simulations):
						# Generar una variación y actualizar el dataframe
						varied_candle = self.generate_candle_variations(original_candle)
						stock.data.iloc[i] = varied_candle
						
						# Ejecutar la estrategia con la vela variada
						strategy.next(i)
						
						# Ejecutar los analizadores
						for analyzer in strategy.analyzers:
							analyzer.next(i)
					
					# Restaurar la vela original después de todas las simulaciones
					stock.data.iloc[i] = original_candle

					# cerrar cualquier operación abierta al final del último día
					if i == len(stock)-1:
						for strat in self.strategies:
							while len(strat.open_trades) > 0:
								trade = strat.open_trades[0]
								strat.sell(trade.stock, trade.num, trade.stock.get(i)["close"])
				
				# Restaurar el dataframe original
				stock.data = original_data

		# eliminar estrategias
		for strategy in self.strategies:
			strategy.stocks = []