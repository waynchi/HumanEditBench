import pandas as pd
import numpy as np
import copy

class Stock:
	def __init__(self, filename, name):
		self.filename = filename
		try:
			self.data = pd.read_csv(self.filename,index_col=0,parse_dates=True)
		except Exception as e:
			print(f"Unable to read file {self.filename}")
			raise e
		self.data.index.name = 'time'
		self.name = name
		self.attrs = {}

	def get_attr(self, key):
		try:
			return self.attrs[key]
		except KeyError:
			return None

	def set_attr(self, key, value):
		self.attrs[key] = value

	def get(self, i):
		return self.data.iloc[i]

	def get_range(self, s, t):
		return self.data.iloc[s:t+1]

	def __len__(self):
		return len(self.data)

class Transaction:
	def __init__(self, num, price):
		self.num = num
		self.price = price
		self.date = None

	def set_date(self, date):
		self.date = date

class Trade:
	def __init__(self, stock, long=True, num=0, price=0.0):
		self.stock = stock
		self.num = 0
		self.profit = 0
		self.closed = False
		self.long = long

		self.opens = []
		self.closes = []

		if num != 0:
			self.open(num, price)

	def close(self, num, price):
		if num > self.num:
			raise ValueError(f"ERR: Trying to close {num} of {self.stock.name} but only {self.num} available")
		self.num -= num
		self.closes.append(Transaction(num, price))

		if self.long:
			self.profit = self.get_num_closed() * (self.get_avg_close_price() - self.get_avg_open_price())
		else:
			self.profit = self.get_num_closed() * (self.get_avg_open_price() - self.get_avg_close_price())

		if self.num == 0:
			self.closed = True

	def open(self, num, price):
		self.num += num

		self.opens.append(Transaction(num, price))

	def get_equity(self, i):
		current_price = self.stock.get(i)["close"]
		if self.long:
			return self.num * current_price
		else:
			# Dla krótkich transakcji, kapitał może odzwierciedlać potencjalny koszt zamknięcia pozycji
			return self.num * (self.get_avg_open_price() - current_price)

	def set_date(self, date):
		[transaction.set_date(date) for transaction in self.opens if transaction.date is None]
		[transaction.set_date(date) for transaction in self.closes if transaction.date is None]

	def get_avg_open_price(self):
		total_price = sum(transaction.price * transaction.num for transaction in self.opens)
		total_num = sum(transaction.num for transaction in self.opens)
		return total_price / total_num if total_num else 0
	
	def get_avg_close_price(self):
		total_price = sum(transaction.price * transaction.num for transaction in self.closes)
		total_num = sum(transaction.num for transaction in self.closes)
		return total_price / total_num if total_num else 0

	def get_num_opened(self):
		return sum(transaction.num for transaction in self.opens)

	def get_num_closed(self):
		return sum(transaction.num for transaction in self.closes)

class Strategy:
	def __init__(self):
		self.stocks = []
		self.starting_money = 100000.0
		self.money = self.starting_money
		self.closed_trades = []
		self.open_trades = []
		self.attrs = {}
		self.analyzers = []

	def get_attr(self, key):
		return self.attrs[key]

	def set_attr(self, key, value):
		self.attrs[key] = value

	def add_analyzer(self, analyzer):
		analyzer.strategy = self
		self.analyzers.append(analyzer)

	def has_open_trade(self, stock):
		for trade in self.open_trades:
			if stock is trade.stock:
				return True
		return False

	def get_open_trade(self, stock):
		for trade in self.open_trades:
			if trade.stock is stock:
				return trade
		raise ValueError("No open trade on stock "+str(stock.name))

	def open_trade(self, stock, num, price):
		if self.money < num*price:
			raise ValueError("Insufficient funds: have $"+str(self.money)+" available and trying to open "+str(num)+" of "+str(stock.name)+" at $"+str(price)+" on "+str(stock.get(self.get_attr("i")).name))

		if self.has_open_trade(stock):
			trade = self.get_open_trade(stock)
			trade.open(num, price)
			trade.set_date(stock.get(self.get_attr("i")).name)
		else:
			self.open_trades.append(Trade(stock, True, num, price))
			self.open_trades[-1].set_date(stock.get(self.get_attr("i")).name)

		self.money -= num*price

	def sell(self, stock, num, price):
		if self.has_open_trade(stock):
			trade = self.get_open_trade(stock)
			trade.close(num, price)
			if trade.closed:
				self.open_trades.remove(trade)
				self.closed_trades.append(trade)
			trade.set_date(stock.get(self.get_attr("i")).name)
		else:
			raise ValueError("No position to close in "+str(stock.name))

		self.money += num*price

	def get_equity(self, i):
		res = self.money
		for trade in self.open_trades:
			res += trade.get_equity(i)
		return res

	def next(self, i):
		pass

class Computer:
	def __init__(self, n_variations=10, variation_percent=0.01):
		self.stocks = []
		self.strategies = []
		self.n_variations = n_variations
		self.variation_percent = variation_percent  # Wartość procentowa wariacji (np. 0.01 = 1%)

	def add_stock(self, stock):
		if not isinstance(stock, Stock):
			exit("ERR: called 'add_stock' on type: "+str(type(stock)))
		self.stocks.append(stock)
	
	def add_strategy(self, strategy):
		if not isinstance(strategy, Strategy):
			exit("ERR: called 'add_strategy' on type: "+str(type(strategy)))
		self.strategies.append(strategy)

	def _generate_variation(self, value):
		"""Generuje losową wariację wartości w zakresie ±variation_percent"""
		variation_range = value * self.variation_percent
		return value + np.random.uniform(-variation_range, variation_range)

	def _vary_candle(self, stock, i):
		"""Modyfikuje dane świecy o indeksie i z zachowaniem logiki świecowej"""
		original = stock.data.iloc[i].copy()
		
		# Generowanie wariacji z zachowaniem integralności świecy
		new_high = self._generate_variation(original['high'])
		new_low = self._generate_variation(original['low'])
		new_close = self._generate_variation(original['close'])
		new_volume = max(1, int(self._generate_variation(original['volume'])))  # Volume zawsze > 0
		
		# Zachowanie integralności świecy (high >= low, itp.)
		new_high = max(new_high, new_low, new_close)
		new_low = min(new_high, new_low, new_close)
		
		# Zastosowanie wariacji
		stock.data.at[stock.data.index[i], 'high'] = new_high
		stock.data.at[stock.data.index[i], 'low'] = new_low
		stock.data.at[stock.data.index[i], 'close'] = new_close
		stock.data.at[stock.data.index[i], 'volume'] = new_volume
		
		return original

	def _restore_candle(self, stock, i, original_values):
		"""Przywraca oryginalne wartości świecy"""
		for column in original_values.index:
			stock.data.at[stock.data.index[i], column] = original_values[column]

	def run(self):
		# umieść akcje w strategiach
		for strategy in self.strategies:
			j = 1
			for stock in self.stocks:
				strategy.stocks = [stock]
				print(f"stock #{j}/{len(self.stocks)}")
				j += 1

				# uruchamiaj codziennie na strategiach
				for i in range(len(stock)):
					strategy.set_attr("i", i)
					
					# Zapisz oryginalne wartości świecy
					original_values = stock.data.iloc[i].copy()
					
					# Uruchom n_variations symulacji z różnymi wariacjami świecy
					for _ in range(self.n_variations):
						# Generuj nową wariację dla aktualnej świecy
						self._vary_candle(stock, i)
						
						# Uruchom strategię z tą wariacją
						strategy.next(i)
						
						# Uruchom analizatory
						for analyzer in strategy.analyzers:
							analyzer.next(i)
					
					# Przywróć oryginalne wartości świecy po wszystkich symulacjach
					self._restore_candle(stock, i, original_values)
					
					# Zamknij wszystkie otwarte transakcje na koniec ostatniego dnia
					if i == len(stock)-1:
						for strat in self.strategies:
							while len(strat.open_trades) > 0:
								trade = strat.open_trades[0]
								strat.sell(trade.stock, trade.num, trade.stock.get(i)["close"])

		# pozbyć się strategii
		for strategy in self.strategies:
			strategy.stocks = []