import { useState, useEffect, useCallback, useMemo } from 'react';

function useDashboardData(user) {
  const [data, setData] = useState({
    customerData: { summary: null, loading: false, customers: [] },
    healthData: [],
    websiteStatus: { checking: false },
    stripeApiKey: "",
    dateRange: {
      startDate: (() => {
        const date = new Date();
        date.setFullYear(date.getFullYear() - 1);
        return date;
      })(),
      endDate: new Date(),
    },
    error: null
  });

  const calculateHealthData = useCallback(() => {
    const { customers } = data.customerData.summary || {};
    if (!customers?.length) return [];
    
    // Create array of months between start and end dates
    const months = [];
    const currentDate = new Date(data.dateRange.startDate);
    const endDate = new Date(data.dateRange.endDate);
    
    // Pre-calculate month objects
    while (currentDate <= endDate) {
      months.push({
        month: currentDate.toLocaleString("default", { month: "short" }),
        year: currentDate.getFullYear(),
        date: new Date(currentDate)
      });
      currentDate.setMonth(currentDate.getMonth() + 1);
    }

    // Create a lookup map for faster customer filtering
    const customersByMonth = {};
    customers.forEach(customer => {
      const created = new Date(customer.created);
      const key = `${created.getFullYear()}-${created.getMonth()}`;
      if (!customersByMonth[key]) {
        customersByMonth[key] = [];
      }
      customersByMonth[key].push(customer);
    });

    return months.map(({ month, year, date }) => {
      const monthYear = `${month} ${year}`;
      const monthKey = `${year}-${date.getMonth()}`;
      const monthCustomers = customersByMonth[monthKey] || [];
      
      // Count customers by status in a single pass
      const counts = { active: 0, churned: 0, delinquent: 0 };
      monthCustomers.forEach(c => {
        counts[c.status] = (counts[c.status] || 0) + 1;
      });

      return {
        monthYear,
        healthy: counts.active,
        warning: counts.churned,
        critical: counts.delinquent,
      };
    });
  }, [data.customerData.summary, data.dateRange]);

  const loadSettings = useCallback(async () => {
    // Combine conditions for early return
    if (!user?.id || data.stripeApiKey || data.customerData.summary) return;

    try {
      const response = await fetch("/api/db/churnary_user_settings", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          query: "SELECT stripe_api_key FROM `user_settings` WHERE `user_id` = ? LIMIT 1",
          values: [user.id],
        }),
      });
      
      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
      const settings = await response.json();
      
      setData(prev => ({ 
        ...prev, 
        stripeApiKey: settings[0]?.stripe_api_key || "" 
      }));
    } catch (error) {
      console.error("Failed to load settings:", error);
      setData(prev => ({ ...prev, error: "Failed to load user settings" }));
    }
  }, [user?.id, data.stripeApiKey, data.customerData.summary]);

  const loadData = useCallback(async () => {
    // Combined conditional check
    if (!user?.id || !data.stripeApiKey) return;

    // Set loading state once
    setData(prev => ({ 
      ...prev, 
      customerData: { ...prev.customerData, loading: true },
      error: null 
    }));

    try {
      const response = await fetch("/api/stripe-customer-summary", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ userId: user.id }),
      });

      if (!response.ok) throw new Error("Failed to fetch customer summary");
      const summary = await response.json();
      if (summary.error) throw new Error(summary.error);

      // Update state in a single operation
      setData(prev => {
        const updatedData = {
          ...prev,
          customerData: { 
            summary, 
            loading: false,
            customers: summary.customers 
          }
        };
        // Calculate health data after state update but before render
        const healthData = calculateHealthData();
        return { ...updatedData, healthData };
      });
    } catch (error) {
      setData(prev => ({
        ...prev,
        customerData: { ...prev.customerData, loading: false },
        error: error.message
      }));
    }
  }, [user?.id, data.stripeApiKey, calculateHealthData]);

  const actions = useMemo(() => ({
    checkWebsites: async () => {
      const { customers } = data.customerData;
      if (!customers?.length || !data.customerData.summary?.customers?.length) return;
      
      setData(prev => ({ 
        ...prev, 
        websiteStatus: { checking: true },
        error: null 
      }));

      try {
        // Process in batches to avoid overwhelming network
        const batchSize = 5;
        const updatedCustomers = [...customers];
        
        for (let i = 0; i < customers.length; i += batchSize) {
          const batch = customers.slice(i, i + batchSize);
          const results = await Promise.all(
            batch.map(async (customer) => {
              const response = await fetch("/api/website-churn-detector", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ websiteUrl: customer.website }),
              });
              const health = await response.json();
              return { 
                ...customer, 
                health, 
                status: health.status === "active" ? "active" : "churned" 
              };
            })
          );
          
          // Update customers as each batch completes
          results.forEach((result, idx) => {
            updatedCustomers[i + idx] = result;
          });
        }

        // Calculate counts in a single pass
        let active = 0, churned = 0;
        updatedCustomers.forEach(c => {
          if (c.status === "active") active++;
          else if (c.status === "churned") churned++;
        });

        const summary = {
          ...data.customerData.summary,
          customers: updatedCustomers,
          active,
          churned,
        };

        setData(prev => {
          const updatedData = {
            ...prev,
            customerData: { ...prev.customerData, summary },
            websiteStatus: { checking: false }
          };
          return { ...updatedData, healthData: calculateHealthData() };
        });
      } catch (err) {
        console.error("Website check error:", err);
        setData(prev => ({
          ...prev,
          websiteStatus: { checking: false },
          error: "Failed to check websites. Please try again."
        }));
      }
    },
    
    setDateRange: (range) => {
      if (range.startDate > range.endDate) {
        setData(prev => ({ ...prev, error: "Start date cannot be after end date" }));
        return;
      }
      
      setData(prev => {
        const updatedData = { ...prev, dateRange: range, error: null };
        // Recalculate health data immediately if we have customer data
        if (prev.customerData.summary?.customers?.length) {
          updatedData.healthData = calculateHealthData();
        }
        return updatedData;
      });
    },

    clearError: () => {
      setData(prev => ({ ...prev, error: null }));
    }
  }), [data.customerData, calculateHealthData]);

  // Combined settings and data loading into a single effect
  useEffect(() => {
    if (user?.id) {
      loadSettings();
      if (data.stripeApiKey) {
        loadData();
      }
    }
  }, [user?.id, data.stripeApiKey, loadSettings, loadData]);

  return { 
    data, 
    actions,
    isLoading: data.customerData.loading || data.websiteStatus.checking 
  };
}

export default useDashboardData;