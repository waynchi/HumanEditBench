import math
import numpy as np

class Value:
    """przechowuje pojedynczą wartość skalarną i jej gradient"""

    def __init__(self, data, _children=(), _op=''):
        self.data = data
        self.grad = 0
        # wewnętrzne zmienne używane do konstrukcji grafu autograd
        self._backward = lambda: None
        self._prev = set(_children)
        self._op = _op # operacja, która wygenerowała ten węzeł, dla graphviz / debugowania / itp.

    def __add__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data + other.data, (self, other), '+')

        def _backward():
            self.grad += out.grad
            other.grad += out.grad
        out._backward = _backward

        return out

    def __mul__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data * other.data, (self, other), '*')

        def _backward():
            self.grad += other.data * out.grad
            other.grad += self.data * out.grad
        out._backward = _backward

        return out

    def __pow__(self, other):
        assert isinstance(other, (int, float)), "only supporting int/float powers for now"
        out = Value(self.data**other, (self,), f'**{other}')

        def _backward():
            self.grad += (other * self.data**(other-1)) * out.grad
        out._backward = _backward

        return out


        print(f'** EXP {self}')
        out = Value(math.exp(self.data), (self,), "e")
        def _backward():
            self.grad += math.exp(self.data) * out.grad
        out._backward = _backward
        
        return out
    
    def log(self):
        out = Value(math.log(self.data), (self,), f'log{self.data}')
        def _backward():
            self.grad += 1 / self.data
        out._backward = _backward       
        
        return out
    
    def relu(self):
        assert isinstance(self.data, (int, float)), "only supporting int/float powers for now"
        out = Value(0 if self.data < 0 else self.data, (self,), 'ReLU')

        def _backward():
            self.grad += (out.data > 0) * out.grad
        out._backward = _backward

        return out
    
    def softmax(self, values):
        """
        Compute softmax values for a list of Value objects.
        
        Args:
            values: List of Value objects
        
        Returns:
            List of Value objects after softmax transformation
        """
        # Konwertuj listę wartości do tablicy numpy
        x_data = np.array([v.data for v in values])
        
        # Oblicz softmax
        e_x = np.exp(x_data - np.max(x_data))
        softmax_data = e_x / e_x.sum(axis=0)
        
        # Utwórz nowe obiekty Value dla wyników softmax
        out_values = [Value(sm, _children=tuple(values), _op='softmax') for sm in softmax_data]
        
        # Zdefiniuj backward pass dla każdego wyjścia softmax
        for i, out in enumerate(out_values):
            def _backward_factory(idx):
                def _backward():
                    n = len(values)
                    for j in range(n):
                        # Pochodna softmax: ∂S_i/∂x_j = S_i * (δ_ij - S_j)
                        # gdzie δ_ij to delta Kroneckera (1 gdy i=j, 0 w przeciwnym razie)
                        if j == idx:
                            # Kiedy i=j: S_i * (1 - S_i)
                            values[j].grad += out.data * (1 - out.data) * out.grad
                        else:
                            # Kiedy i≠j: -S_i * S_j
                            values[j].grad += -out.data * out_values[j].data * out.grad
                return _backward
            
            out._backward = _backward_factory(i)
        
        return out_values

    def backward(self):

        # uporządkować topologicznie wszystkie dzieci w grafie
        topo = []
        visited = set()
        def build_topo(v):
            if v not in visited:
                visited.add(v)
                for child in v._prev:
                    build_topo(child)
                topo.append(v)
        build_topo(self)

        # przejdź po jednej zmiennej na raz i zastosuj regułę łańcuchową, aby uzyskać jej gradient
        self.grad = 1
        for v in reversed(topo):
            v._backward()

    def __neg__(self): # -self
        return self * -1
    def __gt__(self, other):
        return self.data > other.data

    def __radd__(self, other): # other + self
        return self + other

    def __sub__(self, other): # self - other
        return self + (-other)

    def __rsub__(self, other): # other - self
        return other + (-self)

    def __rmul__(self, other): # other * self
        return self * other

    def __truediv__(self, other): # self / other
        return self * other**-1

    def __rtruediv__(self, other): # other / self
        return other * self**-1

    def __repr__(self):
        return f"Value(data={self.data}, grad={self.grad})"