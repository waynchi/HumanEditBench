import numpy as np

def conjugate_gradient(A, b, x0=None, tol=1e-6, max_iter=None):
    """
    Решение системы линейных уравнений Ax = b методом сопряженных градиентов.
    
    Параметры:
    A : матрица коэффициентов (должна быть симметричной и положительно определенной)
    b : вектор правой части
    x0 : начальное приближение (по умолчанию нулевой вектор)
    tol : допустимая погрешность
    max_iter : максимальное количество итераций (по умолчанию размер b)
    
    Возвращает:
    x : решение системы
    """
    if x0 is None:
        x = np.zeros_like(b, dtype=float)
    else:
        x = x0.copy()
    
    if max_iter is None:
        max_iter = len(b)
    
    r = b - A @ x
    p = r.copy()
    rsold = r @ r
    
    for i in range(max_iter):
        Ap = A @ p
        alpha = rsold / (p @ Ap)
        x = x + alpha * p
        r = r - alpha * Ap
        rsnew = r @ r
        
        if np.sqrt(rsnew) < tol:
            break
            
        p = r + (rsnew / rsold) * p
        rsold = rsnew
    
    return x