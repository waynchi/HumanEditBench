from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import numpy as np
import matplotlib.pyplot as plt

def cluster_data(features_transformed, cluster_configs, n_clusters=2, clustering_method='kmeans'):
    """
    Выполняет кластеризацию данных для указанных наборов столбцов.

    Args:
        features_transformed (pandas.DataFrame): Преобразованный DataFrame с параметрами.
        cluster_configs (dict): Словарь вида {имя_столбца_кластера: (столбцы_для_кластеризации)}.
        n_clusters (int or dict): Количество кластеров. Может быть числом (для всех) или словарем {имя_кластера: количество}.
        clustering_method (str): Метод кластеризации ('kmeans').

    Returns:
        pandas.DataFrame: DataFrame с добавленными столбцами меток кластеров.
    """
    if features_transformed is None:
        print("Сначала выполните преобразование данных (этап 5).")
        return None

    result_df = features_transformed.copy()

    for cluster_name, feature_columns in cluster_configs.items():
        # Определяем количество кластеров для текущего набора
        if isinstance(n_clusters, dict):
            current_n_clusters = n_clusters.get(cluster_name, 2)
        else:
            current_n_clusters = n_clusters
        
        # Преобразуем в список, если передан один столбец как строка
        if isinstance(feature_columns, str):
            feature_columns = [feature_columns]
        
        # Проверяем наличие столбцов в DataFrame
        missing_columns = [col for col in feature_columns if col not in result_df.columns]
        if missing_columns:
            print(f"Столбцы {missing_columns} не найдены в DataFrame. Пропускаем кластеризацию для '{cluster_name}'.")
            continue
        
        # Выбираем данные для кластеризации
        features_for_clustering = result_df[list(feature_columns)]
        
        if clustering_method == 'kmeans':
            model = KMeans(n_clusters=current_n_clusters, random_state=42, n_init=10)
            cluster_labels = model.fit_predict(features_for_clustering)
            
            # Оценка качества кластеризации
            if len(np.unique(cluster_labels)) > 1:
                silhouette_avg = silhouette_score(features_for_clustering, cluster_labels)
                print(f"Коэффициент силуэта для '{cluster_name}' ({current_n_clusters} кластеров): {silhouette_avg:.4f}")
            else:
                print(f"Невозможно рассчитать коэффициент силуэта для '{cluster_name}' (все точки в одном кластере).")
        else:
            print("Неподдерживаемый метод кластеризации.")
            return None

        result_df[cluster_name] = cluster_labels
        print(f"Кластеризация выполнена для столбцов {list(feature_columns)}. Метки кластеров добавлены в столбец '{cluster_name}'.")
    
    return result_df

# Выполнение кластеризации (после этапа 5 и до этапа 6)
if 'features_transformed' in locals() and features_transformed is not None:
    # Пример конфигурации кластеризации
    cluster_configs = {
        'cluster_1': ('столбец1', 'столбец2'),  # Кластеризация по двум столбцам
        'cluster_2': ('столбец3',)              # Кластеризация по одному столбцу
    }
    
    # Можно задать разное количество кластеров для каждого набора
    n_clusters_config = {
        'cluster_1': 3,
        'cluster_2': 2
    }
    
    features_transformed = cluster_data(features_transformed, cluster_configs, n_clusters_config)
    
    # Визуализация кластеров для каждого набора
    if features_transformed is not None:
        for cluster_name, feature_columns in cluster_configs.items():
            if cluster_name in features_transformed.columns:
                feature_list = list(feature_columns) if not isinstance(feature_columns, str) else [feature_columns]
                
                if len(feature_list) >= 2:
                    plt.figure(figsize=(8, 6))
                    plt.scatter(features_transformed[feature_list[0]], 
                              features_transformed[feature_list[1]], 
                              c=features_transformed[cluster_name], 
                              cmap='viridis')
                    plt.xlabel(feature_list[0])
                    plt.ylabel(feature_list[1])
                    plt.title(f'Результаты кластеризации: {cluster_name}')
                    plt.colorbar(label='Номер кластера')
                    plt.show()
                elif len(feature_list) == 1:
                    plt.figure(figsize=(8, 6))
                    plt.hist([features_transformed[features_transformed[cluster_name] == i][feature_list[0]] 
                             for i in features_transformed[cluster_name].unique()], 
                            alpha=0.7, label=[f'Кластер {i}' for i in features_transformed[cluster_name].unique()])
                    plt.xlabel(feature_list[0])
                    plt.ylabel('Частота')
                    plt.title(f'Распределение по кластерам: {cluster_name}')
                    plt.legend()
                    plt.show()
else:
    print("Сначала выполните этап 5 (Преобразование данных).")