import random
import torch
from torchvision import transforms
from datasets import load_dataset
from PIL import Image
import numpy as np

class AlignmentDatasetCreator:
    def __init__(self, sample_size=1000):
        self.sample_size = sample_size
        self.transform = transforms.Compose([
            transforms.Resize((224, 224)),
            transforms.ToTensor(),
            transforms.Normalize(mean=[0.485, 0.456, 0.406], 
                              std=[0.229, 0.224, 0.225])
        ])
    def create_unrelated_pairs(self, image_text_pairs):
        """Creates unrelated image-text pairs by shuffling the text descriptions"""
        images, texts = zip(*image_text_pairs)
        shuffled_texts = list(texts)
        random.shuffle(shuffled_texts)
        return list(zip(images, shuffled_texts))

    def create_textual_pairs(self, dataset_name='quora'):
        """Creates semantically similar text pairs using paraphrase datasets"""
        try:
            dataset = load_dataset(dataset_name, split=f'train[:{self.sample_size}]')
            textual_pairs = []
            for item in dataset:
                if item['is_duplicate'] == 1:
                    pair = (item['question1'], item['question2'])
                    textual_pairs.append(pair)
            return textual_pairs[:self.sample_size]
        except Exception as e:
            print(f"Error loading {dataset_name} dataset: {e}")
            # Fallback to synthetic textual pairs
            return self.create_synthetic_textual_pairs()
    
    def create_synthetic_textual_pairs(self):
        """Creates synthetic textual pairs as fallback"""
        synthetic_pairs = [
            ("A cat sitting on a chair", "A feline resting on a seat"),
            ("Beautiful sunset over mountains", "Gorgeous evening sky above peaks"),
            ("Children playing in the park", "Kids having fun in the playground"),
            ("Red car parked on street", "Crimson vehicle stopped on road"),
            ("Woman reading a book", "Lady studying from a novel")
        ]
        return synthetic_pairs[:min(self.sample_size, len(synthetic_pairs))]
        
    def create_visual_pairs(self, image_text_pairs):
        """Creates augmented image pairs while maintaining semantic meaning"""
        augmentation_transforms = transforms.Compose([
            transforms.RandomHorizontalFlip(p=1.0),
            transforms.ColorJitter(brightness=0.2, contrast=0.2),
            transforms.RandomRotation(15)
        ])
        
        visual_pairs = []
        for image, _ in image_text_pairs:
            if isinstance(image, Image.Image):
                augmented = augmentation_transforms(image)
                visual_pairs.append((image, augmented))
        return visual_pairs

    def load_mscoco_dataset(self):
        """Loads and preprocesses an alternative dataset when MSCOCO fails"""
        try:
            # Try to load a simpler, more reliable dataset
            dataset = load_dataset("nlphuji/flickr30k", split=f'test[:{self.sample_size}]')
            
            image_text_pairs = []
            for item in dataset:
                # Use the first caption from the list
                if item["caption"] and len(item["caption"]) > 0:
                    caption = item["caption"][0] if isinstance(item["caption"], list) else item["caption"]
                    if len(caption.split()) >= 5:  # Filter out too short captions
                        image_text_pairs.append((item["image"], caption))
                        
            return image_text_pairs
        except Exception as e:
            print(f"Error loading Flickr30k dataset: {e}")
            print("Falling back to synthetic image-text pairs...")
            return self.create_synthetic_image_text_pairs()
    
    def create_synthetic_image_text_pairs(self):
        """Creates synthetic image-text pairs as fallback when datasets fail"""
        # Create simple colored images with corresponding descriptions
        synthetic_pairs = []
        colors = ["red", "blue", "green", "yellow", "purple"]
        
        for i, color in enumerate(colors[:min(self.sample_size, len(colors))]):
            # Create a simple colored image
            img = Image.new('RGB', (224, 224), color)
            caption = f"A simple {color} colored square image"
            synthetic_pairs.append((img, caption))
            
        return synthetic_pairs

def main():
    # Initialize dataset creator
    creator = AlignmentDatasetCreator(sample_size=100)
    
    # Load and create datasets
    print("Loading dataset...")
    image_text_pairs = creator.load_mscoco_dataset()
    
    print("Creating unrelated pairs...")
    unrelated_pairs = creator.create_unrelated_pairs(image_text_pairs)
    
    print("Creating textual pairs...")
    textual_pairs = creator.create_textual_pairs()
    
    print("Creating visual pairs...")
    visual_pairs = creator.create_visual_pairs(image_text_pairs)
    
    # Print sample from each dataset
    print("Dataset Samples:")
    print(f"Image-Text Pair: {image_text_pairs[0]}")
    print(f"Unrelated Pair: {unrelated_pairs[0]}")
    print(f"Textual Pair: {textual_pairs[0]}")
    print(f"Visual Pair: {visual_pairs[0]}")

if __name__ == "__main__":
    main()