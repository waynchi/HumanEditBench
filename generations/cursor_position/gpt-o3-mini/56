import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.stats import skew

def medcouple(data):
    data = np.sort(data)
    median = np.median(data)

    # Split data into left and right of the median
    left = data[data <= median]
    right = data[data >= median]
    
    # Create meshgrids for the left and right parts
    xi, xj = np.meshgrid(left, right, indexing='ij')
    
    # Prepare index grids for special kernel calculation
    left_indices = np.arange(left.size)
    right_indices = np.arange(right.size)
    i_idx, j_idx = np.meshgrid(left_indices, right_indices, indexing='ij')
    
    # Count of repeated median values
    k = np.sum(data == median)

    if k > 1:
        # Mask where both xi and xj equal the median
        mask = (xi == median) & (xj == median)
        # Vectorized special kernel: returns -1, 0, or 1 based on the condition
        special_vals = np.where((i_idx + j_idx - 1) < k, -1,
                         np.where((i_idx + j_idx - 1) == k, 0, 1))
        # Vectorized kernel for cases when xi != xj
        h_vals = np.where(xi != xj, ((xj - median) - (median - xi)) / (xj - xi), 0)
        # Combine the special and normal kernel values based on the mask
        h_matrix = np.where(mask, special_vals, h_vals)
    else:
        # Direct vectorized calculation of h for xi and xj arrays
        h_matrix = np.where(xi != xj, ((xj - median) - (median - xi)) / (xj - xi), 0)

    # Flatten the matrix and return its median
    return np.median(h_matrix.flatten())

def adjusted_boxplot_bounds(data):
    """
    Вычисляет границы adjusted boxplot с учетом skewness-adjusted fences.
    """
    q1 = np.percentile(data, 25)
    q3 = np.percentile(data, 75)
    iqr = q3 - q1
    _medcouple = medcouple(data)

    if _medcouple > 0:
        lower_fence = q1 - 1.5 * np.exp(-4 * _medcouple) * iqr
        upper_fence = q3 + 1.5 * np.exp(3 * _medcouple) * iqr
    else:
        lower_fence = q1 - 1.5 * np.exp(-3 * _medcouple) * iqr
        upper_fence = q3 + 1.5 * np.exp(4 * _medcouple) * iqr

    return lower_fence, upper_fence

def normalize_column(data):
    """
    Нормализация с использованием adjusted boxplot.
    """
    lower_fence, upper_fence = adjusted_boxplot_bounds(data)
    print(lower_fence)
    return (data - lower_fence) / (upper_fence - lower_fence)

# Генерация данных
np.random.seed(42)
data_normal = np.random.normal(loc=50, scale=10, size=10000)
data_skewed = np.random.exponential(scale=20, size=10000)
data_skewed = np.concatenate([data_skewed[5:], [200, 250, 300, -100, -50]])
data_with_outliers = np.concatenate([data_normal, [150, 160, 170]])

# Нормализация
df = pd.DataFrame({
    "Normal": data_normal,
    "Skewed": data_skewed,
    # "With_Outliers": data_with_outliers[3:],
})

normalized_df = df.apply(normalize_column)

plt.figure(figsize=(16, 4), dpi=250)

bins = np.linspace(-5, 200, 206)
bin_width = bins[1] - bins[0]  # Ширина одного бина

for col in df.columns:
    # plt.hist(df[col], bins=50, alpha=0.5, label=f'{col} - Original')
    # Вычисляем гистограммы без построения
    hist, _ = np.histogram(df[col], bins=bins)

    # Позиции столбиков для каждой гистограммы
    bin_centers = (bins[:-1] + bins[1:]) / 2

    # Смещение для каждого набора данных
    offset = bin_width / 4
    plt.bar(bin_centers - offset, hist, width=bin_width, align='center', alpha=0.2, label=f'{col}')
    plt.legend()
    plt.title(f"Histogram Before Normalization")
plt.xlim(-10, 200)
plt.show()

bins = np.linspace(-2, 2, 101)
bin_width = bins[1] - bins[0]  # Ширина одного бина

plt.figure(figsize=(16, 4), dpi=250)
for col in normalized_df.columns:
    # plt.hist(normalized_df[col], bins=50, alpha=0.5, label=f'{col} - Normalized')
    hist, _ = np.histogram(normalized_df[col], bins=bins)

    # Позиции столбиков для каждой гистограммы
    bin_centers = (bins[:-1] + bins[1:]) / 2
    # Смещение для каждого набора данных
    offset = bin_width / 2
    plt.bar(bin_centers - offset, hist, width=bin_width, align='center', label=f'{col}', alpha=0.2)
    plt.legend()
    plt.title(f"Histogram After Normalization")
plt.show()