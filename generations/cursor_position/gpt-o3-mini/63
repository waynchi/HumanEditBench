from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import numpy as np
import matplotlib.pyplot as plt

def cluster_data(features_transformed, cluster_columns, n_clusters=2, clustering_method='kmeans'):
    """
    Выполняет кластеризацию данных для заданных наборов столбцов.

    Args:
        features_transformed (pandas.DataFrame): Преобразованный DataFrame с параметрами.
        cluster_columns (dict): Словарь, где ключ — имя нового столбца с метками кластера,
                                а значение — кортеж (или список) со столбцами, по которым проводится кластеризация.
        n_clusters (int): Количество кластеров.
        clustering_method (str): Метод кластеризации ('kmeans').

    Returns:
        pandas.DataFrame: DataFrame с добавленными столбцами меток кластеров.
    """
    if features_transformed is None:
        print("Сначала выполните преобразование данных (этап 5).")
        return None

    features_for_clustering = features_transformed.copy()

    for new_col, cols in cluster_columns.items():
        # Проверка на существование столбцов
        missing_cols = [col for col in cols if col not in features_for_clustering.columns]
        if missing_cols:
            print(f"Следующие столбцы не найдены в DataFrame для '{new_col}': {missing_cols}")
            continue

        sub_df = features_for_clustering[list(cols)]

        if clustering_method == 'kmeans':
            model = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
            cluster_labels = model.fit_predict(sub_df)

            # Оценка качества кластеризации (например, с помощью коэффициента силуэта)
            if len(np.unique(cluster_labels)) > 1:  # Проверка на случай, когда все точки отнесены к одному кластеру
                silhouette_avg = silhouette_score(sub_df, cluster_labels)
                print(f"Коэффициент силуэта для столбцов {cols} (столбец '{new_col}') с {n_clusters} кластерами: {silhouette_avg:.4f}")
            else:
                print(f"Невозможно рассчитать коэффициент силуэта для столбцов {cols} (столбец '{new_col}') с {n_clusters} кластером (все точки в одном кластере).")
        else:
            print("Неподдерживаемый метод кластеризации.")
            return None

        features_transformed[new_col] = cluster_labels
        print(f"Кластеризация для столбцов {cols} выполнена. Метки кластеров добавлены в столбец '{new_col}'.")

    return features_transformed

# Выполнение кластеризации (после этапа 5 и до этапа 6)
if 'features_transformed' in locals() and features_transformed is not None:
    # Пример: разделяем процесс кластеризации для разных наборов столбцов.
    # Например, если мы хотим кластеризовать по парам столбцов:
    #   'Кластер1': (столбец1, столбец2) и 'Кластер2': (столбец3)
    cluster_columns = {
        'Кластер1': ('столбец1', 'столбец2'),
        'Кластер2': ('столбец3',)
    }
    n_clusters = 3  # Количество кластеров для каждой группы (подберите оптимальное значение)
    features_transformed = cluster_data(features_transformed, cluster_columns, n_clusters)

    # Визуализация кластеров (пример для случая, когда есть 2 числовых признака)
    numerical_features = features_transformed.select_dtypes(include=np.number)
    if numerical_features.shape[1] >= 2:
        plt.figure(figsize=(8, 6))
        # В этом примере визуализируется результат кластеризации для 'Кластер1'
        plt.scatter(numerical_features.iloc[:, 0], numerical_features.iloc[:, 1],
                    c=features_transformed['Кластер1'], cmap='viridis')
        plt.xlabel(numerical_features.columns[0])
        plt.ylabel(numerical_features.columns[1])
        plt.title('Результаты кластеризации (Кластер1)')
        plt.colorbar(label='Номер кластера')
        plt.show()
    else:
        print("Недостаточно числовых признаков для визуализации кластеров на плоскости.")
else:
    print("Сначала выполните этап 5 (Преобразование данных).")