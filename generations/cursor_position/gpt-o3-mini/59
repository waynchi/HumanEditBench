import torch
import torch.nn as nn

class SimpleConvNet1(nn.Module):
    def __init__(self, input_shape):  # Принимаем input_shape как аргумент (например, (3, H, W))
        super().__init__()

        self.conv1 = nn.Sequential(
            nn.Conv2d(input_shape[0], 32, 3),
            nn.ReLU(),
            nn.MaxPool2d(2)
        )

        self.conv2 = nn.Sequential(
            nn.Conv2d(32, 64, 3),
            nn.ReLU(),
            nn.MaxPool2d(2)
        )

        # Автоматически вычисляем flattened_size на основе input_shape,
        # чтобы корректно задать входной размер для первого полносвязного слоя.
        with torch.no_grad():
            dummy = torch.zeros(1, *input_shape)
            dummy = self.conv1(dummy)
            dummy = self.conv2(dummy)
            flattened_size = dummy.numel()
            
        self.flatten = nn.Flatten()
        self.fc1 = nn.Sequential(
            nn.Linear(flattened_size, 512),
            nn.ReLU(),
            nn.Linear(512, 3)
        )

    def forward(self, x):
        x = self.conv1(x)
        x = self.conv2(x)
        x = self.flatten(x)
        x = self.fc1(x)
        return x