import numpy as np

def conjugate_gradient(A, b, x0=None, tol=1e-8, max_iter=None):
    """
    Solve the linear system Ax = b using the conjugate gradient method.
    
    Parameters:
        A : numpy.ndarray
            Square, symmetric, positive-definite matrix.
        b : numpy.ndarray
            Right-hand side vector.
        x0 : numpy.ndarray, optional
            Initial guess. If None, the zero vector is used.
        tol : float, optional
            Tolerance for convergence. Iteration stops when ||r|| < tol.
        max_iter : int, optional
            Maximum number of iterations. Defaults to the size of A if not provided.
            
    Returns:
        x : numpy.ndarray
            The approximated solution to Ax = b.
        info : int
            0 if the algorithm converged, 1 otherwise.
    """
    n = b.shape[0]
    if x0 is None:
        x = np.zeros(n)
    else:
        x = x0.copy()
    
    if max_iter is None:
        max_iter = n
    
    r = b - A @ x
    p = r.copy()
    rs_old = np.dot(r, r)
    
    for i in range(max_iter):
        Ap = A @ p
        alpha = rs_old / np.dot(p, Ap)
        x = x + alpha * p
        r = r - alpha * Ap
        rs_new = np.dot(r, r)
        
        if np.sqrt(rs_new) < tol:
            return x, 0
        
        beta = rs_new / rs_old
        p = r + beta * p
        rs_old = rs_new
        
    return x, 1