import numpy as np

def conjugate_gradient(A, b, x0, tol=1e-6, max_iter=1000):
    r = b - np.dot(A, x0)
    p = r.copy()
    x = x0.copy()
    rsold = np.dot(r, r)
    for iteration in range(max_iter):
        alpha = rsold / np.dot(p, np.dot(A, p))
        x = x + alpha * p
        r = r - alpha * np.dot(A, p)
        rsnew = np.dot(r, r)
        if np.sqrt(rsnew) < tol:
            break
        beta = rsnew / rsold
        p = r + beta * p
        rsold = rsnew
    return x