const express = require("express");
const bodyParser = require("body-parser");
const cors = require("cors");
const fs = require("fs");
const path = require("path");
require("dotenv").config();

const app = express();
const PORT = process.env.PORT || 3000;

// Path to JSON file for storing data
const DB_FILE = path.join(__dirname, "database.json");

// Initialize JSON file if it doesn't exist
if (!fs.existsSync(DB_FILE)) {
  fs.writeFileSync(DB_FILE, JSON.stringify({ appointments: [], reminders: [] }, null, 2));
}

// Helper function to read data from the JSON file
const readDatabase = () => {
  const data = fs.readFileSync(DB_FILE, "utf-8");
  return JSON.parse(data);
};

// Helper function to write data to the JSON file
const writeDatabase = (data) => {
  fs.writeFileSync(DB_FILE, JSON.stringify(data, null, 2));
};

// Middleware
app.use(cors());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// Routes

// Health Check
app.get("/", (req, res) => {
  res.status(200).send("API is working!");
});

// Middleware to clean up expired tokens periodically
const tokenStore = {};
setInterval(() => {
  const now = Date.now();
  for (const token in tokenStore) {
    if (tokenStore[token].expiresAt < now) {
      delete tokenStore[token]; // Remove expired token
    }
  }
}, 60000); // Run cleanup every minute

// Helper function to generate an 8-character random alphanumeric token
function generateSimpleToken() {
  const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  let token = "";
  for (let i = 0; i < 8; i++) {
    token += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return token;
}

// Updated /generate-token
app.get("/generate-token", (req, res) => {
  const { phone, name, chat } = req.query;
  if (!phone || !name || !chat) {
    return res.status(400).json({ error: "Phone, Name, and Chatbot are required" });
  }

  try {
    const token = generateSimpleToken(); // Generate a token
    const expiresAt = Date.now() + 15 * 60 * 1000; // Set expiration time to 15 minutes from now
    tokenStore[token] = { phone, name, chat, expiresAt }; // Store token with both phone and name
    res.json({ token });
  } catch (error) {
    console.error("Error generating token:", error);
    res.status(500).json({ error: "Internal Server Error" });
  }
});

// Updated /validate-token
app.get("/validate-token", (req, res) => {
  const { token } = req.query;
  if (!token) return res.status(400).json({ error: "Token is required" });

  try {
    const data = tokenStore[token];
    if (!data) throw new Error("Token not found");

    if (Date.now() > data.expiresAt) {
      delete tokenStore[token]; // Remove expired token
      throw new Error("Token has expired");
    }

    res.json(data); // Respond with phone, name, and chatbot
  } catch (error) {
    console.error("Invalid token:", error);
    res.status(401).json({ error: "Invalid or expired token" });
  }
});


// Check if a phone number exists
app.get("/check-phone/:phone", (req, res) => {
  const { phone } = req.params;
  const { chatBotNumber } = req.query;

  if (!chatBotNumber) {
    return res.status(400).json({ error: "Chatbot number is required" });
  }

  const db = readDatabase();
  const appointment = db.appointments.find(
    (a) => a.phone === phone && a.chatBotNumber === chatBotNumber
  );

  if (appointment) {
    res.json({ exists: true, appointment });
  } else {
    res.json({ exists: false });
  }
});

// Add or update a reminder
const addOrUpdateReminder = (appointment) => {
    const db = readDatabase();
    const appointmentDateTime = new Date(`${appointment.date}T${appointment.time}`);
    const alertTime = new Date(appointmentDateTime.getTime() - 60 * 60 * 1000); // 1 hour before
  
  const existingIndex = db.reminders.findIndex((r) => r.appointmentId === appointment.id);
  
    if (existingIndex >= 0) {
      // Update existing reminder
      db.reminders[existingIndex].alertTime = alertTime;
      db.reminders[existingIndex].status = "pending";
    } else {
      // Add new reminder
      db.reminders.push({
      appointmentId: appointment.id,
        alertTime,
        status: "pending"
      });
    }
  
    writeDatabase(db);
  };

// Submit or update a booking
app.post("/submit-booking", (req, res) => {
  const { name, phone, service, time, date, notes, token } = req.body;

  if (!name || !phone || !service || !time || !date) {
    return res.status(400).json({ error: "All fields are required!" });
  }

  const chatBotNumber = tokenStore[token]?.chat;

  const db = readDatabase();
  const existingIndex = db.appointments.findIndex((a) => a.phone === phone && a.chatBotNumber === chatBotNumber);

  // Generate unique appointment ID using timestamp and random string
  const appointmentId = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;

  const appointment = {
    id: appointmentId,
    name,
    phone,
    service,
    time,
    date,
    notes,
    chatBotNumber
  };

  if (existingIndex >= 0) {
    db.appointments[existingIndex] = appointment; // Update existing appointment
  } else {
    db.appointments.push(appointment); // Add new appointment
  }
  writeDatabase(db);
  addOrUpdateReminder(appointment);
  delete tokenStore[token]; // Remove the token after use

  res.json({ message: "Appointment saved successfully!", appointment });
});

// Modify an existing appointment
app.post("/modify-appointment", (req, res) => {
  const { phone, name, service, time, date, notes, token } = req.body;

  const chatBotNumber = tokenStore[token]?.chat;

  const db = readDatabase();
  const appointmentIndex = db.appointments.findIndex((a) => a.phone === phone && a.chatBotNumber === chatBotNumber);

  if (appointmentIndex === -1) {
    return res.status(404).json({ error: "Appointment not found!" });
  }

  const updatedAppointment = {
    ...db.appointments[appointmentIndex],
    name,
    service,
    time,
    date,
    notes,
  };

  db.appointments[appointmentIndex] = updatedAppointment;
  addOrUpdateReminder(updatedAppointment);
  writeDatabase(db);
  
  delete tokenStore[token]; // Remove token after successful modification

  res.json({ message: "Appointment updated successfully!" });
});

// Endpoint to get appointment by phone number
app.get("/appointment/:phone", (req, res) => {
    const { phone } = req.params;
    const { chatBotNumber } = req.query;
  
    if (!chatBotNumber) {
      return res.status(400).json({ error: "Chatbot number is required" });
    }
  
    const db = readDatabase();
    const appointment = db.appointments.find(
      (a) => a.phone === phone && a.chatBotNumber === chatBotNumber
    );
  
    if (appointment) {
      res.status(200).json(appointment); // Return the appointment details
    } else {
      res.status(404).json({ error: "Appointment not found!" }); // Handle not found
    }
  });
  

// Remove a reminder
const removeReminder = (phone) => {
    const db = readDatabase();
    db.reminders = db.reminders.filter((r) => r.appointmentId !== phone);
    writeDatabase(db);
  };

// Cancel an appointment
app.post("/cancel-appointment", (req, res) => {
  const { phone, token } = req.body;

  if (!tokenStore[token]?.chat) {
    return res.status(401).json({ error: "Invalid token or missing chatbot number" });
  }

  const db = readDatabase();
  const appointmentIndex = db.appointments.findIndex(
    (a) => a.phone === phone && a.chatBotNumber === tokenStore[token].chat
  );

  if (appointmentIndex === -1) {
    return res.status(404).json({ error: "Appointment not found!" });
  }

  db.appointments.splice(appointmentIndex, 1); // Remove the appointment
  writeDatabase(db);
  removeReminder(phone);

  delete tokenStore[token]; // Remove token after successful cancellation
  res.json({ message: "Appointment canceled successfully!" });
});

// Centralized Error Handler
app.use((err, req, res, next) => {
  console.error("Error occurred:", err.message);
  res.status(500).json({ error: "Internal Server Error" });
});

// Start the server
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});
