plik = open("dane_obrazki.txt")
maxbitybledne = 0
bityBledne = list()
def czyPoprawny(obrazek): # obrzek zawiera liste łancuchów znaków  i można korzystać z operatora balicowego
                            # obrazek[i][j]
    for wiersz in obrazek[:-1]: # nie liczymy z ostaniego wiersza tam są bity parzystosci
        if wiersz[:-1].count('1') % 2 != int(wiersz[-1]):
            return False
    for i in range(20): # i = 0,1,2,3,4,5,6,7..19
        kolumna = ""
        for j in range(21):  # j = 0,1,2,3,4,5,..20
            kolumna+=obrazek[j][i]
        if kolumna[:-1].count('1')% 2 != int(kolumna[-1]):
            return False
    return True

def czyNaprawialny(obrazek):
    bityKolBleden = 0
    bityWierBledne = 0
    for wiersz in obrazek[:-1]: # nie liczymy z ostaniego wiersza tam są bity parzystosci
        if wiersz[:-1].count('1') % 2 != int(wiersz[-1]):
            bityWierBledne+=1
    for i in range(20): # i = 0,1,2,3,4,5,6,7..19
        kolumna = ""
        for j in range(21):  # j = 0,1,2,3,4,5,..20
            kolumna+=obrazek[j][i]
        if kolumna[:-1].count('1')% 2 != int(kolumna[-1]):
           bityKolBleden+=1
    global maxbitybledne
    if maxbitybledne<(bityKolBleden+bityWierBledne):
        maxbitybledne = bityKolBleden+bityWierBledne
    bityBledne.append(bityKolBleden+bityWierBledne)

    if bityWierBledne >1 :
        return False
    if bityKolBleden > 1:
        return False

    return True

def napraw(obrazek):
    """Wejście stanowi plik tekstowy zawierający dane czarnobiałego obrazka zakodowane jaki piksele.
0 - piksel biały 1 - piksel czarny.
Każdy wiersz oraz kolumna zwiera na swoim końcu bit parzystości.
Bit parzystości jest równy 0, jeśli ilość jedynek w wierszy (lub w kolumnie dla kolumn) jest parzysta a
1 jeśli jest nieparzysta.
np.
0 1 1 0 1 1 bit błędny należy zmienić go na przeciwny
1 1 1 0 1 0
1 1 1 1 1 1
0 1 1 0 0 0
1 1 0 1 1 0
1 1 0 0 0 - bity parzystości kolumny
 ^
 |- bity parzystości wiersza
Napisz funkcje który znajdzie uszkodzone obrazki oraz je naprawi . tzn Jest to obrazek naprawialny (
posiada co najwyżej jeden bit parzystości wiersza i co najwyżej jeden bit parzystości kolumny
niepoprawny ) a następnie naprawi te obrazy
Wynik ma zawierać obrazek błędny(naprawialny) oraz obrazek poprawiony"""

    obrazek_naprawiony = [list(wiersz) for wiersz in obrazek]

    # Sprawdź błędy w wierszach
    for i in range(20):
        wiersz = obrazek_naprawiony[i]
        if wiersz[:-1].count('1') % 2 != int(wiersz[-1]):
            # Znajdź błędny bit w wierszu
            for j in range(20):
                if wiersz[j] != str((wiersz[:-1].count('1') + 1) % 2):
                    wiersz[j] = str((wiersz[:-1].count('1') + 1) % 2)
                    break
            # Napraw bit parzystości wiersza
            wiersz[-1] = str(wiersz[:-1].count('1') % 2)

    # Sprawdź błędy w kolumnach
    for i in range(20):
        kolumna = [obrazek_naprawiony[j][i] for j in range(21)]
        if kolumna[:-1].count('1') % 2 != int(kolumna[-1]):
            # Znajdź błędny bit w kolumnie
            for j in range(20):
                if kolumna[j] != str((kolumna[:-1].count('1') + 1) % 2):
                    obrazek_naprawiony[j][i] = str((kolumna[:-1].count('1') + 1) % 2)
                    break
            # Napraw bit parzystości kolumny
            obrazek_naprawiony[20][i] = str(kolumna[:-1].count('1') % 2)

    # Konwertuj z powrotem do formatu stringów
    obrazek_naprawiony = [''.join(wiersz) for wiersz in obrazek_naprawiony]
    return obrazek_naprawiony

poprawne = 0
naprawialne = 0
obrazek = list()
for linia in plik:
    wiersz = linia.strip() # odcinamy białe znaki np enter
   # wiersz = wiersz[:-1]  # tylko dane obrazka bez bitu parzystosci  teraz czytamy cala wiersz danych
    obrazek.append(wiersz)
    if len(obrazek) == 21: # mamy 21 lini czyli cały obrazek razem z wierszam bitów parzystosci
        if czyPoprawny(obrazek):
            poprawne+=1
        elif czyNaprawialny(obrazek):
            naprawialne+=1
            naprawiony = napraw(obrazek)

    if len(obrazek) == 22:  # po 22 lini czyscimy obrazek by czytać wiersze nastepnego obrazka
        obrazek = list()

print(poprawne,naprawialne,200-poprawne-naprawialne)
print(maxbitybledne,max(bityBledne))