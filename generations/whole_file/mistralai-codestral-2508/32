from beem.discussions import Discussions, Query
from beem.comment import Comment

n_respuestas_minimas = 5
diccionario = {}

def procesar (texto: str):
    return "count me " in texto
def is_own_author (autor: str):
    return author == 'subidu'
def is_banned (autor: str):
    list_banned = []
    return autor in list_banned
def generar_permlink_unico () -> str:
    return "".join(random.choices(string.digits, k=10))
def procesar_replies (replies: Comment):
    pass
def preparar_comentario (parent_author: str, parent_permlink: str, permlink: str, title: str = '', author: str = 'subidu' , body: str = 'Count me in ^^ @subidu') -> dict[str:str]:
    return {
        "parent_author": parent_author,
        "parent_permlink": parent_permlink,
        "author": author,
        "permlink": permlink,
        "title": title,
        "body": body,
    }

q = Query()
d = Discussions()
posts_generator = d.get_discussions("created", q, limit=6000)
X = 0

# Crear diccionario jerárquico para posts y replies
diccionario = {}

for post in posts_generator:
    post_author = post['author']
    post_permlink = post['permlink']
    post_replies = post['children']
    cnt = 0
    X += 1

    # Inicializar entrada para el post en el diccionario
    post_key = f"{post_author}/{post_permlink}"
    diccionario[post_key] = {
        'post': post,
        'replies': []
    }

    if post_replies > n_respuestas_minimas:
        comment = Comment(authorperm=post_key)
        post_replies_list = comment.get_replies()

        cnt = 0
        for reply in post_replies_list:
            author = reply['author']
            text = reply['body']

            # Añadir reply al diccionario jerárquico
            diccionario[post_key]['replies'].append(reply)

            if is_own_author(author):
                break
            if is_banned(author):
                break
            if procesar(text):
                cnt += 1

    if cnt > 3:
        print("Iterador: ", X)
        print(reply['author'], '/', reply['permlink'])