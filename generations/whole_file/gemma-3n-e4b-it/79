function createTurnState(allyStates, foeStates) {
  // Find current turn based wich group still has units that can act

  let turnNumber = 1;

  let currentTurn = "player"; // Initialize current turn

  function getCurrentTurn() {
    return currentTurn;
  }

  function getTurnNumber() {
    return turnNumber;
  }

  function nextTurn() {
    let canPlayerAct = false;
    let canCpuAct = false;

    allyStates.forEach(unit => {
      if (!unit.hasActed) {
        canPlayerAct = true;
      }
    });

    foeStates.forEach(unit => {
      if (!unit.hasActed) {
        canCpuAct = true;
      }
    });
   

    if (currentTurn === "player") {
      if (canPlayerAct) {
        currentTurn = "cpu";
        // CPU logic here (e.g., AI movement and actions)
        allyStates.forEach(unit => unit.hasActed = true);
        foeStates.forEach(unit => unit.hasActed = false);
        cpuTurn();
      } else {
        nextTurn(); // Automatically switch to CPU if player cannot act
      }
    } else {
      if (canCpuAct) {
        currentTurn = "player";
        foeStates.forEach(unit => unit.hasActed = true);
        allyStates.forEach(unit => unit.hasActed = false);
        turnNumber++; // Increment turn number only after player's turn
        nextTurn();
      } else {
        nextTurn(); // Automatically switch to player if CPU cannot act
      }
    }
    // Reset action availability for all units at the start of a new turn
  }

  function cpuTurn() {
    // Example CPU behavior (replace with your actual AI logic)
    for (const cpuUnit of foeStates) {
      if (!cpuUnit.hasActed) { // Check if the unit has already acted in this turn
        // Perform CPU actions (e.g., movement, attack)
        // ... your CPU AI logic here ...

        cpuUnit.hasActed = true; // Mark the unit as having acted
      }
    }

    // After all CPU units have acted (or chosen not to), end the CPU turn
    nextTurn(); // Automatically switch back to player's turn
  }  

  return {
    getCurrentTurn,
    getTurnNumber,
    nextTurn
  };
}

export { createTurnState };