def create_matrix(rows: int, cols: int, fill_value=0) -> list:
    """
    Создает матрицу размера rows x cols, заполненную значением fill_value.
    Параметры:
    rows (int): количество строк.
    cols (int): количество столбцов.
    fill_value (любой тип): значение для заполнения матрицы.
    Возвращает:
    list: матрица в виде списка списков.
    """
    matrix = []
    for _ in range(rows):
        row = [fill_value] * cols
        matrix.append(row)
    return matrix

def add_matrices(matrix_a: list, matrix_b: list) -> list:
    """
    Складывает две матрицы одинакового размера.
    Параметры:
    matrix_a (list): первая матрица.
    matrix_b (list): вторая матрица.
    Возвращает:
    list: результат сложения матриц.
    """
    if not matrix_a or not matrix_b:
        return []
    rows = len(matrix_a)
    cols = len(matrix_a[0])
    if len(matrix_b) != rows or len(matrix_b[0]) != cols:
        return []
    result = []
    for i in range(rows):
        row = []
        for j in range(cols):
            row.append(matrix_a[i][j] + matrix_b[i][j])
        result.append(row)
    return result

def scalar_multiply(matrix: list, scalar: float) -> list:
    """
    Умножает все элементы матрицы на скаляр.
    Параметры:
    matrix (list): исходная матрица.
    scalar (float): число, на которое умножаются элементы матрицы.
    Возвращает:
    list: результат умножения матрицы на скаляр.
    """
    result = []
    for row in matrix:
        new_row = [element * scalar for element in row]
        result.append(new_row)
    return result

def multiply_matrices(matrix_a: list, matrix_b: list) -> list:
    """
    Перемножает две матрицы.
    Параметры:
    matrix_a (list): первая матрица.
    matrix_b (list): вторая матрица.
    Возвращает:
    list: результат умножения матриц.
    """
    if not matrix_a or not matrix_b:
        return []
    rows_a = len(matrix_a)
    cols_a = len(matrix_a[0])
    rows_b = len(matrix_b)
    cols_b = len(matrix_b[0])

    if cols_a != rows_b:
        return []

    result = [[0 for _ in range(cols_b)] for _ in range(rows_a)]

    for i in range(rows_a):
        for j in range(cols_b):
            for k in range(cols_a):
                result[i][j] += matrix_a[i][k] * matrix_b[k][j]
    return result

def transpose_matrix(matrix: list) -> list:
    """
    Транспонирует матрицу.
    Параметры:
    matrix (list): исходная матрица.
    Возвращает:
    list: транспонированная матрица.
    """
    if not matrix:
        return []
    rows = len(matrix)
    cols = len(matrix[0])
    transposed = [[0 for _ in range(rows)] for _ in range(cols)]
    for i in range(rows):
        for j in range(cols):
            transposed[j][i] = matrix[i][j]
    return transposed

def determinant_3x3(matrix: list) -> float:
    """
    Вычисляет определитель матрицы 3x3.
    Параметры:
    matrix (list): исходная матрица размером 3x3.
    Возвращает:
    float: определитель матрицы.
    """
    if len(matrix) != 3 or len(matrix[0]) != 3:
        return 0.0
    return (matrix[0][0] * (matrix[1][1] * matrix[2][2] - matrix[1][2] * matrix[2][1])
            - matrix[0][1] * (matrix[1][0] * matrix[2][2] - matrix[1][2] * matrix[2][0])
            + matrix[0][2] * (matrix[1][0] * matrix[2][1] - matrix[1][1] * matrix[2][0]))