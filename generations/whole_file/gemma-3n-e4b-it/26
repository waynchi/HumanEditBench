import numpy as np

def conjugate_gradient(A, b, x0, max_iter=100, tolerance=1e-6):
    """
    Solves the linear system Ax = b using the conjugate gradient method.

    Args:
        A (np.ndarray): The coefficient matrix (n x n).
        b (np.ndarray): The right-hand side vector (n).
        x0 (np.ndarray): The initial guess for the solution vector (n).
        max_iter (int): The maximum number of iterations.
        tolerance (float): The convergence tolerance.

    Returns:
        np.ndarray: The approximate solution vector x.
        int: The number of iterations performed.
    """

    n = A.shape[0]
    x = x0.copy()
    r = b - A @ x
    p = r.copy()

    for k in range(max_iter):
        if np.linalg.norm(r) < tolerance:
            break

        # Calculate alpha
        alpha = (r @ r) / (p @ A @ p)

        # Update x
        x = x + alpha * p

        # Update r
        r = b - A @ x

        # Update p
        p = r.copy()

    return x, k + 1