import torch
import torch.nn as nn

class SimpleConvNet1(nn.Module):
    def __init__(self, input_size=32):  # Используем input_size для задания размера входного изображения
        super().__init__()

        self.conv1 = nn.Sequential(
            nn.Conv2d(3, 32, kernel_size=3),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=2)
        )

        self.conv2 = nn.Sequential(
            nn.Conv2d(32, 64, kernel_size=3),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=2)
        )

        # Вычисляем автоматически размер flattened входа для полносвязного слоя.
        # Для этого пропускаем фиктивное изображение через сверточные слои.
        with torch.no_grad():
            dummy_input = torch.zeros(1, 3, input_size, input_size)
            dummy_output = self.conv2(self.conv1(dummy_input))
            flattened_size = dummy_output.view(1, -1).size(1)

        self.flatten = nn.Flatten()
        self.fc1 = nn.Sequential(
            nn.Linear(flattened_size, 512),
            nn.ReLU(),
            nn.Linear(512, 3)
        )

    def forward(self, x):
        x = self.conv1(x)
        x = self.conv2(x)
        x = self.flatten(x)
        x = self.fc1(x)
        return x