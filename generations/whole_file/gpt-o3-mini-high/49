def create_matrix(rows: int, cols: int, fill_value=0) -> list:
    """
    Создает матрицу размера rows x cols, заполненную значением fill_value.
    Параметры:
      rows (int): количество строк.
      cols (int): количество столбцов.
      fill_value (любой тип): значение для заполнения матрицы.
    Возвращает:
      list: матрица в виде списка списков.
    """
    return [[fill_value for _ in range(cols)] for _ in range(rows)]


def add_matrices(matrix_a: list, matrix_b: list) -> list:
    """
    Складывает две матрицы одинакового размера.
    Параметры:
      matrix_a (list): первая матрица.
      matrix_b (list): вторая матрица.
    Возвращает:
      list: результат сложения матриц.
    """
    # Предполагается, что размеры matrix_a и matrix_b совпадают
    result = []
    for i in range(len(matrix_a)):
        row = []
        for j in range(len(matrix_a[i])):
            row.append(matrix_a[i][j] + matrix_b[i][j])
        result.append(row)
    return result


def scalar_multiply(matrix: list, scalar: float) -> list:
    """
    Умножает все элементы матрицы на скаляр.
    Параметры:
      matrix (list): исходная матрица.
      scalar (float): число, на которое умножаются элементы матрицы.
    Возвращает:
      list: результат умножения матрицы на скаляр.
    """
    return [[element * scalar for element in row] for row in matrix]


def multiply_matrices(matrix_a: list, matrix_b: list) -> list:
    """
    Перемножает две матрицы.
    Параметры:
      matrix_a (list): первая матрица.
      matrix_b (list): вторая матрица.
    Возвращает:
      list: результат умножения матриц.
    """
    # Количество столбцов в матрице A должно совпадать с количеством строк в матрице B
    num_rows_a = len(matrix_a)
    num_cols_a = len(matrix_a[0])
    num_cols_b = len(matrix_b[0])
    
    # Инициализация результирующей матрицы нулями
    result = [[0 for _ in range(num_cols_b)] for _ in range(num_rows_a)]
    
    for i in range(num_rows_a):
        for j in range(num_cols_b):
            for k in range(num_cols_a):
                result[i][j] += matrix_a[i][k] * matrix_b[k][j]
    return result


def transpose_matrix(matrix: list) -> list:
    """
    Транспонирует матрицу.
    Параметры:
      matrix (list): исходная матрица.
    Возвращает:
      list: транспонированная матрица.
    """
    if not matrix:
        return []
    num_rows = len(matrix)
    num_cols = len(matrix[0])
    result = []
    for j in range(num_cols):
        new_row = []
        for i in range(num_rows):
            new_row.append(matrix[i][j])
        result.append(new_row)
    return result


def determinant_3x3(matrix: list) -> float:
    """
    Вычисляет определитель матрицы 3x3.
    Параметры:
      matrix (list): исходная матрица размером 3x3.
    Возвращает:
      float: определитель матрицы.
    """
    # Извлекаем элементы матрицы для удобства
    a11, a12, a13 = matrix[0]
    a21, a22, a23 = matrix[1]
    a31, a32, a33 = matrix[2]
    
    det = (a11 * (a22 * a33 - a23 * a32) -
           a12 * (a21 * a33 - a23 * a31) +
           a13 * (a21 * a32 - a22 * a31))
    return det