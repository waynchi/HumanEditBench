from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

def cluster_data(features_transformed, cluster_feature_name, n_clusters=2, clustering_method='kmeans'):
    """
    Выполняет кластеризацию данных.
    
    Если параметр cluster_feature_name является dict, то для каждого ключа (имя нового столбца)
    выполняется кластеризация для набора столбцов, указанных в значении (кортеж или список имен столбцов).
    Если cluster_feature_name является строкой, то выполняется кластеризация для всех признаков DataFrame.
    
    Args:
        features_transformed (pandas.DataFrame): Преобразованный DataFrame с параметрами.
        cluster_feature_name (str или dict): Если строка, то имя столбца для меток кластеров,
                                              и кластеризация проводится по всем признакам.
                                              Если dict, то ключи задают имена новых столбцов,
                                              а значения – кортежи/списки имен столбцов для кластеризации.
        n_clusters (int): Количество кластеров.
        clustering_method (str): Метод кластеризации ('kmeans').

    Returns:
        pandas.DataFrame: DataFrame с добавленными столбцами меток кластеров.
    """
    if features_transformed is None:
        print("Сначала выполните преобразование данных (этап 5).")
        return None

    # Режим с множественной кластеризацией: если cluster_feature_name передан в виде словаря.
    if isinstance(cluster_feature_name, dict):
        for new_col, cols in cluster_feature_name.items():
            # Проверяем, что все указанные столбцы присутствуют в DataFrame
            missing_cols = [col for col in cols if col not in features_transformed.columns]
            if missing_cols:
                print(f"Столбцы {missing_cols} не найдены в данных. Пропускаем кластеризацию для '{new_col}'.")
                continue

            features_subset = features_transformed[list(cols)].copy()

            if clustering_method == 'kmeans':
                model = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
                cluster_labels = model.fit_predict(features_subset)
                
                # Оценка качества кластеризации (например, с помощью коэффициента силуэта)
                if len(np.unique(cluster_labels)) > 1:
                    silhouette_avg = silhouette_score(features_subset, cluster_labels)
                    print(f"Коэффициент силуэта для '{new_col}' с {n_clusters} кластерами: {silhouette_avg:.4f}")
                else:
                    print(f"Невозможно рассчитать коэффициент силуэта для '{new_col}' с {n_clusters} кластер(а/ов) (все точки в одном кластере).")
            else:
                print(f"Неподдерживаемый метод кластеризации для '{new_col}'.")
                continue

            features_transformed[new_col] = cluster_labels
            print(f"Кластеризация для '{new_col}' выполнена. Метки кластеров добавлены в столбец '{new_col}'.")

    # Режим одиночной кластеризации: если cluster_feature_name передан как строка.
    elif isinstance(cluster_feature_name, str):
        features_for_clustering = features_transformed.copy()

        if clustering_method == 'kmeans':
            model = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
            cluster_labels = model.fit_predict(features_for_clustering)
            
            # Оценка качества кластеризации (например, с помощью коэффициента силуэта)
            if len(np.unique(cluster_labels)) > 1:
                silhouette_avg = silhouette_score(features_for_clustering, cluster_labels)
                print(f"Коэффициент силуэта для {n_clusters} кластеров: {silhouette_avg:.4f}")
            else:
                print(f"Невозможно рассчитать коэффициент силуэта для {n_clusters} кластера (все точки в одном кластере).")
        else:
            print("Неподдерживаемый метод кластеризации.")
            return None

        features_transformed[cluster_feature_name] = cluster_labels
        print(f"Кластеризация выполнена. Метки кластеров добавлены в столбец '{cluster_feature_name}'.")
    else:
        print("Неверный тип параметра cluster_feature_name. Ожидается строка или словарь.")
        return None

    return features_transformed

# Выполнение кластеризации (после этапа 5 и до этапа 6)
if 'features_transformed' in locals() and features_transformed is not None:
    cluster_feature_name = 'cluster'  # Имя столбца для меток кластеров или словарь с набором столбцов
    n_clusters = 3  # Количество кластеров (подберите оптимальное значение)
    features_transformed = cluster_data(features_transformed, cluster_feature_name, n_clusters)
    
    # Визуализация кластеров (пример для случая, когда есть 2 числовых признака)
    numerical_features = features_transformed.select_dtypes(include=np.number)
    if numerical_features.shape[1] >= 2:
        import matplotlib.pyplot as plt
        plt.figure(figsize=(8, 6))
        plt.scatter(numerical_features.iloc[:, 0], numerical_features.iloc[:, 1], 
                    c=features_transformed[cluster_feature_name], cmap='viridis')
        plt.xlabel(numerical_features.columns[0])
        plt.ylabel(numerical_features.columns[1])
        plt.title('Результаты кластеризации')
        plt.colorbar(label='Номер кластера')
        plt.show()
    else:
        print("Недостаточно числовых признаков для визуализации кластеров на плоскости.")
else:
    print("Сначала выполните этап 5 (Преобразование данных).")