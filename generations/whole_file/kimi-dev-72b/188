import os
import random
import torch
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.metrics import precision_score, recall_score
from torch.nn import functional as F
from PIL import Image, ImageDraw, ImageFont
import matplotlib.pyplot as plt
import seaborn as sns
from colpali_engine.interpretability import (
    get_similarity_maps_from_embeddings,
    plot_all_similarity_maps,
)


# 提取的Flickr8k数据集的路径
FLICKR8K_IMAGES_PATH = "flickr8k/Images"
FLICKR8K_CAPTIONS_PATH = "flickr8k/captions.txt"

# 从Flickr8k加载图像-文本对的函数
def load_flickr8k_data(images_path, captions_path, fraction=0.1):
    # 读取字幕文件
    with open(captions_path, "r") as f:
        captions_data = f.readlines()[1:]  # 跳过标题

    # 解析标题
    image_text_pairs = {}
    for line in captions_data:
        image_name, caption = line.strip().split(",", 1)
        if image_name not in image_text_pairs:
            image_text_pairs[image_name] = []
        image_text_pairs[image_name].append(caption)

    # 仅加载数据集的一部分
    selected_images = random.sample(list(image_text_pairs.keys()), int(len(image_text_pairs) * fraction))
    image_text_pairs = {k: image_text_pairs[k] for k in selected_images}

    # 创建图像和标题的配对
    pairs = []
    for image_name, captions in image_text_pairs.items():
        image_path = os.path.join(images_path, image_name)
        if os.path.exists(image_path):
            pairs.append((Image.open(image_path), random.choice(captions)))
    return pairs

# 创建不相关对的函数
def create_unrelated_pairs(image_text_pairs):
    """创建不相关的图像和文本对，通过随机打乱文本。

参数：
    image_text_pairs (list): 包含图像及其对应文本的元组列表。

返回：
    list: 包含图像和不相关文本的元组列表。"""
    images, texts = zip(*image_text_pairs)
    unrelated_texts = random.sample(texts, len(texts))
    return list(zip(images, unrelated_texts))


def create_visual_pairs(image_text_pairs):
    """从图像-文本对中创建原始图像和增强图像的对。

此函数接受一个图像-文本对的列表，并创建由原始图像及其增强版本组成的新对。此实现中使用的增强是水平翻转。

参数:
    image_text_pairs (list): 包含 (image, text) 对的元组列表，其中图像是 PIL Image 对象，文本是字符串。

返回:
    list: 包含 (original_image, augmented_image) 对的元组列表，其中两个元素都是 PIL Image 对象。"""
    from torchvision.transforms import ToTensor
    images, _ = zip(*image_text_pairs)
    augmented_images = [ToTensor()(image).flip(-1) for image in images]  # 示例增强：水平翻转
    return list(zip(images, augmented_images))


def get_embeddings(images, texts, model_id="google/siglip-base-patch16-224"):
    """给定图像和文本列表，返回两者的归一化嵌入。"""
    # 确保 texts 是字符串列表
    if not all(isinstance(t, str) for t in texts):
        raise ValueError("All text inputs must be strings.")

    device = "cuda" if torch.cuda.is_available() else "cpu"
    model = AutoModel.from_pretrained(model_id, ignore_mismatched_sizes=True).to(device)
    processor = AutoProcessor.from_pretrained(model_id)
    
    # 预处理图像和文本
    image_inputs = processor(images=images, return_tensors="pt").to(device)
    text_inputs = processor(text=texts, return_tensors="pt", padding="max_length").to(device)
    
    with torch.no_grad():
        image_embeds = model.get_image_features(**image_inputs)
        text_embeds = model.get_text_features(**text_inputs)

    # 规范化嵌入
    image_embeds = image_embeds / image_embeds.norm(dim=-1, keepdim=True)
    text_embeds = text_embeds / text_embeds.norm(dim=-1, keepdim=True)

    return image_embeds, text_embeds


def cosine_similarity_analysis(embeddings1, embeddings2, title):
    """计算匹配和不相关对的余弦相似度并比较分布。"""
    similarities = cosine_similarity(embeddings1.cpu().numpy(), embeddings2.cpu().numpy())

    # 匹配对：相似度矩阵的对角线
    matching_similarities = np.diag(similarities)

    # 不相关的对：非对角线相似度
    unrelated_similarities = similarities[~np.eye(similarities.shape[0], dtype=bool)]

    print(f"### {title} ###")
    print(f"Mean Matching Similarity: {np.mean(matching_similarities):.4f}")
    print(f"Mean Unrelated Similarity: {np.mean(unrelated_similarities):.4f}")
    print()

    # 绘制分布图
    plt.figure(figsize=(10, 6))
    sns.histplot(matching_similarities, kde=True, label="Matching Pairs", color="blue", bins=30)
    sns.histplot(unrelated_similarities, kde=True, label="Unrelated Pairs", color="red", bins=30)
    plt.title(f"{title}: Cosine Similarity Distributions")
    plt.xlabel("Cosine Similarity")
    plt.ylabel("Frequency")
    plt.legend()
    plt.show()

# ## b. 最近邻检索
def retrieval_metrics(query_embeds, target_embeds, ground_truth_indices, k=5):
    """计算最近邻检索的Precision@k和Recall@k。

此函数通过计算Precision@k和Recall@k来评估检索的有效性。Precision@k衡量前k个检索项的准确性，而Recall@k衡量在前k个检索项中找到相关项的能力。假设每个查询只有一个真实匹配。

参数：
    query_embeds (torch.Tensor): 查询数据的嵌入。
    target_embeds (torch.Tensor): 目标数据（数据库）的嵌入。
    ground_truth_indices (list): 目标数据中表示每个查询的真实匹配的索引列表。
    k (int): 要考虑的前k个结果的数量。

返回：
    tuple: 包含平均Precision@k和平均Recall@k的元组。"""
    similarities = cosine_similarity(query_embeds.cpu().numpy(), target_embeds.cpu().numpy())
    sorted_indices = np.argsort(-similarities, axis=1)[:, :k]  # 前k个索引

    # 计算指标
    precisions = []
    recalls = []
    for i, true_idx in enumerate(ground_truth_indices):
        retrieved_indices = sorted_indices[i]
        true_positives = int(true_idx in retrieved_indices)
        precisions.append(true_positives / k)
        recalls.append(true_positives / 1)  # 每个查询只有一个真实匹配

    mean_precision = np.mean(precisions)
    mean_recall = np.mean(recalls)

    return mean_precision, mean_recall

def plot_query_token_importance(
    pil_image,
    similarity_maps,
    query_tokens,
    alpha: float = 0.5
) -> None:
    """为similarity_maps中的每个查询标记绘制一个单独的热图。

参数：
    pil_image (PIL.Image.Image): 原始图像（例如，通过Image.open(...)加载）。
    similarity_maps (torch.Tensor): 
        形状 = (num_query_tokens, n_patches_x, n_patches_y)。
    query_tokens (List[str]): 查询中每个标记的字符串列表。
    alpha (float): 热图叠加的透明度（0=透明，1=不透明）。"""
    # 将 PIL 转换为 numpy
    image_np = np.array(pil_image)
    H, W = image_np.shape[:2]

    num_tokens = similarity_maps.size(0)
    assert num_tokens == len(query_tokens), (
        f"The number of query tokens in similarity_maps ({num_tokens}) "
        f"doesn't match the length of query_tokens list ({len(query_tokens)})."
    )

    fig, axs = plt.subplots(1, num_tokens, figsize=(5 * num_tokens, 5))
    if num_tokens == 1:
        # 如果只有一个标记，axs 将不是可迭代的
        axs = [axs]

    for idx in range(num_tokens):
        # 每个查询标记的相似性映射：形状 = (n_patches_x, n_patches_y)
        single_map = similarity_maps[idx]  # （n_patches_x, n_patches_y）

        # 上采样到完整图像大小
        single_map_4d = single_map.unsqueeze(0).unsqueeze(0)  # “(1,1,n_patches_x, n_patches_y)”
        upsampled = F.interpolate(
            single_map_4d,
            size=(H, W),
            mode='bilinear',
            align_corners=False
        )
        
        # .to(torch.float32) 修复如果你的映射是 bfloat16
        heatmap = upsampled.squeeze().to(torch.float32).cpu().numpy()  # “(高, 宽)”

        # 可选地归一化热图（如果需要，请取消注释）
        # heatmap = (heatmap - heatmap.min()) / (heatmap.max() - heatmap.min() + 1e-8)

        # 绘制
        axs[idx].imshow(image_np, cmap=None if image_np.ndim == 3 else 'gray')
        axs[idx].imshow(heatmap, cmap='jet', alpha=alpha)
        axs[idx].set_title(f"Query: {query_tokens[idx]}")
        axs[idx].axis('off')

    plt.tight_layout()
    plt.show()


def get_maps_and_embeds(batch_images, batch_queries, model, processor, image, use_qwen=False):
    """计算使用指定的模型和处理器从一批图像和查询中获取相似性图和嵌入。

参数:
    batch_images (dict): 由处理器处理的一批图像输入的字典。
    batch_queries (dict): 由处理器处理的一批查询输入的字典。
    model (nn.Module): 用于计算嵌入的模型。
    processor (Processor): 负责图像和文本预处理的处理器。

返回:
    tuple: 包含以下内容的元组：
        - original_maps (torch.Tensor): 图像和查询之间的相似性图，形状为 (num_queries, n_patches_x, n_patches_y)。
        - original_image_embeddings (torch.Tensor): 输入图像的嵌入。
        - original_query_embeddings (torch.Tensor): 输入查询的嵌入。"""
    with torch.no_grad():
        original_image_embeddings = model.forward(**batch_images)
        original_query_embeddings = model.forward(**batch_queries)
    if use_qwen:
        n_patches = processor.get_n_patches(image_size=image.size, patch_size=model.patch_size, spatial_merge_size=model.spatial_merge_size)
    else:
        n_patches = processor.get_n_patches(image_size=image.size, patch_size=model.patch_size)
    image_mask = processor.get_image_mask(batch_images)

    # 计算原始相似性图谱
    original_batched_maps = get_similarity_maps_from_embeddings(
        image_embeddings=original_image_embeddings,
        query_embeddings=original_query_embeddings,
        n_patches=n_patches,
        image_mask=image_mask,
    )
    original_maps = original_batched_maps[0]  # （query_length, n_patches_x, n_patches_y）
    return original_maps, original_image_embeddings, original_query_embeddings


def visualize_token_map(image, original_maps, token_list, token_index=2, cmap="Greens"):
    """以三种方式可视化一个token的注意力图：原始图像、带有数值的原始注意力图，以及在原始图像上叠加的注意力图。  
参数：  
    image (PIL.Image): 要可视化的输入图像。  
    original_maps (torch.Tensor 或 np.ndarray): 形状为 (num_tokens, height, width) 的注意力图。  
    token_list (list[str]): 对应每个注意力图的token字符串列表。  
    token_index (int, optional): 要可视化的token/图的索引。默认为2。  
    cmap (str, optional): 用于可视化注意力图的Matplotlib颜色映射名称。默认为"Greens"。  

该函数创建一个包含三个子图的图形：  
1. 原始输入图像  
2. 带有数值标注的原始注意力图  
3. 在原始图像上叠加的注意力图，并带有颜色条  

返回：  
    无。使用matplotlib显示可视化结果。"""
    # 将图像转换为NumPy数组
    image_np = np.array(image)

    # 选择与标记对应的映射
    visual_map = original_maps[token_index]

    # 如果 visual_map 是张量，则将其转换为 NumPy 数组
    if isinstance(visual_map, torch.Tensor):
        visual_map = visual_map.cpu().to(dtype=torch.float32).numpy()
    elif not isinstance(visual_map, np.ndarray):
        visual_map = np.array(visual_map)

    # 将地图转换为PIL图像
    visual_map_pil = Image.fromarray(visual_map)

    # 使用最近邻缩放以保持“大像素”
    visual_map_pil = visual_map_pil.resize(
        (image_np.shape[1], image_np.shape[0]),  # （宽度，高度）
        resample=Image.NEAREST
    )

    # 转换回NumPy
    resized_map = np.array(visual_map_pil)

    # 创建一个带子图的图形
    fig, axes = plt.subplots(1, 3, figsize=(15, 6))

    # 显示原始图像
    axes[0].imshow(image_np)
    axes[0].set_title("Raw Image")
    axes[0].axis("off")
    # 显示带注释的原始地图
    im = axes[1].imshow(visual_map, cmap=cmap)
    axes[1].set_title("Raw Map")
    axes[1].axis("off")

    # 为热图添加注释
    for i in range(visual_map.shape[0]):
        for j in range(visual_map.shape[1]):
            text = axes[1].text(j, i, f"{visual_map[i, j]:.2f}",
                           ha="center", va="center", color="w" if visual_map[i, j] > visual_map.max() / 2 else "black")

    # 显示叠加图
    axes[2].imshow(image_np, alpha=1)
    axes[2].imshow(resized_map, cmap=cmap, alpha=0.6)
    axes[2].set_title("Overlay: Image + Map")
    axes[2].axis("off")
    # 为叠加图添加一个颜色条，其值与原始地图匹配
    cbar = fig.colorbar(plt.cm.ScalarMappable(cmap=cmap, norm=plt.Normalize(vmin=visual_map.min(), vmax=visual_map.max())), ax=axes[2], shrink=0.8, orientation="vertical")
    cbar.set_label("Map Intensity")
    # 添加一个带有标记名称的标题
    plt.suptitle(f"Token: {token_list[token_index]}")

    # 调整布局并显示
    plt.tight_layout()
    plt.show()



def create_single_patch_image(
    n_patches_x, n_patches_y, patch_size, main_color, special_color, special_patch, special_patch_width=2,
):
    """
    Creates an image composed of colored patches, with one special patch highlighted.

    The image is divided into a grid of n_patches_x by n_patches_y patches, each of size
    patch_size x patch_size pixels. All patches are filled with the main_color, except
    for the special_patch, which is filled with special_color.  The special patch can
    also have a width of more than one patch.
    Args:
        n_patches_x (int): Number of patches horizontally.
        n_patches_y (int): Number of patches vertically.
        patch_size (int): The size (in pixels) of each square patch.
        main_color (list): The [R, G, B] color for most patches.
        special_color (list): The [R, G, B] color for the special patch.
        special_patch (tuple): The (row, col) position of the top-left corner of the special patch (0-indexed).
        special_patch_width (int, optional): The width of the special patch in number of patches. Defaults to 2.

    Returns:
        PIL Image: The generated image.
    """

    # 为图像创建一个3D NumPy数组
    img_height = n_patches_y * patch_size
    img_width = n_patches_x * patch_size
    image_data = np.zeros((img_height, img_width, 3), dtype=np.uint8)

    # 用主色填充整个图像
    image_data[:, :] = main_color

    # 将特殊颜色分配给特殊区域
    special_row, special_col = special_patch
    image_data[
        special_row * patch_size : (special_row + special_patch_width) * patch_size,
        special_col * patch_size : (special_col + special_patch_width) * patch_size
    ] = special_color

    return Image.fromarray(image_data)


def extract_patch_mask(image, patch_size, special_color=[0, 0, 0]):
    """提取一个二进制掩码，指示特殊补丁的位置。

参数：
    image (PIL.Image.Image): 输入图像。
    patch_size (int): 每个方形补丁的大小，以像素为单位。
    special_color (list[int]): 特殊补丁的RGB颜色。

返回：
    np.ndarray: 形状为 (n_patches_y, n_patches_x) 的二进制掩码，指示特殊补丁的位置（1表示特殊补丁，0表示其他）。"""
    # 将图像转换为NumPy数组
    image_np = np.array(image)

    # 获取图像尺寸
    img_height, img_width, _ = image_np.shape

    # 计算块的数量
    n_patches_y = img_height // patch_size
    n_patches_x = img_width // patch_size

    # 初始化补丁掩码
    patch_mask = np.zeros((n_patches_y, n_patches_x), dtype=np.int32)

    # 遍历所有补丁以定位特殊补丁
    for row in range(n_patches_y):
        for col in range(n_patches_x):
            # 提取补丁
            patch = image_np[
                row * patch_size : (row + 1) * patch_size,
                col * patch_size : (col + 1) * patch_size
            ]

            # 检查该图块是否与特殊颜色匹配
            if np.allclose(patch.mean(axis=(0, 1)), special_color, atol=1e-6):
                patch_mask[row, col] = 1  # 将此补丁标记为特殊

    return patch_mask


def evaluate_map_quality(similarity_map, patch_mask):
    """评估相似性图相对于二进制补丁掩码的质量。

参数：
    similarity_map (np.ndarray): 相似性图（高度，宽度）。
    patch_mask (np.ndarray): 补丁的二进制掩码（1表示黑色补丁，其他地方为0）。

返回：
    dict: 包括相关性、峰值准确性和重叠得分的指标。"""
    # 将映射和掩码展平以便于计算
    sim_map_flat = similarity_map.flatten()
    patch_mask_flat = patch_mask.flatten()
    
    # （A）相关性
    correlation = np.corrcoef(sim_map_flat, patch_mask_flat)[0, 1]
    
    # (B) 峰值信号位置
    max_location = np.unravel_index(np.argmax(similarity_map), similarity_map.shape)
    expected_location = np.unravel_index(np.argmax(patch_mask), patch_mask.shape)
    peak_accuracy = 1 if max_location == expected_location else 0
    
    # “(C) 归一化地图重叠”
    black_patch_score = similarity_map[patch_mask == 1].mean()
    background_score = similarity_map[patch_mask == 0].mean()
    overlap_score = black_patch_score / (background_score + 1e-8)  # 避免除以零
    
    # 返回所有指标
    return {
        "correlation": correlation,
        "peak_accuracy": peak_accuracy,
        "overlap_score": overlap_score,
    }

def create_single_patch_image_with_text(
    n_patches_x,
    n_patches_y,
    patch_size,
    main_color,
    special_color,
    special_patch,
    text="Hello",
    text_color=(255, 255, 255),
    special_patch_width=2,
    font_size=16,
):
    """创建一个由彩色块组成的图像，但在“特殊”块区域内放置一个单词（或文本）。"""
    # 为图像创建一个3D NumPy数组
    img_height = n_patches_y * patch_size
    img_width = n_patches_x * patch_size
    image_data = np.zeros((img_height, img_width, 3), dtype=np.uint8)

    # 用主色填充整个图像
    image_data[:, :] = main_color

    # 将特殊颜色分配给特殊的补丁区域
    special_row, special_col = special_patch
    image_data[
        special_row * patch_size : (special_row + special_patch_width) * patch_size,
        special_col * patch_size : (special_col + special_patch_width) * patch_size
    ] = special_color

    # 转换为 Pillow 图像以便我们可以在上面绘图
    img = Image.fromarray(image_data)
    draw = ImageDraw.Draw(img)

    # 加载指定大小的字体
    try:
        url = "https://github.com/google/fonts/raw/main/apache/roboto/Roboto-Regular.ttf"
        response = requests.get(url)
        font_path = "Roboto-Regular.ttf"        
        with open(font_path, "wb") as font_file:
            font_file.write(response.content)
        
                
        font = ImageFont.truetype(font_path, font_size)
    except IOError:
        font = ImageFont.load_default()
    # 计算特殊补丁在像素坐标中的中心位置
    patch_center_x = (
        special_col * patch_size
        + (special_patch_width * patch_size) // 2
    )
    patch_center_y = (
        special_row * patch_size
        + (special_patch_width * patch_size) // 2
    )

    # 计算文本边界框以使文本居中
    text_bbox = draw.textbbox((0, 0), text, font=font)
    text_width = text_bbox[2] - text_bbox[0]
    text_height = text_bbox[3] - text_bbox[1]

    text_x = patch_center_x - text_width // 2
    text_y = patch_center_y - text_height // 2

    # 将文本放置在特殊补丁的中心位置
    draw.text((text_x, text_y), text, fill=text_color, font=font)

    return img

def write_on_images(font_size=16):

    # 导入PIL库
    from PIL import Image
    from PIL import ImageDraw
    
    # 打开图像
    img = Image.open('kirby.jpeg')
    
    # 调用 draw 方法在图像中添加二维图形
    I1 = ImageDraw.Draw(img)
    
    # 在图像上添加文本
    I1.text((28, 36), "nice Car", fill=(255, 0, 0), font=ImageFont.truetype("arial.ttf", font_size))
    
    # 显示编辑后的图像
    img.show()
    
    # 保存编辑后的图像
    img.save("car2.png")