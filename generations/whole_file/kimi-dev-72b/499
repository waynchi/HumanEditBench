from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import matplotlib.pyplot as plt
import numpy as np

def cluster_data(features_transformed, cluster_columns, n_clusters=2, clustering_method='kmeans'):
    """Realiza la agrupación de datos de manera independiente para los conjuntos de columnas especificados.

    Args:
        features_transformed (pandas.DataFrame): DataFrame transformado con parámetros.
        cluster_columns (dict): Diccionario donde las claves son los nombres de las nuevas columnas de etiquetas de clústeres,
                                y los valores son las listas de columnas a utilizar para la clusterización.
        n_clusters (int): Número de clústeres.
        clustering_method (str): Método de agrupación ('kmeans').

    Returns:
        pandas.DataFrame: DataFrame con las columnas de etiquetas de clústeres añadidas."""
    if features_transformed is None:
        print("Сначала выполните преобразование данных (этап 5).")
        return None

    for cluster_label, columns in cluster_columns.items():
        features_for_clustering = features_transformed[columns].copy()

        if clustering_method == 'kmeans':
            model = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
            cluster_labels = model.fit_predict(features_for_clustering)
            
            # Evaluación de la calidad de la agrupación (por ejemplo, utilizando el coeficiente de silueta)
            if len(np.unique(cluster_labels)) > 1: # Comprobación para el caso en que todos los puntos se asignan a un solo clúster
                silhouette_avg = silhouette_score(features_for_clustering, cluster_labels)
                print(f"Коэффициент силуэта для {n_clusters} кластеров в колонке {cluster_label}: {silhouette_avg:.4f}")
            else:
                print(f"Невозможно рассчитать коэффициент силуэта для {n_clusters} кластера в колонке {cluster_label} (все точки в одном кластере).")

            features_transformed[cluster_label] = cluster_labels
            print(f"Кластеризация выполнена. Метки кластеров добавлены в столбец '{cluster_label}'.")

        else:
            print("Неподдерживаемый метод кластеризации.")
            return None

    return features_transformed

# Ejecución de la clusterización (después de la etapa 5 y antes de la etapa 6)
if 'features_transformed' in locals() and features_transformed is not None:
    cluster_columns = {'cluster1': ['column1', 'column2'], 'cluster2': ['column3']}  # Especificación de columnas para clusterización
    n_clusters = 3  # Cantidad de clústeres (seleccione el valor óptimo)
    features_transformed = cluster_data(features_transformed, cluster_columns, n_clusters)
    
    # Visualización de los clústeres (ejemplo para el caso cuando hay 2 características numéricas)
    numerical_features = features_transformed.select_dtypes(include=np.number)
    if numerical_features.shape[1] >= 2:
        plt.figure(figsize=(8, 6))
        plt.scatter(numerical_features.iloc[:, 0], numerical_features.iloc[:, 1], c=features_transformed[cluster_columns['cluster1']], cmap='viridis')
        plt.xlabel(numerical_features.columns[0])
        plt.ylabel(numerical_features.columns[1])
        plt.title('Результаты кластеризации')
        plt.colorbar(label='Номер кластера')
        plt.show()
    else:
        print("Недостаточно числовых признаков для визуализации кластеров на плоскости.")
else:
    print("Сначала выполните этап 5 (Преобразование данных).")