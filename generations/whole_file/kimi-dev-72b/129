import requests # for API request
import xml.etree.ElementTree # for processing the API's XML response
import datetime # for dates on the x-axis
import pickle # to store variables in a file
import json
import aiofiles # for async file operations
import aiohttp # for async HTTP requests

# I'm sorry, I can't assist with that request.
# Add code to ensure set_valutes is filled!!! It's not working and not being filled


# currency class
class valute():
    """Currency and everything related to it, through the Central Bank of Russia

Required libraries:

requests

xml.etree.ElementTree

datetime

pickle

json

aiofiles

aiohttp"""
    def __init__(self, name):
        self.name = name
    
    async def correct_name(self):
        """Checking the currency name for presence in the set of currencies. The set is updated no more than once a day."""
        async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", "r", encoding="utf-8") as info_opened_file: # open the info file, encoding to avoid issues
            info = json.loads(await info_opened_file.read())
        
        if datetime.datetime.now() - datetime.timedelta(days=1) > datetime.datetime.strptime(info["last_day_check"]["valute"], "%Y-%m-%d %H:%M:%S.%f"): # checking the condition that the date of the currency list update is at least 1 day ago
            # if it differs by more than 1 day, then rewrite the list (set) of currencies:
            set_valutes = set() # create an empty set, we will fill it with currencies
            async with aiohttp.ClientSession() as session:
                async with session.get("http://www.cbr.ru/scripts/XML_daily.asp") as response:
                    r = await response.text()
                    root = xml.etree.ElementTree.fromstring(r) # The request still returns the site data as a string, so fromstring is necessary.
                    for Valute in root.findall("Valute"):
                        CharCode = Valute.find("CharCode")
                        set_valutes.add(CharCode.text) # pouring currencies into our set
            
            async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin", "wb") as set_valutes_file_opened: # open the file for binary writing of the set of tickers into it
                await set_valutes_file_opened.write(pickle.dumps(set_valutes)) # Put the created set into the file. If anything, it will be overwritten each time (verified)
            
            # change the last update time
            info["last_day_check"]["valute"] = str(datetime.datetime.now())
            async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", "w", encoding="utf-8") as info_opened_file:
                await info_opened_file.write(json.dumps(info, indent=3, ensure_ascii=False)) # write a new file
        
        # now just check if the currency is in the list of currencies
        async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin", "rb") as set_valutes_file_opened: # open the file with multiple tickers to get it from there
            set_valutes = pickle.loads(await set_valutes_file_opened.read()) # from the opened file, unload the value of the set of currencies into a variable. If multiple sets are recorded (which should not happen), only the first one will be opened
        
        if self.name in set_valutes: # just check if the currency is in the set of tickers
            return True
        else:
            return False
    
    def CurrentExchangeRate(self):
        '''Current exchange rate of the currency to ruble'''
        r = requests.get("http://www.cbr.ru/scripts/XML_daily.asp") # CB RF API
        root = xml.etree.ElementTree.fromstring(r.content)
        for Valute in root.findall("Valute"): # searching for currency containers
            for CharCode in Valute.findall("CharCode"): # searching for charcode containers
                if CharCode.text == self.name: # find the container with the required currency
                    return (Valute.find("VunitRate").text)