class SimpleConvNet1(nn.Module):
    def __init__(self, input_channels, image_size):  # 修改参数接收方式
        super().__init__()

        self.conv1 = nn.Sequential(
            nn.Conv2d(input_channels, 32, 3),
            nn.ReLU(),
            nn.MaxPool2d(2)
        )

        self.conv2 = nn.Sequential(
            nn.Conv2d(32, 64, 3),
            nn.ReLU(),
            nn.MaxPool2d(2)
        )

        # 计算经过卷积和池化后的特征图大小
        conv1_output_size = (image_size - 2) // 2  # 第一个卷积层和池化层后的输出尺寸
        conv2_output_size = (conv1_output_size - 2) // 2  # 第二个卷积层和池化层后的输出尺寸
        flattened_size = 64 * conv2_output_size * conv2_output_size  # 计算平坦化后的大小

        self.flatten = nn.Flatten()
        self.fc1 = nn.Sequential(
            nn.Linear(flattened_size, 512),  # 使用计算出的平坦化大小
            nn.ReLU(),
            nn.Linear(512, 3)
        )

    def forward(self, x):
        x = self.conv1(x)
        x = self.conv2(x)
        x = self.flatten(x)
        x = self.fc1(x)
        return x