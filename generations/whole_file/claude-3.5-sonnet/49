def create_matrix(rows: int, cols: int, fill_value=0) -> list:
    """
    Создает матрицу размера rows x cols, заполненную значением fill_value.
    """
    return [[fill_value for _ in range(cols)] for _ in range(rows)]

def add_matrices(matrix_a: list, matrix_b: list) -> list:
    """
    Складывает две матрицы одинакового размера.
    """
    if len(matrix_a) != len(matrix_b) or len(matrix_a[0]) != len(matrix_b[0]):
        raise ValueError("Matrices must have the same dimensions")
    return [[matrix_a[i][j] + matrix_b[i][j] 
            for j in range(len(matrix_a[0]))] 
            for i in range(len(matrix_a))]

def scalar_multiply(matrix: list, scalar: float) -> list:
    """
    Умножает все элементы матрицы на скаляр.
    """
    return [[scalar * matrix[i][j] 
            for j in range(len(matrix[0]))] 
            for i in range(len(matrix))]

def multiply_matrices(matrix_a: list, matrix_b: list) -> list:
    """
    Перемножает две матрицы.
    """
    if len(matrix_a[0]) != len(matrix_b):
        raise ValueError("Number of columns in first matrix must equal number of rows in second matrix")
        
    result = [[0 for _ in range(len(matrix_b[0]))] for _ in range(len(matrix_a))]
    
    for i in range(len(matrix_a)):
        for j in range(len(matrix_b[0])):
            for k in range(len(matrix_b)):
                result[i][j] += matrix_a[i][k] * matrix_b[k][j]
    
    return result

def transpose_matrix(matrix: list) -> list:
    """
    Транспонирует матрицу.
    """
    return [[matrix[j][i] for j in range(len(matrix))] 
            for i in range(len(matrix[0]))]

def determinant_3x3(matrix: list) -> float:
    """
    Вычисляет определитель матрицы 3x3.
    """
    if len(matrix) != 3 or any(len(row) != 3 for row in matrix):
        raise ValueError("Matrix must be 3x3")
        
    a, b, c = matrix[0]
    d, e, f = matrix[1]
    g, h, i = matrix[2]
    
    return (a * (e * i - f * h) - 
            b * (d * i - f * g) + 
            c * (d * h - e * g))