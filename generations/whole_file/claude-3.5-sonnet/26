Based on the request to create a conjugate gradient method function in Python, here's an implementation:
python
import numpy as np

def conjugate_gradient(A, b, x0=None, tol=1e-10, max_iter=1000):
    """
    Solve system of linear equations Ax = b using conjugate gradient method.
    
    Parameters:
    A : numpy array, shape (n,n)
        Symmetric positive definite matrix
    b : numpy array, shape (n,)
        Right hand side vector
    x0 : numpy array, shape (n,), optional
        Initial guess for the solution
    tol : float, optional
        Tolerance for convergence
    max_iter : int, optional
        Maximum number of iterations
        
    Returns:
    x : numpy array, shape (n,)
        Solution to the system of equations
    """
    n = len(b)
    if x0 is None:
        x = np.zeros(n)
    else:
        x = x0.copy()
    
    r = b - A.dot(x)
    p = r.copy()
    r_norm_sq = r.dot(r)
    
    for i in range(max_iter):
        Ap = A.dot(p)
        alpha = r_norm_sq / p.dot(Ap)
        x += alpha * p
        r -= alpha * Ap
        r_norm_sq_new = r.dot(r)
        
        if np.sqrt(r_norm_sq_new) < tol:
            break
            
        beta = r_norm_sq_new / r_norm_sq
        r_norm_sq = r_norm_sq_new
        p = r + beta * p
        
    return x