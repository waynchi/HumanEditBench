def is_sum_of_four_squares(n):
    if n < 0:
        return False
    # Optimize by only checking up to sqrt(n) for each variable
    sqrt_n = int(n**0.5) + 1
    for a in range(1, sqrt_n):  # Start from 1 to avoid zeros
        for b in range(1, sqrt_n):  # Start from 1 to avoid zeros
            for c in range(1, sqrt_n):  # Start from 1 to avoid zeros
                # Calculate what d^2 would need to be
                d_squared = n - (a*a + b*b + c*c)
                if d_squared > 0:  # Only check if d^2 is positive
                    d = int(d_squared**0.5)
                    if d > 0 and d*d == d_squared:  # Check if d is non-zero and perfect square
                        return a, b, c, d
    return None

def find_four_squares_sums(limit):
    """
    Finds numbers up to a limit that can be expressed as the sum of four squares
    without any of the squares being zero.
    """
    results = []
    for n in range(1, limit + 1):
        result = is_sum_of_four_squares(n)
        if result:
            results.append(n)
    return results

# Example usage:
limit = int(input("Digite o limite superior: "))
sums_found = find_four_squares_sums(limit)
print("Números que podem ser expressos como a soma de quatro quadrados não nulos:")
for num in sums_found:
    result = is_sum_of_four_squares(num)
    a, b, c, d = result
    print(f"{num} = {a}^2 + {b}^2 + {c}^2 + {d}^2")