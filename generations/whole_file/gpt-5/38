# Папка со всеми фотографиями / папка с фотографиями для тренировки
TRAIN_DIR = os.path.join(DATA_PATH, "train")

# Считываем названия директорий (только папки-классы), которые и являются видом затмения
class_names = [
    name for name in sorted(os.listdir(TRAIN_DIR))
    if os.path.isdir(os.path.join(TRAIN_DIR, name)) and not name.startswith(".")
]
ECLIPSE_LIST = {i: name for i, name in enumerate(class_names)}

# Папка с фотографиями для валидации
VAL_DIR = os.path.join(DATA_PATH, "val")
os.makedirs(VAL_DIR, exist_ok=True)

# Папка с фотографиями для теста
TEST_DIR = os.path.join(DATA_PATH, "test")

# Доля изображений в валидации
VAL_FRAC = 0.3

# Генератор случайных чисел для детерминированного разбиения
rng = np.random.default_rng(42)

# Создаем директорию с валидационной выборкой для каждого вида затмения.
for eclipse in ECLIPSE_LIST.values():
    os.makedirs(os.path.join(VAL_DIR, eclipse), exist_ok=True)

    # Считываем выборку изображений (только файлы), сортируем для детерминированности
    eclipse_path = os.path.join(TRAIN_DIR, eclipse)
    images_filename = sorted(
        [
            f for f in os.listdir(eclipse_path)
            if os.path.isfile(os.path.join(eclipse_path, f)) and not f.startswith(".")
        ]
    )

    # Выделяем часть изображений для валидации
    num_images = len(images_filename)
    num_val = int(num_images * VAL_FRAC)

    if num_images == 0 or num_val == 0:
        print(f'{eclipse} | train images = {num_images} | val images = 0')
        continue

    # Выбираем случайные изображения из выборки для валидации с установленным random_state
    perm = rng.permutation(num_images)
    val_indices = perm[:num_val]
    val_images = [images_filename[i] for i in val_indices]

    print(f'{eclipse} | train images = {num_images - num_val} | val images = {num_val}')

    # Перемещаем валидационную выборку из train в val
    for image_filename in val_images:
        source = os.path.join(TRAIN_DIR, eclipse, image_filename)
        destination = os.path.join(VAL_DIR, eclipse, image_filename)
        shutil.move(source, destination)