import math
class Value:
    """ stores a single scalar value and its gradient """

    def __init__(self, data, _children=(), _op=''):
        self.data = data
        self.grad = 0
        # internal variables used for autograd graph construction
        self._backward = lambda: None
        self._prev = set(_children)
        self._op = _op # the op that produced this node, for graphviz / debugging / etc

    def __add__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data + other.data, (self, other), '+')

        def _backward():
            self.grad += out.grad
            other.grad += out.grad
        out._backward = _backward

        return out

    def __mul__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data * other.data, (self, other), '*')

        def _backward():
            self.grad += other.data * out.grad
            other.grad += self.data * out.grad
        out._backward = _backward

        return out

    def __pow__(self, other):
        assert isinstance(other, (int, float)), "only supporting int/float powers for now"
        out = Value(self.data**other, (self,), f'**{other}')

        def _backward():
            self.grad += (other * self.data**(other-1)) * out.grad
        out._backward = _backward

        return out


        print(f'** EXP {self}')
        out = Value(math.exp(self.data), (self,), "e")
        def _backward():
            self.grad += math.exp(self.data) * out.grad
        out._backward = _backward
        
        return out
    
    def log(self):
        out = Value(math.log(self.data), (self,), f'log{self.data}')
        def _backward():
            self.grad += 1 / self.data
        out._backward = _backward       
        
        return out
    
    def relu(self):
        assert isinstance(self.data, (int, float)), "only supporting int/float powers for now"
        out = Value(0 if self.data < 0 else self.data, (self,), 'ReLU')

        def _backward():
            self.grad += (out.data > 0) * out.grad
        out._backward = _backward

        return out
    
    def softmax(x):
        e_x = np.exp(x - np.max(x))

    def backward(self):

        # topological order all of the children in the graph
        topo = []
        visited = set()
        def build_topo(v):
            if v not in visited:
                visited.add(v)
                for child in v._prev:
                    build_topo(child)
                topo.append(v)
        build_topo(self)

        # go one variable at a time and apply the chain rule to get its gradient
        self.grad = 1
        for v in reversed(topo):
            v._backward()

    def __neg__(self): # -self
        return self * -1
    def __gt__(self, other):
        return self.data > other.data

    def __radd__(self, other): # other + self
        return self + other

    def __sub__(self, other): # self - other
        return self + (-other)

    def __rsub__(self, other): # other - self
        return other + (-self)

    def __rmul__(self, other): # other * self
        return self * other

    def __truediv__(self, other): # self / other
        return self * other**-1

    def __rtruediv__(self, other): # other / self
        return other * self**-1

    def __repr__(self):
        return f"Value(data={self.data}, grad={self.grad})"


# Functions to differentiate the softmax function

def softmax_stable(xs):
    """
    Numerically stable softmax for a 1D iterable of logits.
    Returns a list of probabilities that sum to 1.
    """
    xs = list(xs)
    m = max(xs)
    exps = [math.exp(x - m) for x in xs]
    s = sum(exps)
    return [e / s for e in exps]


def softmax_jacobian(softmax_out):
    """
    Return the Jacobian matrix of the softmax at the given output vector.
    softmax_out: iterable of softmax probabilities (sum to 1, each in (0,1))
    J[i][j] = y_i * (delta_ij - y_j)
    """
    y = list(softmax_out)
    n = len(y)
    J = [[0.0] * n for _ in range(n)]
    for i in range(n):
        for j in range(n):
            if i == j:
                J[i][j] = y[i] * (1.0 - y[i])
            else:
                J[i][j] = -y[i] * y[j]
    return J


def softmax_backward(softmax_out, grad_out):
    """
    Compute the gradient of a scalar loss w.r.t. the logits, given:
      - softmax_out: the softmax probabilities y = softmax(z)
      - grad_out: upstream gradient dL/dy (same length as y)
    Uses: dL/dz = (diag(y) - y y^T) @ dL/dy
         => (dL/dz)_i = y_i * ( (dL/dy)_i - sum_j y_j * (dL/dy)_j )
    Returns a list representing dL/dz.
    """
    y = list(softmax_out)
    g = list(grad_out)
    dot = sum(yi * gi for yi, gi in zip(y, g))
    return [yi * (gi - dot) for yi, gi in zip(y, g)]


def d_softmax_wrt_logits(logits, grad_out):
    """
    Convenience wrapper: given logits and upstream gradient dL/dy,
    compute dL/dz where z are the logits.
    """
    y = softmax_stable(logits)
    return softmax_backward(y, grad_out)