import tkinter as tk
import random

def random_color():
    # Generate bright-ish colors to make squares clearly visible
    return "#{:02x}{:02x}{:02x}".format(
        random.randint(80, 255),
        random.randint(80, 255),
        random.randint(80, 255)
    )

def get_canvas_size(canvas):
    # Robustly determine canvas size even before the window is fully realized
    w = canvas.winfo_width()
    h = canvas.winfo_height()
    if w <= 1 or h <= 1:
        try:
            w = int(canvas['width'])
            h = int(canvas['height'])
        except Exception:
            w = canvas.winfo_reqwidth()
            h = canvas.winfo_reqheight()
    return w, h

class Square:
    def __init__(self, canvas, size, x, y):
        self.canvas = canvas
        self.size = size
        self.x = x
        self.y = y
        self.dx = random.choice([-2, 2])
        self.dy = random.choice([-2, 2])
        self.color = random_color()
        self.square = canvas.create_rectangle(
            x, y, x + size, y + size, fill=self.color, outline="black"
        )

    def move(self):
        self.x += self.dx
        self.y += self.dy
        self.canvas.move(self.square, self.dx, self.dy)
        
        # Check boundaries (handle early stage when canvas size can be 1x1)
        canvas_width, canvas_height = get_canvas_size(self.canvas)
        
        if (self.x <= 0 or self.x + self.size >= canvas_width or 
            self.y <= 0 or self.y + self.size >= canvas_height):
            # Delete current square
            self.canvas.delete(self.square)
            # Create two new squares if size is big enough
            if self.size > 10:
                new_size = self.size / 2
                cx = canvas_width / 2
                cy = canvas_height / 2
                squares.append(Square(self.canvas, new_size, cx - new_size - 2, cy - new_size - 2))
                squares.append(Square(self.canvas, new_size, cx + 2, cy + 2))
            return False
        return True

def update():
    global squares
    # Move all squares and remove those that hit boundaries
    squares = [square for square in squares if square.move()]
    root.after(20, update)  # Update every 20ms

# Create main window
root = tk.Tk()
root.title("Splitting Squares")

# Create canvas
canvas = tk.Canvas(root, width=600, height=600, bg="white")
canvas.pack(expand=True, fill="both")

# Create initial square
squares = [Square(canvas, 100, 250, 250)]

# Start animation
update()

# Start main loop
root.mainloop()