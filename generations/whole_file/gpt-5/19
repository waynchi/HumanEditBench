plik = open("dane_obrazki.txt")
maxbitybledne = 0
bityBledne = list()
def czyPoprawny(obrazek): # obrzek zawiera liste łancuchów znaków  i można korzystać z operatora balicowego
                            # obrazek[i][j]
    for wiersz in obrazek[:-1]: # nie liczymy z ostaniego wiersza tam są bity parzystosci
        if wiersz[:-1].count('1') % 2 != int(wiersz[-1]):
            return False
    for i in range(20): # i = 0,1,2,3,4,5,6,7..19
        kolumna = ""
        for j in range(21):  # j = 0,1,2,3,4,5,..20
            kolumna+=obrazek[j][i]
        if kolumna[:-1].count('1')% 2 != int(kolumna[-1]):
            return False
    return True

def czyNaprawialny(obrazek):
    bityKolBleden = 0
    bityWierBledne = 0
    for wiersz in obrazek[:-1]: # nie liczymy z ostaniego wiersza tam są bity parzystosci
        if wiersz[:-1].count('1') % 2 != int(wiersz[-1]):
            bityWierBledne+=1
    for i in range(20): # i = 0,1,2,3,4,5,6,7..19
        kolumna = ""
        for j in range(21):  # j = 0,1,2,3,4,5,..20
            kolumna+=obrazek[j][i]
        if kolumna[:-1].count('1')% 2 != int(kolumna[-1]):
           bityKolBleden+=1
    global maxbitybledne
    if maxbitybledne<(bityKolBleden+bityWierBledne):
        maxbitybledne = bityKolBleden+bityWierBledne
    bityBledne.append(bityKolBleden+bityWierBledne)

    if bityWierBledne >1 :
        return False
    if bityKolBleden > 1:
        return False

    return True

def napraw(obrazek):
    """Wejście stanowi plik tekstowy zawierający dane czarnobiałego obrazka zakodowane jaki piksele.
0 - piksel biały 1 - piksel czarny. 
Każdy wiersz oraz kolumna zwiera na swoim końcu bit parzystości . 
Bit parzystości jest równy 0, jeśli ilość jedynek w wierszy (lub w kolumnie dla kolumn) jest parzysta a 
1 jeśli jest nieparzysta.
np.
0 1 1 0 1 1 bit błędny należy zmienić go na przeciwny
1 1 1 0 1 0
1 1 1 1 1 1
0 1 1 0 0 0
1 1 0 1 1 0
1 1 0 0 0 - bity parzystości kolumny 
 ^
 |- bity parzystości wiersza
Napisz funkcje który znajdzie uszkodzone obrazki oraz je naprawi . tzn Jest to obrazek naprawialny ( 
posiada co najwyżej jeden bit parzystości wiersza i co najwyżej jeden bit parzystości kolumny 
niepoprawny ) a następnie naprawi te obrazy 
Wynik ma zawierać obrazek błędny(naprawialny) oraz obrazek poprawiony"""
    # Kopia oryginalnego obrazka (lista łańcuchów)
    bledny = [wiersz[:] for wiersz in obrazek]

    # Znajdź błędne wiersze (0..19) i błędne kolumny (0..19)
    bledne_wiersze = []
    for r in range(20):
        if obrazek[r][:-1].count('1') % 2 != int(obrazek[r][-1]):
            bledne_wiersze.append(r)

    bledne_kolumny = []
    for c in range(20):
        kolumna_liczba_jedynek = sum(1 for r in range(21) if obrazek[r][c] == '1')
        if kolumna_liczba_jedynek % 2 != int(obrazek[20][c]):
            bledne_kolumny.append(c)

    # Przygotuj strukturę do modyfikacji
    naprawiony_tab = [list(wiersz) for wiersz in obrazek]

    def flip(r, c):
        naprawiony_tab[r][c] = '1' if naprawiony_tab[r][c] == '0' else '0'

    # Przypadki naprawy:
    # 1) Dokładnie jeden błędny wiersz i jedna błędna kolumna -> błąd w pikselu danych na przecięciu
    if len(bledne_wiersze) == 1 and len(bledne_kolumny) == 1:
        flip(bledne_wiersze[0], bledne_kolumny[0])
    # 2) Tylko jeden błędny wiersz -> błąd w bicie parzystości tego wiersza (kolumna 20)
    elif len(bledne_wiersze) == 1 and len(bledne_kolumny) == 0:
        flip(bledne_wiersze[0], 20)
    # 3) Tylko jedna błędna kolumna -> błąd w bicie parzystości tej kolumny (wiersz 20)
    elif len(bledne_wiersze) == 0 and len(bledne_kolumny) == 1:
        flip(20, bledne_kolumny[0])
    # 4) Brak błędów lub przypadek nienaprawialny w tej logice -> pozostaw bez zmian

    naprawiony = [''.join(w) for w in naprawiony_tab]

    wynik = [bledny, naprawiony]
    return wynik

poprawne = 0
naprawialne = 0
obrazek = list()
for linia in plik:
    wiersz = linia.strip() # odcinamy białe znaki np enter
   # wiersz = wiersz[:-1]  # tylko dane obrazka bez bitu parzystosci  teraz czytamy cala wiersz danych
    obrazek.append(wiersz)
    if len(obrazek) == 21: # mamy 21 lini czyli cały obrazek razem z wierszam bitów parzystosci
        if czyPoprawny(obrazek):
            poprawne+=1
        elif czyNaprawialny(obrazek):
            naprawialne+=1
            naprawiony = napraw(obrazek)


    if len(obrazek) == 22:  # po 22 lini czyscimy obrazek by czytać wiersze nastepnego obrazka
        obrazek = list()

print(poprawne,naprawialne,200-poprawne-naprawialne)
print(maxbitybledne,max(bityBledne))