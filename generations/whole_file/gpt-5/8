from math import isqrt

def is_sum_of_four_squares(n):
    if n < 4:
        return None
    # Search only positive integers (non-zero squares)
    for a in range(1, isqrt(n) + 1):
        a2 = a * a
        rem1 = n - a2
        if rem1 <= 0:
            continue
        for b in range(1, isqrt(rem1) + 1):
            b2 = b * b
            rem2 = rem1 - b2
            if rem2 <= 0:
                continue
            for c in range(1, isqrt(rem2) + 1):
                c2 = c * c
                rem3 = rem2 - c2
                if rem3 <= 0:
                    continue
                d = isqrt(rem3)
                if d > 0 and d * d == rem3:
                    return a, b, c, d
    return None

def find_four_squares_sums(limit):
    """
    Finds numbers up to a limit that can be expressed as the sum of four squares
    without any of the squares being zero.
    """
    results = []
    for n in range(1, limit + 1):
        result = is_sum_of_four_squares(n)
        if result:
            a, b, c, d = result
            if a != 0 and b != 0 and c != 0 and d != 0:
                results.append(n)
    return results

# Example usage:
limit = int(input("Digite o limite superior: "))
sums_found = find_four_squares_sums(limit)
print("Números que podem ser expressos como a soma de quatro quadrados não nulos:")
for num in sums_found:
    result = is_sum_of_four_squares(num)
    a, b, c, d = result
    print(f"{num} = {a}^2 + {b}^2 + {c}^2 + {d}^2")