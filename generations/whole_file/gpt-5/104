class Graph:
    def __init__(self):
        self.adjacency_list = {}

    def add_vertex(self, vertex):
        if vertex not in self.adjacency_list:
            self.adjacency_list[vertex] = []

    def add_edge(self, vertex1, vertex2):
        # Add undirected edge only if both vertices exist
        if vertex1 in self.adjacency_list and vertex2 in self.adjacency_list:
            if vertex2 not in self.adjacency_list[vertex1]:
                self.adjacency_list[vertex1].append(vertex2)
            if vertex1 not in self.adjacency_list[vertex2]:
                self.adjacency_list[vertex2].append(vertex1)

    def __str__(self):
        return str(self.adjacency_list)

    def remove_vertex(self, vertex):
        if vertex in self.adjacency_list:
            # Remove this vertex from all its neighbors
            for neighbor in list(self.adjacency_list[vertex]):
                if vertex in self.adjacency_list.get(neighbor, []):
                    self.adjacency_list[neighbor].remove(vertex)
            # Delete the vertex
            del self.adjacency_list[vertex]

    def remove_edge(self, vertex1, vertex2):
        if vertex1 in self.adjacency_list and vertex2 in self.adjacency_list:
            if vertex2 in self.adjacency_list[vertex1]:
                self.adjacency_list[vertex1].remove(vertex2)
            if vertex1 in self.adjacency_list[vertex2]:
                self.adjacency_list[vertex2].remove(vertex1)

    def dfs(self, start_vertex, visited=None):
        """
        Perform a depth-first search (DFS) starting from the given vertex.
        Args:
            start_vertex: The starting vertex for the DFS.
            visited (set, optional): A set of already visited vertices. Defaults to None.
        Returns:
            None
        """
        if start_vertex not in self.adjacency_list:
            return

        if visited is None:
            visited = set()

        visited.add(start_vertex)
        print(start_vertex, end=' ')

        for neighbor in self.adjacency_list[start_vertex]:
            if neighbor not in visited:
                self.dfs(neighbor, visited)

    def bfs(self, start_vertex):
        if start_vertex not in self.adjacency_list:
            return

        visited = set()
        from collections import deque
        queue = deque([start_vertex])
        visited.add(start_vertex)

        while queue:
            vertex = queue.popleft()
            print(vertex, end=' ')

            for neighbor in self.adjacency_list[vertex]:
                if neighbor not in visited:
                    visited.add(neighbor)
                    queue.append(neighbor)


# ------------------------ Unit Tests ------------------------

import unittest

class TestGraph(unittest.TestCase):

    def setUp(self):
        self.graph = Graph()

    def test_add_vertex(self):
        self.graph.add_vertex('A')
        self.assertEqual(self.graph.adjacency_list, {'A': []})
        self.graph.add_vertex('B')
        self.assertEqual(self.graph.adjacency_list, {'A': [], 'B': []})
        # Adding a duplicate vertex should not modify the graph
        self.graph.add_vertex('A')
        self.assertEqual(self.graph.adjacency_list, {'A': [], 'B': []})

    def test_add_edge(self):
        self.graph.add_vertex('A')
        self.graph.add_vertex('B')
        self.graph.add_edge('A', 'B')
        self.assertEqual(self.graph.adjacency_list, {'A': ['B'], 'B': ['A']})
        # Adding an edge with non-existent vertices should not modify the graph
        self.graph.add_edge('A', 'C')
        self.assertEqual(self.graph.adjacency_list, {'A': ['B'], 'B': ['A']})
        self.graph.add_edge('D', 'E')
        self.assertEqual(self.graph.adjacency_list, {'A': ['B'], 'B': ['A']})

    def test_remove_vertex(self):
        self.graph.add_vertex('A')
        self.graph.add_vertex('B')
        self.graph.add_edge('A', 'B')
        self.graph.remove_vertex('A')
        self.assertEqual(self.graph.adjacency_list, {'B': []})
        # removing a non-existent vertex shouldn't modify the graph
        self.graph.remove_vertex('C')
        self.assertEqual(self.graph.adjacency_list, {'B': []})

    def test_remove_edge(self):
        self.graph.add_vertex('A')
        self.graph.add_vertex('B')
        self.graph.add_edge('A', 'B')
        self.graph.remove_edge('A', 'B')
        self.assertEqual(self.graph.adjacency_list, {'A': [], 'B': []})
        # Removing a non-existent edge should not do anything
        self.graph.remove_edge('A', 'C')
        self.assertEqual(self.graph.adjacency_list, {'A': [], 'B': []})

    def test_dfs(self):
        self.graph.add_vertex('A')
        self.graph.add_vertex('B')
        self.graph.add_vertex('C')
        self.graph.add_edge('A', 'B')
        self.graph.add_edge('A', 'C')
        self.graph.add_edge('B', 'C')

        # Redirect stdout to capture the print output
        import io
        from contextlib import redirect_stdout

        f = io.StringIO()
        with redirect_stdout(f):
            self.graph.dfs('A')
        output = f.getvalue().strip()
        # DFS order can vary slightly; accept either possible order
        self.assertIn(output, {"A B C", "A C B"})

    def test_bfs(self):
        self.graph.add_vertex('A')
        self.graph.add_vertex('B')
        self.graph.add_vertex('C')
        self.graph.add_edge('A', 'B')
        self.graph.add_edge('A', 'C')
        self.graph.add_edge('B', 'C')
        import io
        from contextlib import redirect_stdout

        f = io.StringIO()
        with redirect_stdout(f):
            self.graph.bfs('A')
        output = f.getvalue().strip()
        self.assertEqual(output, "A B C")


if __name__ == '__main__':
    unittest.main()