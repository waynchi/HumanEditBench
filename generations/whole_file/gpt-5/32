from beem.discussions import Discussions, Query
from beem.comment import Comment

n_respuestas_minimas = 5
diccionario = {}

def procesar (texto: str):
    return "count me " in texto
def is_own_author (autor: str):
    return author == 'subidu'
def is_banned (autor: str):
    list_banned = []
    return autor in list_banned
def generar_permlink_unico () -> str:
    return "".join(random.choices(string.digits, k=10))
def procesar_replies (replies: Comment):
    pass
def preparar_comentario (parent_author: str, parent_permlink: str, permlink: str, title: str = '', author: str = 'subidu' , body: str = 'Count me in ^^ @subidu') -> dict[str:str]:
    return {
        "parent_author": parent_author,
        "parent_permlink": parent_permlink,
        "author": author,
        "permlink": permlink,
        "title": title,
        "body": body,
    }


q = Query()
d = Discussions()

# Nueva función local para crear un diccionario jerárquico por post y sus replies
def crear_diccionario_jerarquico(post_obj, replies_list):
    return {
        "post": {
            "author": post_obj.get('author'),
            "permlink": post_obj.get('permlink'),
            "title": post_obj.get('title', ''),
            "body": post_obj.get('body', ''),
            "children": post_obj.get('children', 0),
        },
        "replies": [
            {
                "author": r.get('author'),
                "permlink": r.get('permlink'),
                "parent_author": r.get('parent_author', post_obj.get('author')),
                "parent_permlink": r.get('parent_permlink', post_obj.get('permlink')),
                "body": r.get('body', ''),
                "depth": r.get('depth', 1),
            }
            for r in replies_list
        ],
    }

posts_generator = d.get_discussions("created", q, limit=6000)
X = 0

for post in posts_generator:
    post_author = post['author']
    post_permlink = post['permlink']
    post_replies = post['children']
    cnt = 0
    X += 1

    replies_list = []
    if post_replies > n_respuestas_minimas:
        comment = Comment(authorperm=f"{post_author}/{post_permlink}")
        post_replies: list = comment.get_replies()
        replies_list = post_replies

        cnt = 0
        for replies in post_replies:
            author = replies['author']
            text = replies['body']
            if is_own_author(author):
                # Reevaluar el comentario
                break
            if is_banned(author):
                break
            if procesar(text):
                cnt += 1

    # Actualizar/crear la entrada jerárquica del post en el diccionario global
    post_key = f"{post_author}/{post_permlink}"
    diccionario[post_key] = crear_diccionario_jerarquico(post, replies_list)

    if cnt > 3:
        print("Iterador: ", X)
        print(replies['author'], '/', replies['permlink']) 