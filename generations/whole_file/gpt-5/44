import pandas as pd

class Stock:
	def __init__(self, filename, name):
		self.filename = filename
		try:
			self.data = pd.read_csv(self.filename,index_col=0,parse_dates=True)
		except Exception as e:
			print(f"Unable to read file {self.filename}")
			raise e
		self.data.index.name = 'time'
		self.name = name
		self.attrs = {}

	def get_attr(self, key):
		try:
			return self.attrs[key]
		except KeyError:
			return None

	def set_attr(self, key, value):
		self.attrs[key] = value

	def get(self, i):
		return self.data.iloc[i]

	def get_range(self, s, t):
		return self.data.iloc[s:t+1]

	def __len__(self):
		return len(self.data)

class Transaction:
	def __init__(self, num, price):
		self.num = num
		self.price = price
		self.date = None

	def set_date(self, date):
		self.date = date

class Trade:
	def __init__(self, stock, long=True, num=0, price=0.0):
		self.stock = stock
		self.num = 0
		self.profit = 0
		self.closed = False
		self.long = long

		self.opens = []
		self.closes = []

		if num != 0:
			self.open(num, price)

	def close(self, num, price):
		if num > self.num:
			raise ValueError(f"ERR: Trying to close {num} of {self.stock.name} but only {self.num} available")
		self.num -= num
		self.closes.append(Transaction(num, price))

		if self.long:
			self.profit = self.get_num_closed() * (self.get_avg_close_price() - self.get_avg_open_price())
		else:
			self.profit = self.get_num_closed() * (self.get_avg_open_price() - self.get_avg_close_price())

		if self.num == 0:
			self.closed = True

	def open(self, num, price):
		self.num += num

		self.opens.append(Transaction(num, price))

	def get_equity(self, i):
		current_price = self.stock.get(i)["close"]
		if self.long:
			return self.num * current_price
		else:
			# For short trades, equity could reflect the potential cost to close the position
			return self.num * (self.get_avg_open_price() - current_price)

	def set_date(self, date):
		[transaction.set_date(date) for transaction in self.opens if transaction.date is None]
		[transaction.set_date(date) for transaction in self.closes if transaction.date is None]

	def get_avg_open_price(self):
		total_price = sum(transaction.price * transaction.num for transaction in self.opens)
		total_num = sum(transaction.num for transaction in self.opens)
		return total_price / total_num if total_num else 0
	
	def get_avg_close_price(self):
		total_price = sum(transaction.price * transaction.num for transaction in self.closes)
		total_num = sum(transaction.num for transaction in self.closes)
		return total_price / total_num if total_num else 0

	def get_num_opened(self):
		return sum(transaction.num for transaction in self.opens)

	def get_num_closed(self):
		return sum(transaction.num for transaction in self.closes)

class Strategy:
	def __init__(self):
		self.stocks = []
		self.starting_money = 100000.0
		self.money = self.starting_money
		self.closed_trades = []
		self.open_trades = []
		self.attrs = {}
		self.analyzers = []

	def get_attr(self, key):
		return self.attrs[key]

	def set_attr(self, key, value):
		self.attrs[key] = value

	def add_analyzer(self, analyzer):
		analyzer.strategy = self
		self.analyzers.append(analyzer)

	def has_open_trade(self, stock):
		for trade in self.open_trades:
			if stock is trade.stock:
				return True
		return False

	def get_open_trade(self, stock):
		for trade in self.open_trades:
			if trade.stock is stock:
				return trade
		raise ValueError("No open trade on stock "+str(stock.name))

	def open_trade(self, stock, num, price):
		if self.money < num*price:
			raise ValueError("Insufficient funds: have $"+str(self.money)+" available and trying to open "+str(num)+" of "+str(stock.name)+" at $"+str(price)+" on "+str(stock.get(self.get_attr("i")).name))

		if self.has_open_trade(stock):
			trade = self.get_open_trade(stock)
			trade.open(num, price)
			trade.set_date(stock.get(self.get_attr("i")).name)
		else:
			self.open_trades.append(Trade(stock, True, num, price))
			self.open_trades[-1].set_date(stock.get(self.get_attr("i")).name)

		self.money -= num*price

	def sell(self, stock, num, price):
		if self.has_open_trade(stock):
			trade = self.get_open_trade(stock)
			trade.close(num, price)
			if trade.closed:
				self.open_trades.remove(trade)
				self.closed_trades.append(trade)
			trade.set_date(stock.get(self.get_attr("i")).name)
		else:
			raise ValueError("No position to close in "+str(stock.name))

		self.money += num*price

	def get_equity(self, i):
		res = self.money
		for trade in self.open_trades:
			res += trade.get_equity(i)
		return res

	def next(self, i):
		pass

class Computer:
	def __init__(self, n_simulations=1, variation=None, seed=None):
		self.stocks = []
		self.strategies = []
		# Number of simulated intrabar variations per candlestick
		self.n_simulations = max(1, int(n_simulations))
		# Variation configuration (relative +/- percentages)
		default_variation = {
			"close_pct": 0.01,   # +/-1% close variation
			"high_pct": 0.015,   # +/-1.5% high variation baseline (will be reconciled with open/close)
			"low_pct": 0.015,    # +/-1.5% low variation baseline (will be reconciled with open/close)
			"volume_pct": 0.20   # +/-20% volume variation
		}
		self.variation = {**default_variation, **(variation or {})}
		self._seed = seed

	def add_stock(self, stock):
		if not isinstance(stock, Stock):
			exit("ERR: called 'add_stock' on type: "+str(type(stock)))
		self.stocks.append(stock)
	
	def add_strategy(self, strategy):
		if not isinstance(strategy, Strategy):
			exit("ERR: called 'add_strategy' on type: "+str(type(strategy)))
		self.strategies.append(strategy)

	def run(self):
		import random
		rnd = random.Random(self._seed)

		def _perturb(value, pct):
			if value is None:
				return None
			try:
				v = float(value)
			except Exception:
				return value
			factor = 1.0 + rnd.uniform(-pct, pct)
			new_v = v * factor
			if new_v < 0:
				new_v = 0.0
			return new_v

		# put stocks in strategies
		for strategy in self.strategies:
			j = 1
			for stock in self.stocks:
				strategy.stocks = [stock]
				print(f"stock #{j}/{len(self.stocks)}")
				j += 1

				# run every day on the strategies
				for i in range(len(stock)):
					# capture original (final) OHLCV values for this candle
					row_index = stock.data.index[i]
					cols = stock.data.columns
					orig_values = {}
					for col in ("open", "high", "low", "close", "volume"):
						if col in cols:
							orig_values[col] = stock.data.at[row_index, col]

					# Perform n simulated intrabar variations
					for sim in range(self.n_simulations):
						# Calculate perturbed values based on original values
						# Keep 'open' fixed (no variation as requested)
						open_val = orig_values.get("open", None)

						close_val = orig_values.get("close", None)
						close_var = _perturb(close_val, self.variation["close_pct"]) if close_val is not None else None

						high_val = orig_values.get("high", None)
						low_val = orig_values.get("low", None)

						high_var = _perturb(high_val, self.variation["high_pct"]) if high_val is not None else None
						low_var = _perturb(low_val, self.variation["low_pct"]) if low_val is not None else None

						volume_val = orig_values.get("volume", None)
						volume_var = _perturb(volume_val, self.variation["volume_pct"]) if volume_val is not None else None

						# Reconcile OHLC constraints: high >= max(open, close), low <= min(open, close)
						# Use available fields defensively
						if high_var is not None:
							candidates_high = [x for x in (high_var, close_var, open_val) if x is not None]
							if candidates_high:
								high_var = max(candidates_high)
						if low_var is not None:
							candidates_low = [x for x in (low_var, close_var, open_val) if x is not None]
							if candidates_low:
								low_var = min(candidates_low)
						# Ensure low <= high if both exist
						if low_var is not None and high_var is not None and low_var > high_var:
							mid = (low_var + high_var) / 2.0
							low_var = mid
							high_var = mid
						# Non-negative enforcement
						if low_var is not None and low_var < 0: low_var = 0.0
						if high_var is not None and high_var < 0: high_var = 0.0

						# Apply simulated values to the DataFrame
						if "close" in cols and close_var is not None:
							stock.data.at[row_index, "close"] = close_var
						if "high" in cols and high_var is not None:
							stock.data.at[row_index, "high"] = high_var
						if "low" in cols and low_var is not None:
							stock.data.at[row_index, "low"] = low_var
						if "volume" in cols and volume_var is not None:
							stock.data.at[row_index, "volume"] = volume_var

						# Run strategy and analyzers for this simulated intrabar value
						strategy.set_attr("i", i)
						strategy.set_attr("sim", sim)
						strategy.next(i)

						for analyzer in strategy.analyzers:
							analyzer.next(i)

					# After simulations, restore final (original) values to the candlestick
					for col, val in orig_values.items():
						stock.data.at[row_index, col] = val

					# close any open trades on the end of the last day
					if i == len(stock)-1:
						for strat in self.strategies:
							while len(strat.open_trades) > 0:
								trade = strat.open_trades[0]
								strat.sell(trade.stock, trade.num, trade.stock.get(i)["close"])

		# get rid of strategies
		for strategy in self.strategies:
			strategy.stocks = []