To address the user's concerns, I'll make two key modifications:
1. Fix the boundary detection logic by using canvas configuration values until the window is properly rendered
2. Add random colors to each square for better visibility

Here's the complete solution:
python
import tkinter as tk
import random
import math

class Square:
    def __init__(self, canvas, size, x, y):
        self.canvas = canvas
        self.size = size
        self.x = x
        self.y = y
        self.dx = random.choice([-2, 2])
        self.dy = random.choice([-2, 2])
        # Generate random color for each square
        color = "#{:06x}".format(random.randint(0, 0xFFFFFF))
        self.square = canvas.create_rectangle(x, y, x + size, y + size, fill=color)

    def move(self):
        self.x += self.dx
        self.y += self.dy
        self.canvas.move(self.square, self.dx, self.dy)
        
        # Get canvas dimensions - use configured values until window renders
        canvas_width = self.canvas.winfo_width()
        canvas_height = self.canvas.winfo_height()
        
        # Fallback to configured dimensions if window not rendered yet
        if canvas_width <= 1:
            canvas_width = int(self.canvas.cget("width"))
        if canvas_height <= 1:
            canvas_height = int(self.canvas.cget("height"))
        
        # Check boundaries using proper dimensions
        if (self.x <= 0 or self.x + self.size >= canvas_width or 
            self.y <= 0 or self.y + self.size >= canvas_height):
            # Delete current square
            self.canvas.delete(self.square)
            # Create two new squares if size is big enough
            if self.size > 10:
                new_size = self.size / 2
                squares.append(Square(self.canvas, new_size, 
                                   canvas_width/2 - new_size/2, 
                                   canvas_height/2 - new_size/2))
                squares.append(Square(self.canvas, new_size, 
                                   canvas_width/2 + new_size/2, 
                                   canvas_height/2 + new_size/2))
            return False
        return True

def update():
    global squares
    # Move all squares and remove those that hit boundaries
    squares = [square for square in squares if square.move()]
    root.after(20, update)  # Update every 20ms

# Create main window
root = tk.Tk()
root.title("Splitting Squares")

# Create canvas
canvas = tk.Canvas(root, width=600, height=600, bg="white")
canvas.pack(expand=True, fill="both")

# Create initial square
squares = [Square(canvas, 100, 250, 250)]

# Start animation
update()

# Start main loop
root.mainloop()

Key changes made:
1. Added random color generation using hexadecimal format for each square
2. Modified boundary detection to use canvas configuration values until the window renders properly
3. Maintained all original functionality while fixing movement visibility
4. Ensured squares split correctly with proper coloring