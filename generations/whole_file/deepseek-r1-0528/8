To address the user's request, we need to modify the code to efficiently find numbers that can be expressed as the sum of four non-zero squares. The original implementation had inefficiencies due to nested loops and early termination issues. The key improvements include:

1. Optimizing the `is_sum_of_four_squares` function by:
   - Changing loops to start from 1 (to exclude zero squares)
   - Adding early termination checks when partial sums exceed `n`
   - Replacing the innermost loop with a direct perfect square check
   - Returning `None` for negative numbers

2. Fixing the `find_four_squares_sums` function by:
   - Correcting indentation issues
   - Removing the early return statement
   - Eliminating redundant non-zero checks (handled by the modified loops)

These changes ensure the code correctly identifies numbers expressible as sums of four non-zero squares while significantly improving performance.
python
def is_sum_of_four_squares(n):
    if n < 0:
        return None
    max_val = int(n**0.5) + 1
    for a in range(1, max_val):
        a2 = a * a
        if a2 > n:
            break
        for b in range(1, max_val):
            b2 = b * b
            ab = a2 + b2
            if ab > n:
                break
            for c in range(1, max_val):
                c2 = c * c
                total_abc = ab + c2
                if total_abc > n:
                    break
                remainder = n - total_abc
                if remainder < 1:
                    continue
                d = int(remainder**0.5)
                if d * d == remainder:
                    return a, b, c, d
    return None

def find_four_squares_sums(limit):
    """
    Finds numbers up to a limit that can be expressed as the sum of four squares
    without any of the squares being zero.
    """
    results = []
    for n in range(1, limit + 1):
        result = is_sum_of_four_squares(n)
        if result:
            results.append(n)
    return results

# Example usage:
limit = int(input("Digite o limite superior: "))
sums_found = find_four_squares_sums(limit)
print("Números que podem ser expressos como a soma de quatro quadrados não nulos:")
for num in sums_found:
    result = is_sum_of_four_squares(num)
    a, b, c, d = result
    print(f"{num} = {a}^2 + {b}^2 + {c}^2 + {d}^2")