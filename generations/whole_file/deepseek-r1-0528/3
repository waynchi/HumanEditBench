To solve this problem, we need to implement a function that checks whether a given number is prime. A prime number is defined as a natural number greater than 1 that has no positive divisors other than 1 and itself. 

### Approach
The approach involves the following steps:
1. **Check for numbers less than 2**: Numbers less than 2 are not prime.
2. **Check for 2**: The smallest prime number is 2.
3. **Check for even numbers**: Any even number greater than 2 is not prime.
4. **Check odd divisors**: For numbers greater than 2, check divisibility by all odd numbers up to the square root of the number. If any divisor is found, the number is not prime.

### Solution Codepython
def is_prime(n):
    if n < 2:
        return False
    if n == 2:
        return True
    if n % 2 == 0:
        return False
    i = 3
    while i * i <= n:
        if n % i == 0:
            return False
        i += 2
    return True

### Explanation
1. **Initial Checks**: The function first checks if the number is less than 2 (not prime), equal to 2 (prime), or an even number greater than 2 (not prime).
2. **Odd Divisor Check**: For numbers greater than 2, the function checks divisibility by all odd numbers starting from 3 up to the square root of the number. This is efficient because any factor larger than the square root would have a corresponding factor smaller than the square root.
3. **Return Result**: If no divisors are found, the function returns `True`, indicating the number is prime. If a divisor is found during the loop, it returns `False`.

This approach efficiently checks for primality by leveraging mathematical properties of prime numbers, reducing the number of checks needed to determine if a number is prime.