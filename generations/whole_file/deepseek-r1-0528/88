python
import requests #для запроса к API
import xml.etree.ElementTree #для обработки xml-ответа API
import matplotlib.pyplot as plt #для построения графиков
import pandas as pd #для создания датафрейма и разденеия всех свечей на два типа: close и open
import datetime #для дат по оси иксов
import pickle #для хранения переменных в файле
import json
import asyncio  #для асинхронной работы

#фак ю нигер
#допиши чтобы set_valutes заполнялось!!! оно факинг нигер и не заполняется


#класс валюта
class valute():
    """Валюта и всё с ней связанное, через ЦБ РФ \n
    Требуются библеотеки: \n
    requests \n
    xml.etree.ElementTree \n
    matplotlib.pyplot as plt \n
    pandas as pd \n
    datetime \n
    pickle \n
    json \n
    asyncio \n
    """
    def __init__(self, name):
        self.name = name

    async def correct_name(self):
        """Проверка имени валюты на наличие в множестве валют. Множество обновляется не чаще раза в день"""
        loop = asyncio.get_running_loop()
        
        # Обертываем синхронный метод для исполнения в потоке
        def sync_correct_name():
            info_opened_file = open(r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", "r", encoding="utf-8")
            info = json.load(info_opened_file)
            info_opened_file.close()
            if datetime.datetime.now() - datetime.timedelta(days=1) > datetime.datetime.strptime(info["last_day_check"]["valute"], "%Y-%m-%d %H:%M:%S.%f"):
                set_valutes = set()
                s = "http://www.cbr.ru/scripts/XML_daily.asp"
                r = requests.get(s)
                root = xml.etree.ElementTree.fromstring(r.content)
                for Valute in root.findall("Valute"):
                    CharCode = Valute.find("CharCode")
                    set_valutes.add(CharCode.text)
                set_valutes_file_opened = open(r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin", "wb")
                pickle.dump(set_valutes, set_valutes_file_opened)
                set_valutes_file_opened.close()
                info["last_day_check"]["valute"] = str(datetime.datetime.now())
                info_opened_file = open(r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", "w", encoding="utf-8")
                json.dump(info, info_opened_file, indent=3, ensure_ascii=False)
                info_opened_file.close()
            set_valutes_file_opened = open(r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin", "rb")
            set_valutes = pickle.load(set_valutes_file_opened)
            return self.name in set_valutes
            
        return await loop.run_in_executor(None, sync_correct_name)

    async def CurrentExchangeRate(self):
        '''Текущий курс обмена валюты на рубль'''
        loop = asyncio.get_running_loop()
        
        # Обертываем синхронный метод для исполнения в потоке
        def sync_CurrentExchangeRate():
            r = requests.get("http://www.cbr.ru/scripts/XML_daily.asp")
            root = xml.etree.ElementTree.fromstring(r.content)
            for Valute in root.findall("Valute"):
                for CharCode in Valute.findall("CharCode"):
                    if CharCode.text == self.name:
                        return Valute.find("VunitRate").text
                        
        return await loop.run_in_executor(None, sync_CurrentExchangeRate)