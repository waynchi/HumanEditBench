import requests #для запроса к API
import xml.etree.ElementTree #для обработки xml-ответа API
import matplotlib.pyplot as plt #для построения графиков
import pandas as pd #для создания датафрейма и разденеия всех свечей на два типа: close и open
import datetime #для дат по оси иксов
import pickle #для хранения переменных в файле
import json


#класс валюта
class valute():
    """Валюта и всё с ней связанное, через ЦБ РФ
    Требуются библеотеки:
    requests
    xml.etree.ElementTree
    matplotlib.pyplot as plt
    pandas as pd
    datetime
    pickle
    json

    Примечание: методы класса асинхронные.
    """
    def __init__(self, name):
        self.name = name

    # --- Вспомогательные синхронные методы для работы в потоках ---
    @staticmethod
    def _read_json_sync(path):
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)

    @staticmethod
    def _write_json_sync(path, data):
        with open(path, "w", encoding="utf-8") as f:
            json.dump(data, f, indent = 3, ensure_ascii = False)

    @staticmethod
    def _read_pickle_sync(path):
        with open(path, "rb") as f:
            return pickle.load(f)

    @staticmethod
    def _write_pickle_sync(path, obj):
        with open(path, "wb") as f:
            pickle.dump(obj, f)

    async def _fetch_valute_set(self):
        import asyncio
        # Получаем список валют с сайта ЦБ РФ
        r = await asyncio.to_thread(requests.get, "http://www.cbr.ru/scripts/XML_daily.asp")
        root = xml.etree.ElementTree.fromstring(r.content)
        set_valutes = set()
        for Valute in root.findall("Valute"):
            CharCode = Valute.find("CharCode")
            if CharCode is not None and CharCode.text:
                set_valutes.add(CharCode.text)
        return set_valutes

    async def correct_name(self):
        """Проверка имени валюты на наличие в множестве валют. Множество обновляется не реже раза в день"""
        import asyncio

        info_path = r"D:\MoexAPI_bot_aiogram3\data_files\Info.json"
        set_valutes_path = r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin"

        # Читаем Info.json (если нет — считаем, что давно устарел)
        try:
            info = await asyncio.to_thread(self._read_json_sync, info_path)
        except Exception:
            info = {}

        # Определяем дату последнего обновления
        now = datetime.datetime.now()
        last_dt = None
        try:
            last_str = info.get("last_day_check", {}).get("valute")
            if last_str:
                last_dt = datetime.datetime.strptime(last_str, "%Y-%m-%d %H:%M:%S.%f")
        except Exception:
            last_dt = None

        needs_refresh = last_dt is None or (now - datetime.timedelta(days=1) > last_dt)

        # При необходимости обновляем список валют и сохраняем в файл
        if needs_refresh:
            try:
                set_valutes = await self._fetch_valute_set()
                await asyncio.to_thread(self._write_pickle_sync, set_valutes_path, set_valutes)
                info.setdefault("last_day_check", {})["valute"] = str(now)
                await asyncio.to_thread(self._write_json_sync, info_path, info)
            except Exception:
                # Даже если обновление не удалось, продолжим и попробуем использовать существующий файл
                pass

        # Загружаем множество валют из файла; если файла нет/поврежден — пробуем восстановить
        try:
            set_valutes = await asyncio.to_thread(self._read_pickle_sync, set_valutes_path)
        except Exception:
            set_valutes = await self._fetch_valute_set()
            await asyncio.to_thread(self._write_pickle_sync, set_valutes_path, set_valutes)
            info.setdefault("last_day_check", {})["valute"] = str(now)
            await asyncio.to_thread(self._write_json_sync, info_path, info)

        return self.name in set_valutes

    async def CurrentExchangeRate(self):
        '''Текущий курс обмена валюты на рубль'''
        import asyncio
        r = await asyncio.to_thread(requests.get, "http://www.cbr.ru/scripts/XML_daily.asp") #Api ЦБ РФ
        root = xml.etree.ElementTree.fromstring(r.content)
        for Valute in root.findall("Valute"): #ищем контейнеры валюты
            CharCode = Valute.find("CharCode")
            if CharCode is not None and CharCode.text == self.name: #находим контейнер с нужной валютой
                vunit = Valute.find("VunitRate")
                if vunit is not None and vunit.text is not None:
                    return vunit.text
                # На случай если VunitRate отсутствует, попробуем Value
                value = Valute.find("Value")
                if value is not None and value.text is not None:
                    return value.text
        return None