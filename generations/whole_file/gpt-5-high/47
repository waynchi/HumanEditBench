import pandas as pd

class Stock:
	def __init__(self, filename, name):
		self.filename = filename
		try:
			self.data = pd.read_csv(self.filename,index_col=0,parse_dates=True)
		except Exception as e:
			print(f"Unable to read file {self.filename}")
			raise e
		self.data.index.name = 'time'
		self.name = name
		self.attrs = {}

	def get_attr(self, key):
		try:
			return self.attrs[key]
		except KeyError:
			return None

	def set_attr(self, key, value):
		self.attrs[key] = value

	def get(self, i):
		return self.data.iloc[i]

	def get_range(self, s, t):
		return self.data.iloc[s:t+1]

	def __len__(self):
		return len(self.data)

class Transaction:
	def __init__(self, num, price):
		self.num = num
		self.price = price
		self.date = None

	def set_date(self, date):
		self.date = date

class Trade:
	def __init__(self, stock, long=True, num=0, price=0.0):
		self.stock = stock
		self.num = 0
		self.profit = 0
		self.closed = False
		self.long = long

		self.opens = []
		self.closes = []

		if num != 0:
			self.open(num, price)

	def close(self, num, price):
		if num > self.num:
			raise ValueError(f"ERR: Trying to close {num} of {self.stock.name} but only {self.num} available")
		self.num -= num
		self.closes.append(Transaction(num, price))

		if self.long:
			self.profit = self.get_num_closed() * (self.get_avg_close_price() - self.get_avg_open_price())
		else:
			self.profit = self.get_num_closed() * (self.get_avg_open_price() - self.get_avg_close_price())

		if self.num == 0:
			self.closed = True

	def open(self, num, price):
		self.num += num

		self.opens.append(Transaction(num, price))

	def get_equity(self, i):
		current_price = self.stock.get(i)["close"]
		if self.long:
			return self.num * current_price
		else:
			# For short trades, equity could reflect the potential cost to close the position
			return self.num * (self.get_avg_open_price() - current_price)

	def set_date(self, date):
		[transaction.set_date(date) for transaction in self.opens if transaction.date is None]
		[transaction.set_date(date) for transaction in self.closes if transaction.date is None]

	def get_avg_open_price(self):
		total_price = sum(transaction.price * transaction.num for transaction in self.opens)
		total_num = sum(transaction.num for transaction in self.opens)
		return total_price / total_num if total_num else 0
	
	def get_avg_close_price(self):
		total_price = sum(transaction.price * transaction.num for transaction in self.closes)
		total_num = sum(transaction.num for transaction in self.closes)
		return total_price / total_num if total_num else 0

	def get_num_opened(self):
		return sum(transaction.num for transaction in self.opens)

	def get_num_closed(self):
		return sum(transaction.num for transaction in self.closes)

class Strategy:
	def __init__(self):
		self.stocks = []
		self.starting_money = 100000.0
		self.money = self.starting_money
		self.closed_trades = []
		self.open_trades = []
		self.attrs = {}
		self.analyzers = []

	def get_attr(self, key):
		return self.attrs[key]

	def set_attr(self, key, value):
		self.attrs[key] = value

	def add_analyzer(self, analyzer):
		analyzer.strategy = self
		self.analyzers.append(analyzer)

	def has_open_trade(self, stock):
		for trade in self.open_trades:
			if stock is trade.stock:
				return True
		return False

	def get_open_trade(self, stock):
		for trade in self.open_trades:
			if trade.stock is stock:
				return trade
		raise ValueError("No open trade on stock "+str(stock.name))

	def open_trade(self, stock, num, price):
		if self.money < num*price:
			raise ValueError("Insufficient funds: have $"+str(self.money)+" available and trying to open "+str(num)+" of "+str(stock.name)+" at $"+str(price)+" on "+str(stock.get(self.get_attr("i")).name))

		if self.has_open_trade(stock):
			trade = self.get_open_trade(stock)
			trade.open(num, price)
			trade.set_date(stock.get(self.get_attr("i")).name)
		else:
			self.open_trades.append(Trade(stock, True, num, price))
			self.open_trades[-1].set_date(stock.get(self.get_attr("i")).name)

		self.money -= num*price

	def sell(self, stock, num, price):
		if self.has_open_trade(stock):
			trade = self.get_open_trade(stock)
			trade.close(num, price)
			if trade.closed:
				self.open_trades.remove(trade)
				self.closed_trades.append(trade)
			trade.set_date(stock.get(self.get_attr("i")).name)
		else:
			raise ValueError("No position to close in "+str(stock.name))

		self.money += num*price

	def get_equity(self, i):
		res = self.money
		for trade in self.open_trades:
			res += trade.get_equity(i)
		return res

	def next(self, i):
		pass

class Computer:
	def __init__(self, samples_per_candle=1):
		self.stocks = []
		self.strategies = []
		# Number of intra-candlestick samples per candle (>=1).
		try:
			self.samples_per_candle = int(samples_per_candle)
			if self.samples_per_candle < 1:
				self.samples_per_candle = 1
		except Exception:
			self.samples_per_candle = 1

	def add_stock(self, stock):
		if type(stock) is not Stock:
			exit("ERR: called 'add_stock' on type: "+str(type(stock)))
		self.stocks.append(stock)
	
	def add_strategy(self, strategy):
		if not isinstance(strategy, Strategy):
			exit("ERR: called 'add_strategy' on type: "+str(type(strategy)))
		self.strategies.append(strategy)

	def run(self):
		# put stocks in strategies
		for strategy in self.strategies:
			j = 1
			for stock in self.stocks:
				strategy.stocks = [stock]
				print(f"stock #{j}/{len(self.stocks)}")
				j += 1

				# Determine presence of required columns
				cols = stock.data.columns
				has_ohlc = all(k in cols for k in ['open', 'high', 'low', 'close'])
				has_volume = 'volume' in cols
				vol_is_int = has_volume and pd.api.types.is_integer_dtype(stock.data['volume'].dtype)

				# run every day on the strategies
				for i in range(len(stock)):
					samples = max(1, int(getattr(self, 'samples_per_candle', 1)))

					if samples == 1 or not has_ohlc:
						# No intra-candle sampling, just run once with existing values
						strategy.set_attr("i", i)
						strategy.next(i)

						for analyzer in strategy.analyzers:
							analyzer.next(i)
					else:
						# Intra-candlestick sampling: progressively modify the current candle,
						# then restore it to its original (completed) values.
						original_row = stock.data.iloc[i].copy()

						try:
							O = float(original_row['open'])
							H = float(original_row['high'])
							L = float(original_row['low'])
							C = float(original_row['close'])
							V = float(original_row['volume']) if has_volume else 0.0
						except Exception:
							# If casting fails for any reason, fall back to single pass.
							strategy.set_attr("i", i)
							strategy.next(i)
							for analyzer in strategy.analyzers:
								analyzer.next(i)
						else:
							# Initialize running extremes at the open
							running_high = O
							running_low = O

							for s in range(1, samples + 1):
								p = s / samples

								# Interpolated close progresses from open to final close
								close_s = O + (C - O) * p

								# Interpolated targets for extremes progress towards final extremes
								up_target = O + (H - O) * p
								down_target = O + (L - O) * p

								# Update running extremes monotonically and within final bounds
								running_high = max(running_high, up_target, close_s, O)
								running_high = min(running_high, H)

								running_low = min(running_low, down_target, close_s, O)
								running_low = max(running_low, L)

								# Ensure logical OHLC constraints
								high_s = max(running_high, close_s, O)
								high_s = min(high_s, H)

								low_s = min(running_low, close_s, O)
								low_s = max(low_s, L)

								# Volume progresses towards the final volume
								if has_volume:
									vol_s = V * p
									if vol_is_int:
										vol_s = int(round(vol_s))

								# Apply the sampled values to the DataFrame (modifying the in-progress candle)
								stock.data.iat[i, stock.data.columns.get_loc('open')] = O
								stock.data.iat[i, stock.data.columns.get_loc('high')] = high_s
								stock.data.iat[i, stock.data.columns.get_loc('low')] = low_s
								stock.data.iat[i, stock.data.columns.get_loc('close')] = close_s
								if has_volume:
									stock.data.iat[i, stock.data.columns.get_loc('volume')] = vol_s

								# Run strategy and analyzers for this sample
								strategy.set_attr("i", i)
								strategy.next(i)

								for analyzer in strategy.analyzers:
									analyzer.next(i)

							# After completing all samples, restore the original (completed) candle values
							stock.data.iloc[i] = original_row

					# close any open trades on the end of the last day
					if i == len(stock)-1:
						for strat in self.strategies:
							while len(strat.open_trades) > 0:
								trade = strat.open_trades[0]
								strat.sell(trade.stock, trade.num, trade.stock.get(i)["close"])

		# get rid of strategies
		for strategy in self.strategies:
			strategy.stocks = []