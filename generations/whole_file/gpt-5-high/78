const cameraService = require('./camera.service');

const createCamera = async (req, res) => {
  try {
    const camera = await cameraService.createCamera(req.body);

    // Attempt to obtain a Sequelize instance to run a raw query
    let sequelize = null;

    // 1) From Express app context if available
    if (req.app && typeof req.app.get === 'function') {
      try {
        sequelize = req.app.get('sequelize') || null;
      } catch (e) {
        // ignore
      }
    }

    // 2) From cameraService if exposed
    if (!sequelize && cameraService && cameraService.sequelize) {
      sequelize = cameraService.sequelize;
    }
    if (!sequelize && cameraService && cameraService.db && cameraService.db.sequelize) {
      sequelize = cameraService.db.sequelize;
    }

    // 3) Try common model index exports
    if (!sequelize) {
      try {
        sequelize = require('../models').sequelize;
      } catch (e) {}
    }
    if (!sequelize) {
      try {
        sequelize = require('../../models').sequelize;
      } catch (e) {}
    }
    if (!sequelize) {
      try {
        sequelize = require('../../../models').sequelize;
      } catch (e) {}
    }

    // If we cannot get a sequelize instance, fall back to returning the created camera
    if (!sequelize || !sequelize.query) {
      return res.status(201).json(camera);
    }

    // Determine the newly created camera ID
    const newCameraId = camera && (camera.id || (camera.dataValues && camera.dataValues.id));
    if (!newCameraId) {
      // If ID cannot be determined, return the created camera as is
      return res.status(201).json(camera);
    }

    // Raw SQL to join cameras with areas and get all camera fields + area_name
    const [rows] = await sequelize.query(
      'SELECT cameras.*, areas.area_name FROM cameras LEFT JOIN areas ON cameras.area_id = areas.id WHERE cameras.id = :id',
      { replacements: { id: newCameraId } }
    );

    const result = Array.isArray(rows) ? rows[0] : rows;
    res.status(201).json(result || camera);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

const getAllCameras = async (req, res) => {
  try {
    const cameras = await cameraService.getAllCameras();
    res.status(200).json(cameras);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

const getCameraById = async (req, res) => {
  try {
    const camera = await cameraService.getCameraById(req.params.id);
    if (!camera) {
      return res.status(404).json({ message: 'Camera not found' });
    }
    res.status(200).json(camera);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

const updateCamera = async (req, res) => {
  try {
    const camera = await cameraService.updateCamera(req.params.id, req.body);
    if (!camera) {
      return res.status(404).json({ message: 'Camera not found' });
    }
    res.status(200).json(camera);
  } catch (error) {
     res.status(500).json({ error: error.message });
  }
};

const deleteCamera = async (req, res) => {
  try {
    const success = await cameraService.deleteCamera(req.params.id);
    if (!success) {
      return res.status(404).json({ message: 'Camera not found' });
    }
    res.status(204).send();
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

module.exports = {
  createCamera,
  getAllCameras,
  getCameraById,
  updateCamera,
  deleteCamera,
};