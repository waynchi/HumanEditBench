import math
class Value:
    """ stores a single scalar value and its gradient """

    def __init__(self, data, _children=(), _op=''):
        self.data = data
        self.grad = 0
        # internal variables used for autograd graph construction
        self._backward = lambda: None
        self._prev = set(_children)
        self._op = _op # the op that produced this node, for graphviz / debugging / etc

    def __add__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data + other.data, (self, other), '+')

        def _backward():
            self.grad += out.grad
            other.grad += out.grad
        out._backward = _backward

        return out

    def __mul__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data * other.data, (self, other), '*')

        def _backward():
            self.grad += other.data * out.grad
            other.grad += self.data * out.grad
        out._backward = _backward

        return out

    def __pow__(self, other):
        assert isinstance(other, (int, float)), "only supporting int/float powers for now"
        out = Value(self.data**other, (self,), f'**{other}')

        def _backward():
            self.grad += (other * self.data**(other-1)) * out.grad
        out._backward = _backward

        return out


        print(f'** EXP {self}')
        out = Value(math.exp(self.data), (self,), "e")
        def _backward():
            self.grad += math.exp(self.data) * out.grad
        out._backward = _backward
        
        return out
    
    def log(self):
        out = Value(math.log(self.data), (self,), f'log{self.data}')
        def _backward():
            self.grad += 1 / self.data
        out._backward = _backward       
        
        return out
    
    def relu(self):
        assert isinstance(self.data, (int, float)), "only supporting int/float powers for now"
        out = Value(0 if self.data < 0 else self.data, (self,), 'ReLU')

        def _backward():
            self.grad += (out.data > 0) * out.grad
        out._backward = _backward

        return out
    
    def softmax(x):
        e_x = np.exp(x - np.max(x))

    def backward(self):

        # topological order all of the children in the graph
        topo = []
        visited = set()
        def build_topo(v):
            if v not in visited:
                visited.add(v)
                for child in v._prev:
                    build_topo(child)
                topo.append(v)
        build_topo(self)

        # go one variable at a time and apply the chain rule to get its gradient
        self.grad = 1
        for v in reversed(topo):
            v._backward()

    def __neg__(self): # -self
        return self * -1
    def __gt__(self, other):
        return self.data > other.data

    def __radd__(self, other): # other + self
        return self + other

    def __sub__(self, other): # self - other
        return self + (-other)

    def __rsub__(self, other): # other - self
        return other + (-self)

    def __rmul__(self, other): # other * self
        return self * other

    def __truediv__(self, other): # self / other
        return self * other**-1

    def __rtruediv__(self, other): # other / self
        return other * self**-1

    def __repr__(self):
        return f"Value(data={self.data}, grad={self.grad})"


def differentiate_softmax(softmax_output, upstream_grad=None):
    """
    Differentiate the softmax function.

    If upstream_grad is None:
        Returns the Jacobian matrix J of softmax_output, where
        J[i][j] = s_i * (delta_ij - s_j).

    If upstream_grad is provided (same length as softmax_output):
        Returns the gradient with respect to the logits z, i.e.,
        grad_z = J^T @ upstream_grad = s * (upstream_grad - dot(upstream_grad, s)),
        where operations are elementwise and dot is the standard dot product.

    Arguments:
        softmax_output: sequence of floats or Value objects representing softmax probabilities.
        upstream_grad: optional sequence of floats representing dL/d(softmax_output).

    Returns:
        - Jacobian matrix (list of lists) if upstream_grad is None.
        - List of gradients w.r.t logits if upstream_grad is provided.
    """
    # Extract numeric probabilities
    s = []
    try:
        iterator = iter(softmax_output)
    except TypeError:
        raise TypeError("softmax_output must be an iterable of numbers or Value objects")
    for v in iterator:
        if isinstance(v, Value):
            s.append(float(v.data))
        else:
            s.append(float(v))

    if upstream_grad is None:
        n = len(s)
        J = []
        for i in range(n):
            row = []
            for j in range(n):
                row.append(s[i] * ((1.0 if i == j else 0.0) - s[j]))
            J.append(row)
        return J
    else:
        try:
            g_iter = iter(upstream_grad)
        except TypeError:
            raise TypeError("upstream_grad must be an iterable of numbers")
        g = [float(gi) for gi in g_iter]
        if len(g) != len(s):
            raise ValueError("upstream_grad must have the same length as softmax_output")
        dot = sum(si * gi for si, gi in zip(s, g))
        return [si * (gi - dot) for si, gi in zip(s, g)]