from beem.discussions import Discussions, Query
from beem.comment import Comment

n_respuestas_minimas = 5
diccionario = {}

def procesar (texto: str):
    return "count me " in texto
def is_own_author (autor: str):
    return author == 'subidu'
def is_banned (autor: str):
    list_banned = []
    return autor in list_banned
def generar_permlink_unico () -> str:
    return "".join(random.choices(string.digits, k=10))
def procesar_replies (replies: Comment):
    pass
def preparar_comentario (parent_author: str, parent_permlink: str, permlink: str, title: str = '', author: str = 'subidu' , body: str = 'Count me in ^^ @subidu') -> dict[str:str]:
    return {
        "parent_author": parent_author,
        "parent_permlink": parent_permlink,
        "author": author,
        "permlink": permlink,
        "title": title,
        "body": body,
    }


posts_generator = d.get_discussions("created", q, limit=6000)

def crear_diccionario_jerarquico(post, replies_list):
    # Nodo raíz (post)
    root = {
        "author": post['author'],
        "permlink": post['permlink'],
        "title": post.get('title', ''),
        "body": post.get('body', ''),
        "depth": 0,
        "children_count": post.get('children', 0),
        "children": []
    }
    # Índice temporal para enlazar rápidamente por (author, permlink)
    index = {(root["author"], root["permlink"]): root}

    # Crear nodos para cada respuesta
    for r in replies_list:
        ra = r['author']
        rp = r['permlink']
        index[(ra, rp)] = {
            "author": ra,
            "permlink": rp,
            "title": r.get('title', ''),
            "body": r.get('body', ''),
            "depth": r.get('depth', 1),
            "children_count": r.get('children', 0),
            "children": []
        }

    # Enlazar cada respuesta con su padre (post o reply)
    for r in replies_list:
        ra = r['author']
        rp = r['permlink']
        pa = r.get('parent_author')
        pp = r.get('parent_permlink')
        parent_key = (pa, pp) if pa and pp else (root["author"], root["permlink"])
        parent_node = index.get(parent_key, root)
        parent_node["children"].append(index[(ra, rp)])

    return root

X = 0

for post in posts_generator:
    post_author = post['author']
    post_permlink = post['permlink']
    post_replies = post['children']
    cnt = 0
    X += 1
    if post_replies > n_respuestas_minimas:
        comment = Comment(authorperm=f"{post_author}/{post_permlink}")
        post_replies: list = comment.get_replies()

        # Construir y almacenar el diccionario jerárquico del post y sus replies
        diccionario[f"{post_author}/{post_permlink}"] = crear_diccionario_jerarquico(post, post_replies)
        
        cnt = 0
        for replies in post_replies:
            author = replies['author']
            text = replies['body']
            if is_own_author(author):
                # Reevaluar el comentario
                break
            if is_banned(author):
                break
            if procesar(text):
                cnt+= 1
    if cnt > 3:
        print("Iterador: ",X)
        print(replies['author'],'/',replies['permlink']) 