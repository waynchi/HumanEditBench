from math import isqrt
from functools import lru_cache

@lru_cache(maxsize=None)
def is_sum_of_four_squares(n):
    if n < 4:
        return None
    m = isqrt(n)
    # Precompute sums of two positive squares up to n
    two_squares = {}
    for a in range(1, m + 1):
        a2 = a * a
        max_b = isqrt(n - a2)
        for b in range(1, max_b + 1):
            s = a2 + b * b
            if s not in two_squares:
                two_squares[s] = (a, b)
    # Find s + t == n where both s and t are sums of two positive squares
    for s, (a, b) in two_squares.items():
        t = n - s
        if t <= 0:
            continue
        pair = two_squares.get(t)
        if pair:
            c, d = pair
            return a, b, c, d
    return None

def find_four_squares_sums(limit):
    """
    Finds numbers up to a limit that can be expressed as the sum of four squares
    without any of the squares being zero.
    """
    results = []
    for n in range(1, limit + 1):
        result = is_sum_of_four_squares(n)
        if result:
            a, b, c, d = result
            if a != 0 and b != 0 and c != 0 and d != 0:
                results.append(n)
    return results

# Example usage:
limit = int(input("Digite o limite superior: "))
sums_found = find_four_squares_sums(limit)
print("Números que podem ser expressos como a soma de quatro quadrados não nulos:")
for num in sums_found:
    result = is_sum_of_four_squares(num)
    a, b, c, d = result
    print(f"{num} = {a}^2 + {b}^2 + {c}^2 + {d}^2")