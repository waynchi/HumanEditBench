import tkinter as tk
import random
import math

class Square:
    def __init__(self, canvas, size, x, y):
        self.canvas = canvas
        self.size = size
        self.x = x
        self.y = y
        self.dx = random.choice([-2, 2])
        self.dy = random.choice([-2, 2])
        color = random.choice(["red", "green", "blue", "orange", "purple", "yellow"])
        self.square = canvas.create_rectangle(x, y, x + size, y + size, fill=color)

    def move(self):
        self.canvas.update_idletasks()  # Ensure canvas size is up-to-date
        canvas_width = self.canvas.winfo_width()
        canvas_height = self.canvas.winfo_height()

        # Adjust direction on boundary collision
        next_x = self.x + self.dx
        next_y = self.y + self.dy
        changed = False

        if next_x <= 0 or next_x + self.size >= canvas_width:
            self.dx *= -1
            changed = True
        if next_y <= 0 or next_y + self.size >= canvas_height:
            self.dy *= -1
            changed = True

        # If we didn't bounce, move normally
        if not changed:
            self.x += self.dx
            self.y += self.dy
            self.canvas.move(self.square, self.dx, self.dy)
        else:
            self.x += self.dx
            self.y += self.dy
            self.canvas.coords(self.square, self.x, self.y,
                               self.x + self.size, self.y + self.size)

        # Splitting logic when hitting boundaries
        if changed:
            self.canvas.delete(self.square)
            if self.size > 10:
                new_size = self.size / 2
                squares.append(Square(self.canvas, new_size,
                                   canvas_width / 2 - new_size / 2,
                                   canvas_height / 2 - new_size / 2))
                squares.append(Square(self.canvas, new_size,
                                   canvas_width / 2 + new_size / 2,
                                   canvas_height / 2 + new_size / 2))
            return False
        return True

def update():
    global squares
    squares = [square for square in squares if square.move()]
    root.after(20, update)

# Create main window
root = tk.Tk()
root.title("Splitting Squares")

# Create canvas
canvas = tk.Canvas(root, width=600, height=600, bg="white")
canvas.pack(expand=True, fill="both")

# Create initial square
squares = [Square(canvas, 100, 250, 250)]

# Start animation
update()

# Start main loop
root.mainloop()