import torch
import torch.nn as nn


class SimpleConvNet1(nn.Module):
    def __init__(self, input_size=(3, 32, 32)):  # 以输入尺寸作为参数，默认3×32×32
        super().__init__()

        # 卷积层  3@32×32  -> 32@30×30  -> 32@15×15
        self.conv1 = nn.Sequential(
            nn.Conv2d(3, 32, kernel_size=3, padding=0),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=2, stride=2)
        )

        # 卷积层  32@15×15 -> 64@13×13  -> 64@6×6（向下取整）
        self.conv2 = nn.Sequential(
            nn.Conv2d(32, 64, kernel_size=3, padding=0),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=2, stride=2)
        )

        self.flatten = nn.Flatten()

        # 计算卷积后的特征图尺寸
        with torch.no_grad():
            dummy = torch.zeros(1, *input_size)
            dummy = self.conv1(dummy)
            dummy = self.conv2(dummy)
            flattened_size = dummy.numel()

        # 全连接层
        self.fc = nn.Sequential(
            nn.Linear(flattened_size, 512),
            nn.ReLU(inplace=True),
            nn.Linear(512, 3)
        )

    def forward(self, x):
        x = self.conv1(x)
        x = self.conv2(x)
        x = self.flatten(x)
        x = self.fc(x)
        return x


if __name__ == "__main__":
    net = SimpleConvNet1()
    print(net)
    x = torch.randn(2, 3, 32, 32)
    y = net(x)
    print(y.shape)  # 应输出 torch.Size([2, 3])