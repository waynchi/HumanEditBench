import os
import json
import sys
import re
from   tkinter import *
from   tkinter import filedialog
from   tkinter import messagebox as mb
import eel
import tasks

@eel.expose
def loadJSONFile(initialdir):
    root = Tk()
    root.withdraw()
    root.wm_attributes('-topmost', 1)
    file_path = filedialog.askopenfilename(title="Выберите JSON файл для загрузки",filetypes=[("JSON files", "*.json"), ("All files", "*.*")],initialdir=initialdir)
    if file_path:
        try:
            with open(file_path, 'r', encoding='utf-8') as file:
                data = json.load(file)
            return data
        except Exception as e:
            print(f"Ошибка при загрузке JSON файла: {e}")
            return None
    else:
        print("Файл не выбран.")
        return None

@eel.expose
def saveJSONFile(json_data):
    root = Tk()
    root.withdraw()
    root.wm_attributes('-topmost', 1)
    file_path = filedialog.asksaveasfilename(title="Сохранить JSON файл как",defaultextension=".json",filetypes=[("JSON files", "*.json"), ("All files", "*.*")])
    if file_path:
        try:
            with open(file_path, 'w', encoding='utf-8') as file:
                json.dump(json_data, file, ensure_ascii=False, indent=4)
            print(f"JSON файл успешно сохранен: {file_path}")
        except Exception as e:
            print(f"Ошибка при сохранении JSON файла: {e}")
    else:
        print("Файл не выбран.")

@eel.expose
def select_file(title,patterns,initialdir):
    patterns=patterns or ['*.*']
    filetypes = [ [p,p.split('/')[-1]] for p in patterns]
    regex     = [ p.split('/')[0] for p in patterns if len(p.split('/'))==2 ]
    root = Tk()
    root.withdraw()
    root.wm_attributes('-topmost', 1)
    while  True:
        file     = filedialog.askopenfilename(filetypes=filetypes,title=title,initialdir=initialdir)
        if not file or not regex: break
        folder=file.replace('\\','/').split('/')[-2]
        for r in regex:
            if re.match(r, folder):
                return file
        mb.showerror("Ошибка",f"Папка не соответствует паттерну {','.join(regex)}. \nПовторите выбор файла")
    return file

@eel.expose
def save_task(taskData,taskName,settings):
    try:
        return tasks.save_task(taskData,taskName,settings),0
    except Exception as e:
        return  0,str(e)

# Napisz get_task_list, aby uzyskać listę nazw plików *.xml z folderu settings['taskPath'].
# W pierwszej linii każdego pliku opcjonalnie zapisana jest linia: <!-- comment -->
# Przedstaw odpowiedź w formacie listy obiektów {fileName, comment, file_date_str}
@eel.expose
def get_task_list(settings):
    path = settings['taskPath']
    try:
        result = []
        for fname in os.listdir(path):
            if fname.endswith('.xml'):
                fpath = os.path.join(path, fname)
                first_line = ''
                try:
                    with open(fpath, 'r', encoding='utf-8') as f:
                        first_line = f.readline().strip()
                except:
                    pass
                # wyciągamy komentarz jeśli pierwsza linia pasuje do formatu <!-- comment -->
                comment = ''
                m = re.match(r'<!--\s*(.*?)\s*-->', first_line)
                if m:
                    comment = m.group(1)
                from datetime import datetime
                mtime = datetime.fromtimestamp(os.path.getmtime(fpath)).strftime('%Y-%m-%d %H:%M:%S')
                result.append({'fileName': fname, 'comment': comment, 'file_date_str': mtime})
        return result
    except Exception as e:
        print(f"Error getting task list: {e}")
        return []


if __name__ == "__main__":
    options={'mode':'chrome'}
    for i in range(2,len(sys.argv),2):
        if sys.argv[i-1]=='mode':  options['mode']=sys.argv[i]

    eel.init('web')
    eel.start('index.html', **options) # , host='localhost', port=8000, size=(1280,800), cmdline_args=['--start-fullscreen'])
    # eel.start('index.html', mode='chrome-app', host='localhost', port=8000, cmdline_args=['--start-fullscreen'])