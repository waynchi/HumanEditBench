from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

def cluster_data(features_transformed, clusters_specs, n_clusters=2, clustering_method='kmeans'):
    """
    Выполняет кластеризацию данных для разных наборов признаков.

    Args:
        features_transformed (pandas.DataFrame): Преобразованный DataFrame с параметрами.
        clusters_specs (dict): Словарь вида {cluster_name: (col1, col2, ...)}
        n_clusters (int): Количество кластеров.
        clustering_method (str): Метод кластеризации ('kmeans').

    Returns:
        pandas.DataFrame: DataFrame с добавленными столбцами меток кластеров.
    """
    if features_transformed is None:
        print("Сначала выполните преобразование данных (этап 5).")
        return None

    for cluster_col_name, cols in clusters_specs.items():
        features_for_clustering = features_transformed[list(cols)]

        if clustering_method == 'kmeans':
            model = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
            cluster_labels = model.fit_predict(features_for_clustering)

            if len(set(cluster_labels)) > 1:
                silhouette_avg = silhouette_score(features_for_clustering, cluster_labels)
                print(f"Коэффициент силуэта для '{cluster_col_name}' ({n_clusters} кластеров): {silhouette_avg:.4f}")
            else:
                print(f"Невозможно рассчитать коэффициент силуэта для '{cluster_col_name}' (все точки в одном кластере).")
        else:
            print("Неподдерживаемый метод кластеризации.")
            continue

        features_transformed[cluster_col_name] = cluster_labels
        print(f"Кластеризация '{cluster_col_name}' выполнена. Метки кластеров добавлены в столбец '{cluster_col_name}'.")

    return features_transformed

# Выполнение кластеризации (после этапа 5 и до этапа 6)
if 'features_transformed' in locals() and features_transformed is not None:
    clusters_specs = {
        'cluster1': ('col1', 'col2'),
        'cluster2': ('col3',)
    }
    n_clusters = 3  # Количество кластеров (подберите оптимальное значение)
    features_transformed = cluster_data(features_transformed, clusters_specs, n_clusters)
    
    # Визуализация кластеров (пример для случая, когда есть 2 числовых признака)
    numerical_features = features_transformed.select_dtypes(include=np.number)
    if numerical_features.shape[1] >= 2:
        plt.figure(figsize=(8, 6))
        plt.scatter(numerical_features.iloc[:, 0], numerical_features.iloc[:, 1], c=features_transformed[cluster_feature_name], cmap='viridis')
        plt.xlabel(numerical_features.columns[0])
        plt.ylabel(numerical_features.columns[1])
        plt.title('Результаты кластеризации')
        plt.colorbar(label='Номер кластера')
        plt.show()
    else:
        print("Недостаточно числовых признаков для визуализации кластеров на плоскости.")
else:
    print("Сначала выполните этап 5 (Преобразование данных).")