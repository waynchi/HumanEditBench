import numpy as np

def conjugate_gradient(A, b, x0=None, tol=1e-6, max_iter=None):
    """
    用于共轭梯度法的函数。
    Python。

    求解线性方程组  A x = b。
    参数
    ----
    A : array_like, shape (n, n)
        对称正定矩阵
    b : array_like, shape (n,)
        右端向量
    x0 : array_like, shape (n,), optional
        初始猜测解，默认为零向量
    tol : float, optional
        收敛容差，迭代中途残差范数 < tol 则停止
    max_iter : int, optional
        最大迭代次数，默认为 n

    返回
    ----
    x : ndarray, shape (n,)
        近似解
    info : dict
        包含迭代次数 'niter' 与最终残差范数 'residual'
    """
    A = np.asarray(A, dtype=float)
    b = np.asarray(b, dtype=float)
    n = b.size

    if max_iter is None:
        max_iter = n

    if x0 is None:
        x = np.zeros_like(b)
    else:
        x = np.asarray(x0, dtype=float).copy()

    r = b - A @ x
    p = r.copy()
    rsold = np.dot(r, r)

    for i in range(max_iter):
        Ap = A @ p
        alpha = rsold / np.dot(p, Ap)
        x = x + alpha * p
        r = r - alpha * Ap
        rsnew = np.dot(r, r)
        if np.sqrt(rsnew) < tol:
            break
        beta = rsnew / rsold
        p = r + beta * p
        rsold = rsnew

    info = {'niter': i + 1, 'residual': np.sqrt(rsnew)}
    return x, info