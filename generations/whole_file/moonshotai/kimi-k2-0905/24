import aiofiles
import json
import asyncio

# Внутри correct_name заменяем синхронную работу с файлом на асинхронную
# (весь остальной код остаётся без изменений)

class ticker():
    ...  # всё, что было до correct_name, остаётся прежним

    async def correct_name(self):
        """Проверка имени тикера на наличие в множестве тикеров. Множество обновляется не чаще раза в день"""
        async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", "r", encoding="utf-8") as info_opened_file:
            info = json.loads(await info_opened_file.read())
        if datetime.datetime.now() - datetime.timedelta(days=1) > datetime.datetime.strptime(info["last_day_check"]["ticker"], "%Y-%m-%d %H:%M:%S.%f"): #проверяем условие что дата перезаписи списка тикеров это хотя бы 1 день назад
            #если отличается более чем на 1 день, то переписываем список (множество) тикеров:
            set_tickers = set() #создаём пустое множество, в него будем заливать тикеры
            s = "https://iss.moex.com/iss/engines/stock/markets/shares/boards/TQBR/securities.xml?iss.meta=off"
            r = requests.get(s)
            root = xml.etree.ElementTree.fromstring(r.content) #запрос всё равно выдаёт данные сайта как строку, так что без fromstring никак
            for data in root.findall("data"):
                if data.get("id") == "securities":
                    rows = data.find("rows")
                    for row in rows.findall("row"):
                        set_tickers.add(row.get("SECID")) #заливаем тикеры в наше множество
            async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\set_tickers.bin", "wb") as set_tickers_file_opened:
                import pickle
                await set_tickers_file_opened.write(pickle.dumps(set_tickers))
            #поменяем время последнего обновления
            info["last_day_check"]["ticker"] = str(datetime.datetime.now())
            async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", "w", encoding="utf-8") as info_opened_file:
                await info_opened_file.write(json.dumps(info, indent=3, ensure_ascii=False))
        #теперь просто проверим есть ли тикер в списке тикеров
        async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\set_tickers.bin", "rb") as set_tickers_file_opened:
            import pickle
            set_tickers = pickle.loads(await set_tickers_file_opened.read())
        if self.name in set_tickers: #просто проверяем есть ли тикер в множестве тикеров
            return True
        else:
            return False

    ...  # всё, что было после correct_name, остаётся прежним