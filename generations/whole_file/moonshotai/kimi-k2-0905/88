import aiohttp          # для асинхронных HTTP-запросов
import xml.etree.ElementTree  # для обработки XML
import matplotlib.pyplot as plt
import pandas as pd
import datetime
import pickle
import json
import asyncio          # для асинхронного ввода-вывода
import aiofiles         # для асинхронной работы с файлами


class valute():
    """Валюта и всё с ней связанное, через ЦБ РФ \n
    Требуются библиотеки: \n
    aiohttp, aiofiles, asyncio, xml.etree.ElementTree, matplotlib.pyplot as plt, pandas as pd, datetime, pickle, json \n
    """
    def __init__(self, name):
        self.name = name

    # -------------------------------------------------------------
    # АСИНХРОННАЯ часть: методы correct_name и CurrentExchangeRate
    # -------------------------------------------------------------
    async def correct_name(self) -> bool:
        """Проверка имени валюты на наличие в множестве валют. Множество обновляется не чаще раза в день"""
        info_path = r"D:\MoexAPI_bot_aiogram3\data_files\Info.json"
        set_valutes_path = r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin"

        # асинхронное чтение Info.json
        async with aiofiles.open(info_path, "r", encoding="utf-8") as f:
            info = json.loads(await f.read())

        # проверка даты последнего обновления
        last_check = datetime.datetime.strptime(info["last_day_check"]["valute"], "%Y-%m-%d %H:%M:%S.%f")
        if datetime.datetime.now() - datetime.timedelta(days=1) > last_check:
            # обновляем список валют
            set_valutes = set()
            async with aiohttp.ClientSession() as session:
                async with session.get("http://www.cbr.ru/scripts/XML_daily.asp") as resp:
                    text = await resp.text()

            root = xml.etree.ElementTree.fromstring(text)
            for Valute in root.findall("Valute"):
                CharCode = Valute.find("CharCode")
                if CharCode is not None:
                    set_valutes.add(CharCode.text)

            # асинхронно сохраняем множество
            async with aiofiles.open(set_valutes_path, "wb") as f:
                await f.write(pickle.dumps(set_valutes))

            # обновляем дату в Info.json
            info["last_day_check"]["valute"] = str(datetime.datetime.now())
            async with aiofiles.open(info_path, "w", encoding="utf-8") as f:
                await f.write(json.dumps(info, indent=3, ensure_ascii=False))

        # чтение сохранённого множества
        async with aiofiles.open(set_valutes_path, "rb") as f:
            set_valutes = pickle.loads(await f.read())

        return self.name in set_valutes

    async def CurrentExchangeRate(self) -> str | None:
        """Текущий курс обмена валюты на рубль"""
        async with aiohttp.ClientSession() as session:
            async with session.get("http://www.cbr.ru/scripts/XML_daily.asp") as resp:
                text = await resp.text()

        root = xml.etree.ElementTree.fromstring(text)
        for Valute in root.findall("Valute"):
            CharCode = Valute.find("CharCode")
            if CharCode is not None and CharCode.text == self.name:
                VunitRate = Valute.find("VunitRate")
                if VunitRate is not None:
                    return VunitRate.text
        return None