def create_matrix(rows: int, cols: int, fill_value=0) -> list:
    """Creates a matrix of size rows x cols, filled with fill_value."""
    return [[fill_value for _ in range(cols)] for _ in range(rows)]

def add_matrices(matrix_a: list, matrix_b: list) -> list:
    """Adds two matrices of the same size."""
    return [
        [matrix_a[i][j] + matrix_b[i][j] for j in range(len(matrix_a[0]))]
        for i in range(len(matrix_a))
    ]

def scalar_multiply(matrix: list, scalar: float) -> list:
    """Multiplies all elements of a matrix by a scalar."""
    return [[elem * scalar for elem in row] for row in matrix]

def multiply_matrices(matrix_a: list, matrix_b: list) -> list:
    """Multiplies two matrices."""
    a_rows, a_cols = len(matrix_a), len(matrix_a[0])
    b_rows, b_cols = len(matrix_b), len(matrix_b[0])
    if a_cols != b_rows:
        raise ValueError("Incompatible dimensions for matrix multiplication")
    result = create_matrix(a_rows, b_cols)
    for i in range(a_rows):
        for j in range(b_cols):
            total = 0
            for k in range(a_cols):
                total += matrix_a[i][k] * matrix_b[k][j]
            result[i][j] = total
    return result

def transpose_matrix(matrix: list) -> list:
    """Transposes a matrix."""
    return [list(row) for row in zip(*matrix)]

def determinant_3x3(matrix: list) -> float:
    """Calculates the determinant of a 3x3 matrix."""
    a, b, c = matrix[0]
    d, e, f = matrix[1]
    g, h, i = matrix[2]
    return a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g)