import aiohttp          # асинхронные HTTP-запросы
import xml.etree.ElementTree as ET
import matplotlib.pyplot as plt
import pandas as pd
import datetime
import pickle
import json
import asyncio
from aiofiles import open as aio_open   # асинхронная работа с файлами


# класс валюта
class valute():
    """Валюта и всё с ней связанное, через ЦБ РФ

Требуются библиотеки:

aiohttp

xml.etree.ElementTree

matplotlib.pyplot as plt

pandas as pd

datetime

pickle

json

aiofiles"""
    def __init__(self, name):
        self.name = name

    async def correct_name(self):
        """Проверка имени валюты на наличие в множестве валют. Множество обновляется не чаще раза в день."""
        async with aio_open(r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", "r", encoding="utf-8") as info_opened_file:
            info = json.loads(await info_opened_file.read())

        if datetime.datetime.now() - datetime.timedelta(days=1) > datetime.datetime.strptime(
                info["last_day_check"]["valute"], "%Y-%m-%d %H:%M:%S.%f"):
            # Обновляем список валют
            set_valutes = set()

            async with aiohttp.ClientSession() as session:
                async with session.get("http://www.cbr.ru/scripts/XML_daily.asp") as resp:
                    content = await resp.text()

            root = ET.fromstring(content)
            for Valute in root.findall("Valute"):
                CharCode = Valute.find("CharCode")
                set_valutes.add(CharCode.text)

            async with aio_open(r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin", "wb") as set_valutes_file:
                await set_valutes_file.write(pickle.dumps(set_valutes))

            info["last_day_check"]["valute"] = str(datetime.datetime.now())
            async with aio_open(r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", "w", encoding="utf-8") as info_opened_file:
                await info_opened_file.write(json.dumps(info, indent=3, ensure_ascii=False))

        async with aio_open(r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin", "rb") as set_valutes_file:
            set_valutes = pickle.loads(await set_valutes_file.read())

        return self.name in set_valutes

    async def CurrentExchangeRate(self):
        '''Текущий курс обмена валюты на рубль'''
        async with aiohttp.ClientSession() as session:
            async with session.get("http://www.cbr.ru/scripts/XML_daily.asp") as resp:
                content = await resp.text()

        root = ET.fromstring(content)
        for Valute in root.findall("Valute"):
            for CharCode in Valute.findall("CharCode"):
                if CharCode.text == self.name:
                    return Valute.find("VunitRate").text