from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

def cluster_data(features_transformed, cluster_columns_map, n_clusters=2, clustering_method='kmeans'):
    """Realiza la agrupación de datos por conjuntos de columnas especificados.

Args:
    features_transformed (pandas.DataFrame): DataFrame transformado con parámetros.
    cluster_columns_map (dict): Diccionario donde las claves son los nombres de las nuevas columnas
                                y los valores son tuplas o listas con los nombres de las columnas 
                                a utilizar para cada clusterización.
    n_clusters (int): Número de clústeres.
    clustering_method (str): Método de agrupación ('kmeans').

Returns:
    pandas.DataFrame: DataFrame con las columnas de etiquetas de clústeres añadidas."""
    if features_transformed is None:
        print("Сначала выполните преобразование данных (этап 5).")
        return None

    features_for_clustering = features_transformed.copy()

    for cluster_feature_name, columns in cluster_columns_map.items():
        if isinstance(columns, str):
            columns = [columns]
        missing_cols = [col for col in columns if col not in features_for_clustering.columns]
        if missing_cols:
            print(f"Columnas no encontradas para '{cluster_feature_name}': {missing_cols}")
            continue

        sub_features = features_for_clustering[list(columns)]

        if clustering_method == 'kmeans':
            model = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
            cluster_labels = model.fit_predict(sub_features)
            
            # Evaluación de la calidad de la agrupación (por ejemplo, utilizando el coeficiente de silueta)
            if len(np.unique(cluster_labels)) > 1: # Comprobación para el caso en que todos los puntos se asignan a un solo clúster
                silhouette_avg = silhouette_score(sub_features, cluster_labels)
                print(f"Коэффициент силуэта для {n_clusters} кластеров ({cluster_feature_name}): {silhouette_avg:.4f}")
            else:
                print(f"Невозможно рассчитать коэффициент силуэта для {n_clusters} кластера ({cluster_feature_name}: все точки в одном кластере).")
        else:
            print("Неподдерживаемый метод кластеризации.")
            continue

        features_for_clustering[cluster_feature_name] = cluster_labels
        print(f"Кластеризация выполнена. Метки кластеров добавлены в столбец '{cluster_feature_name}'.")
    
    return features_for_clustering


# Ejecución de la clusterización (después de la etapa 5 y antes de la etapa 6)
if 'features_transformed' in locals() and features_transformed is not None:
    cluster_columns_map = {
        'cluster1': ('columna1', 'columna2'),
        'cluster2': ('columna3',)
    }  # Nombre de las nuevas columnas y columnas a usar para cada clusterización
    n_clusters = 3  # Cantidad de clústeres (seleccione el valor óptimo)
    features_transformed = cluster_data(features_transformed, cluster_columns_map, n_clusters)
    
    # Visualización de los clústeres (ejemplo para el caso cuando hay 2 características numéricas)
    for cluster_feature_name, columns in cluster_columns_map.items():
        if isinstance(columns, str):
            columns = [columns]
        numerical_features = features_transformed[list(columns)]
        if len(columns) == 2:
            plt.figure(figsize=(8, 6))
            plt.scatter(numerical_features.iloc[:, 0], numerical_features.iloc[:, 1], c=features_transformed[cluster_feature_name], cmap='viridis')
            plt.xlabel(columns[0])
            plt.ylabel(columns[1])
            plt.title(f'Результаты кластеризации ({cluster_feature_name})')
            plt.colorbar(label='Номер кластера')
            plt.show()
        else:
            print(f"Недостаточно числовых признаков для визуализации кластеров на плоскости ({cluster_feature_name}).")
else:
    print("Сначала выполните этап 5 (Преобразование данных).")