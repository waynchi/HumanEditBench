def create_matrix(rows: int, cols: int, fill_value=0) -> list:
    """创建一个大小为rows x cols的矩阵并用fill_value填充。"""
    return [[fill_value for _ in range(cols)] for _ in range(rows)]

def add_matrices(matrix_a: list, matrix_b: list) -> list:
    """逐元素相加两个相同大小的矩阵。"""
    return [[matrix_a[i][j] + matrix_b[i][j]
             for j in range(len(matrix_a[0]))]
            for i in range(len(matrix_a))]

def scalar_multiply(matrix: list, scalar: float) -> list:
    """将矩阵的每个元素乘以标量scalar。"""
    return [[matrix[i][j] * scalar for j in range(len(matrix[0]))]
            for i in range(len(matrix))]

def multiply_matrices(matrix_a: list, matrix_b: list) -> list:
    """计算两个矩阵的乘积。"""
    m, n, p = len(matrix_a), len(matrix_b), len(matrix_b[0])
    return [[sum(matrix_a[i][k] * matrix_b[k][j] for k in range(n))
             for j in range(p)] for i in range(m)]

def transpose_matrix(matrix: list) -> list:
    """返回矩阵的转置。"""
    return [[matrix[i][j] for i in range(len(matrix))]
            for j in range(len(matrix[0]))]

def determinant_3x3(matrix: list) -> float:
    """计算3x3矩阵的行列式。"""
    a, b, c = matrix[0]
    d, e, f = matrix[1]
    g, h, i = matrix[2]
    return a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g)