import numpy as np

def conjugate_gradient(A, b, x0=None, tol=1e-8, max_iter=None):
    """
    Метод спряжённых градиентов для решения системы линейных уравнений Ax = b.
    
    Parameters
    ----------
    A : array_like
        Симметричная положительно определённая матрица размерности (n, n).
    b : array_like
        Вектор правой части размерности (n,).
    x0 : array_like, optional
        Начальное приближение. Если не задано, используется нулевой вектор.
    tol : float, optional
        Допустимая погрешность по норме остатка. По умолчанию 1e-8.
    max_iter : int, optional
        Максимальное число итераций. По умолчанию равно размерности системы.
    
    Returns
    -------
    x : ndarray
        Приближённое решение системы.
    info : dict
        Словарь с информацией о процессе:
        - 'niter': количество выполненных итераций;
        - 'residual': норма остатка на последней итерации.
    """
    A = np.asarray(A, dtype=float)
    b = np.asarray(b, dtype=float)
    n = b.shape[0]
    
    if max_iter is None:
        max_iter = n
    
    if x0 is None:
        x = np.zeros_like(b)
    else:
        x = np.asarray(x0, dtype=float).copy()
    
    r = b - A @ x
    p = r.copy()
    rsold = np.dot(r, r)
    
    for i in range(max_iter):
        Ap = A @ p
        alpha = rsold / np.dot(p, Ap)
        x = x + alpha * p
        r = r - alpha * Ap
        rsnew = np.dot(r, r)
        
        if np.sqrt(rsnew) < tol:
            break
        
        p = r + (rsnew / rsold) * p
        rsold = rsnew
    
    info = {'niter': i + 1, 'residual': np.sqrt(rsnew)}
    return x, info