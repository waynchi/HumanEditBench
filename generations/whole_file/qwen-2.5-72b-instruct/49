def create_matrix(rows: int, cols: int, fill_value=0) -> list:
    """
    Создает матрицу размера rows x cols, заполненную значением fill_value.
    Параметры:
    rows (int): количество строк.
    cols (int): количество столбцов.
    fill_value (любой тип): значение для заполнения матрицы.
    Возвращает:
    list: матрица в виде списка списков.
    """
    return [[fill_value for _ in range(cols)] for _ in range(rows)]

def add_matrices(matrix_a: list, matrix_b: list) -> list:
    """
    Складывает две матрицы одинакового размера.
    Параметры:
    matrix_a (list): первая матрица.
    matrix_b (list): вторая матрица.
    Возвращает:
    list: результат сложения матриц.
    """
    if len(matrix_a) != len(matrix_b) or len(matrix_a[0]) != len(matrix_b[0]):
        raise ValueError("Матрицы должны быть одинакового размера")

    rows = len(matrix_a)
    cols = len(matrix_a[0])
    result = [[0 for _ in range(cols)] for _ in range(rows)]
    
    for i in range(rows):
        for j in range(cols):
            result[i][j] = matrix_a[i][j] + matrix_b[i][j]
    
    return result

def scalar_multiply(matrix: list, scalar: float) -> list:
    """
    Умножает все элементы матрицы на скаляр.
    Параметры:
    matrix (list): исходная матрица.
    scalar (float): число, на которое умножаются элементы матрицы.
    Возвращает:
    list: результат умножения матрицы на скаляр.
    """
    rows = len(matrix)
    cols = len(matrix[0])
    result = [[0 for _ in range(cols)] for _ in range(rows)]
    
    for i in range(rows):
        for j in range(cols):
            result[i][j] = matrix[i][j] * scalar
    
    return result

def multiply_matrices(matrix_a: list, matrix_b: list) -> list:
    """
    Перемножает две матрицы.
    Параметры:
    matrix_a (list): первая матрица.
    matrix_b (list): вторая матрица.
    Возвращает:
    list: результат умножения матриц.
    """
    if len(matrix_a[0]) != len(matrix_b):
        raise ValueError("Количество столбцов первой матрицы должно совпадать с количеством строк второй матрицы")

    rows_a = len(matrix_a)
    cols_a = len(matrix_a[0])
    cols_b = len(matrix_b[0])
    result = [[0 for _ in range(cols_b)] for _ in range(rows_a)]
    
    for i in range(rows_a):
        for j in range(cols_b):
            for k in range(cols_a):
                result[i][j] += matrix_a[i][k] * matrix_b[k][j]
    
    return result

def transpose_matrix(matrix: list) -> list:
    """
    Транспонирует матрицу.
    Параметры:
    matrix (list): исходная матрица.
    Возвращает:
    list: транспонированная матрица.
    """
    rows = len(matrix)
    cols = len(matrix[0])
    result = [[0 for _ in range(rows)] for _ in range(cols)]
    
    for i in range(rows):
        for j in range(cols):
            result[j][i] = matrix[i][j]
    
    return result

def determinant_3x3(matrix: list) -> float:
    """
    Вычисляет определитель матрицы 3x3.
    Параметры:
    matrix (list): исходная матрица размером 3x3.
    Возвращает:
    float: определитель матрицы.
    """
    if len(matrix) != 3 or len(matrix[0]) != 3:
        raise ValueError("Матрица должна быть размером 3x3")
    
    a, b, c = matrix[0]
    d, e, f = matrix[1]
    g, h, i = matrix[2]
    
    return a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g)