plik = open("dane_obrazki.txt")
maxbitybledne = 0
bityBledne = list()

def czyPoprawny(obrazek): # obrzek zawiera liste łancuchów znaków  i można korzystać z operatora balicowego
                            # obrazek[i][j]
    for wiersz in obrazek[:-1]: # nie liczymy z ostaniego wiersza tam są bity parzystosci
        if wiersz[:-1].count('1') % 2 != int(wiersz[-1]):
            return False
    for i in range(20): # i = 0,1,2,3,4,5,6,7..19
        kolumna = ""
        for j in range(21):  # j = 0,1,2,3,4,5,..20
            kolumna+=obrazek[j][i]
        if kolumna[:-1].count('1')% 2 != int(kolumna[-1]):
            return False
    return True

def czyNaprawialny(obrazek):
    bityKolBleden = 0
    bityWierBledne = 0
    for wiersz in obrazek[:-1]: # nie liczymy z ostaniego wiersza tam są bity parzystosci
        if wiersz[:-1].count('1') % 2 != int(wiersz[-1]):
            bityWierBledne+=1
    for i in range(20): # i = 0,1,2,3,4,5,6,7..19
        kolumna = ""
        for j in range(21):  # j = 0,1,2,3,4,5,..20
            kolumna+=obrazek[j][i]
        if kolumna[:-1].count('1')% 2 != int(kolumna[-1]):
           bityKolBleden+=1
    global maxbitybledne
    if maxbitybledne<(bityKolBleden+bityWierBledne):
        maxbitybledne = bityKolBleden+bityWierBledne
    bityBledne.append(bityKolBleden+bityWierBledne)

    if bityWierBledne >1 :
        return False
    if bityKolBleden > 1:
        return False

    return True

def napraw(obrazek):
    """Wejście stanowi plik tekstowy zawierający dane czarnobiałego obrazka zakodowane jako piksele.
0 - piksel biały 1 - piksel czarny. 
Każdy wiersz oraz kolumna zawiera na swoim końcu bit parzystości. 
Bit parzystości jest równy 0, jeśli ilość jedynek w wierszu (lub w kolumnie) jest parzysta, a 
1 jeśli jest nieparzysta.
np.
0 1 1 0 1 1 bit błędny należy zmienić go na przeciwny
1 1 1 0 1 0
1 1 1 1 1 1
0 1 1 0 0 0
1 1 0 1 1 0
1 1 0 0 0 - bity parzystości kolumny 
 ^
 |- bity parzystości wiersza
Napisz funkcje, która znajdzie uszkodzone obrazki oraz je naprawi. Znaczy to, że jest to obrazek naprawialny ( 
posiada co najwyżej jeden bit parzystości wiersza i co najwyżej jeden bit parzystości kolumny 
niepoprawny) a następnie naprawi te obrazy 
Wynik ma zawierać obrazek błędny (naprawialny) oraz obrazek poprawiony"""
    
    wynik = [obrazek.copy(), obrazek.copy()]  # [błędny, naprawiony]
    bityKolBleden = 0
    bityWierBledne = 0
    bityWierBledneInd = []
    bityKolBledenInd = []

    # Znalezienie indeksów wierszy i kolumn z błędami
    for i, wiersz in enumerate(obrazek[:-1]):
        if wiersz[:-1].count('1') % 2 != int(wiersz[-1]):
            bityWierBledne += 1
            bityWierBledneInd.append(i)
    
    for i in range(20):
        kolumna = ""
        for j in range(21):
            kolumna += obrazek[j][i]
        if kolumna[:-1].count('1') % 2 != int(kolumna[-1]):
            bityKolBleden += 1
            bityKolBledenInd.append(i)

    # Naprawianie obrazka
    if bityWierBledne == 1 and bityKolBleden == 1:
        wiersz_bledny = bityWierBledneInd[0]
        kolumna_bledna = bityKolBledenInd[0]
        wynik[1][wiersz_bledny] = wynik[1][wiersz_bledny][:kolumna_bledna] + ('0' if wynik[1][wiersz_bledny][kolumna_bledna] == '1' else '1') + wynik[1][wiersz_bledny][kolumna_bledna+1:]
    
    return wynik

poprawne = 0
naprawialne = 0
obrazek = list()
for linia in plik:
    wiersz = linia.strip() # odcinamy białe znaki np enter
   # wiersz = wiersz[:-1]  # tylko dane obrazka bez bitu parzystosci  teraz czytamy cala wiersz danych
    obrazek.append(wiersz)
    if len(obrazek) == 21: # mamy 21 lini czyli cały obrazek razem z wierszam bitów parzystosci
        if czyPoprawny(obrazek):
            poprawne+=1
        elif czyNaprawialny(obrazek):
            naprawialne+=1
            naprawiony = napraw(obrazek)


    if len(obrazek) == 22:  # po 22 lini czyscimy obrazek by czytać wiersze nastepnego obrazka
        obrazek = list()

print(poprawne,naprawialne,200-poprawne-naprawialne)
print(maxbitybledne,max(bityBledne))