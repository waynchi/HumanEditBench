#!/usr/bin/env python3
"""
Dictionary word-length lookup

This program loads an English word list (tries several common sources)
and lets the user request words of a given length. It will print up
to 10 words that have exactly N characters.

Behavior:
- Tries to load /usr/share/dict/words or similar system dictionaries.
- If not available, attempts to use NLTK's words corpus (if installed).
- If neither is available, falls back to a bundled small word list so the
  program still functions.
- Prompts repeatedly for a positive integer N (or 'q' to quit).
- Prints up to 10 words of length N (alphabetic words only).
"""

import os
import sys
import random
import string

def load_word_list():
    """
    Try several strategies to obtain an English word list:
    1) Common Unix dictionary files: /usr/share/dict/words, /usr/dict/words
    2) NLTK corpus (if nltk is installed and data available)
    3) A small built-in fallback list

    Returns a sorted list of unique lowercase words containing only letters a-z.
    """
    candidates = [
        "/usr/share/dict/words",
        "/usr/dict/words",
        "/usr/dict/web2",
        "/usr/dict/web2a",
    ]

    words = set()

    # 1) Try system dictionary files
    for path in candidates:
        if os.path.isfile(path):
            try:
                with open(path, "r", encoding="utf-8", errors="ignore") as f:
                    for line in f:
                        w = line.strip()
                        # Keep alphabetic words only, drop names/punctuation/etc.
                        if w.isalpha():
                            words.add(w.lower())
                if words:
                    print(f"Loaded {len(words)} words from {path}")
                    break
            except Exception:
                # If file exists but can't be read for some reason, continue to next
                pass

    # 2) Try NLTK words corpus
    if not words:
        try:
            import nltk
            # Try to import words corpus
            try:
                from nltk.corpus import words as nltk_words
                word_list = nltk_words.words()
                for w in word_list:
                    if isinstance(w, str) and w.isalpha():
                        words.add(w.lower())
                if words:
                    print(f"Loaded {len(words)} words from NLTK corpus")
            except Exception:
                # nltk may be installed but the words corpus might not be downloaded.
                # Avoid attempting to download data automatically here.
                pass
        except Exception:
            # nltk not installed; move on
            pass

    # 3) Fallback small built-in list (so program still runs on systems without dict)
    if not words:
        fallback = [
            # A small assortment of English words of varying lengths.
            "a", "i", "an", "the", "be", "see", "sea", "tree", "house", "computer",
            "python", "program", "dictionary", "language", "network", "science",
            "art", "music", "beautiful", "quick", "brown", "fox", "jumps", "over",
            "lazy", "dog", "information", "data", "analysis", "random", "sample",
            "example", "testing", "development", "function", "variable", "constant",
            "integer", "string", "boolean", "float", "complex", "algorithm", "model",
            "classification", "regression", "neural", "learning", "machine", "vision",
            "natural", "processing", "token", "stream", "buffer", "thread", "process",
            "utility", "system", "kernel", "module", "package", "install", "update",
            "remove", "create", "delete", "read", "write", "open", "close", "input",
            "output", "error", "debug", "release", "version", "branch", "commit",
            "merge", "checkout", "clone", "remote", "origin", "master", "main"
        ]
        words.update(w for w in fallback if w.isalpha())
        print("Using built-in fallback word list (small).")

    # Return a sorted list for stable output
    return sorted(words)


def words_of_length(words, n):
    """Return a list of words from 'words' that have exactly n characters."""
    if n <= 0:
        return []
    return [w for w in words if len(w) == n]


def prompt_int(prompt_text):
    """Prompt the user for a positive integer or 'q' to quit. Returns int or None (for quit)."""
    while True:
        try:
            s = input(prompt_text).strip()
        except (EOFError, KeyboardInterrupt):
            print()  # newline after Ctrl+D/Ctrl+C
            return None
        if not s:
            # empty input: reprompt
            continue
        if s.lower() in ("q", "quit", "exit"):
            return None
        # Try to parse integer
        try:
            val = int(s)
            if val <= 0:
                print("Please enter a positive integer for the word length.")
                continue
            return val
        except ValueError:
            print("Please enter a positive integer (or 'q' to quit).")


def main():
    words = load_word_list()
    if not words:
        print("No words available. Exiting.")
        return

    print("\nEnter the desired word length N to see up to 10 words of that length.")
    print("Type 'q' or press Ctrl+C to quit.\n")

    while True:
        n = prompt_int("Word length N> ")
        if n is None:
            print("Goodbye.")
            break

        matches = words_of_length(words, n)
        if not matches:
            print(f"No {n}-letter words found in the loaded dictionary.\n")
            continue

        # Choose up to 10 words. Prefer random sample if there are more than 10.
        if len(matches) > 10:
            sample = random.sample(matches, 10)
            # Sort sample for readable deterministic-ish output
            sample.sort()
        else:
            sample = sorted(matches)

        print(f"\nFound {len(matches)} {n}-letter word(s). Showing {len(sample)}:")
        for w in sample:
            print(w)
        print()  # blank line before next prompt


if __name__ == "__main__":
    main()