import math
class Value:
    """ stores a single scalar value and its gradient """

    def __init__(self, data, _children=(), _op=''):
        self.data = data
        self.grad = 0
        # internal variables used for autograd graph construction
        self._backward = lambda: None
        self._prev = set(_children)
        self._op = _op # the op that produced this node, for graphviz / debugging / etc

    def __add__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data + other.data, (self, other), '+')

        def _backward():
            self.grad += out.grad
            other.grad += out.grad
        out._backward = _backward

        return out

    def __mul__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data * other.data, (self, other), '*')

        def _backward():
            self.grad += other.data * out.grad
            other.grad += self.data * out.grad
        out._backward = _backward

        return out

    def __pow__(self, other):
        assert isinstance(other, (int, float)), "only supporting int/float powers for now"
        out = Value(self.data**other, (self,), f'**{other}')

        def _backward():
            self.grad += (other * self.data**(other-1)) * out.grad
        out._backward = _backward

        return out


        print(f'** EXP {self}')
        out = Value(math.exp(self.data), (self,), "e")
        def _backward():
            self.grad += math.exp(self.data) * out.grad
        out._backward = _backward
        
        return out
    
    def log(self):
        out = Value(math.log(self.data), (self,), f'log{self.data}')
        def _backward():
            self.grad += 1 / self.data
        out._backward = _backward       
        
        return out
    
    def relu(self):
        assert isinstance(self.data, (int, float)), "only supporting int/float powers for now"
        out = Value(0 if self.data < 0 else self.data, (self,), 'ReLU')

        def _backward():
            self.grad += (out.data > 0) * out.grad
        out._backward = _backward

        return out
    
    @staticmethod
    def softmax(xs):
        """
        Compute softmax over a list of Value (or numbers). Returns a list of Value outputs.
        The backward for each output distributes gradients to all inputs using the softmax Jacobian:
          dy_i/dx_k = y_i * (delta_ik - y_k)
        """
        # ensure we have Value instances
        xs = [x if isinstance(x, Value) else Value(x) for x in xs]
        # numerical stability: subtract max
        max_val = max(x.data for x in xs)
        exps = [math.exp(x.data - max_val) for x in xs]
        s = sum(exps)
        ys = [e / s for e in exps]

        outs = [Value(y, tuple(xs), 'softmax') for y in ys]

        # attach backward functions for each output node
        for i, out in enumerate(outs):
            # capture local copies to avoid late-binding issues
            yi = ys[i]
            ys_local = ys  # alias
            xs_local = xs
            def _backward_factory(yi, ys_local, xs_local, out):
                def _backward():
                    # for each input k, accumulate gradient from this output
                    for k, x in enumerate(xs_local):
                        # dy_i/dx_k = y_i * (1 if k==i else -y_k)
                        jac = yi * (1.0 if k == i else -ys_local[k])
                        x.grad += out.grad * jac
                return _backward
            out._backward = _backward_factory(yi, ys_local, xs_local, out)

        return outs

    def backward(self):

        # topological order all of the children in the graph
        topo = []
        visited = set()
        def build_topo(v):
            if v not in visited:
                visited.add(v)
                for child in v._prev:
                    build_topo(child)
                topo.append(v)
        build_topo(self)

        # go one variable at a time and apply the chain rule to get its gradient
        self.grad = 1
        for v in reversed(topo):
            v._backward()

    def __neg__(self): # -self
        return self * -1
    def __gt__(self, other):
        return self.data > other.data

    def __radd__(self, other): # other + self
        return self + other

    def __sub__(self, other): # self - other
        return self + (-other)

    def __rsub__(self, other): # other - self
        return other + (-self)

    def __rmul__(self, other): # other * self
        return self * other

    def __truediv__(self, other): # self / other
        return self * other**-1

    def __rtruediv__(self, other): # other / self
        return other * self**-1

    def __repr__(self):
        return f"Value(data={self.data}, grad={self.grad})"