from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import numpy as np
import matplotlib.pyplot as plt

def cluster_data(features_transformed, cluster_config, n_clusters=2, clustering_method='kmeans'):
    """
    Выполняет кластеризацию данных для заданных наборов признаков.

    Args:
        features_transformed (pandas.DataFrame): Преобразованный DataFrame с параметрами.
        cluster_config (dict): Словарь вида {имя_столбца: (столбцы_для_кластеризации)}
        n_clusters (int): Количество кластеров.
        clustering_method (str): Метод кластеризации ('kmeans').

    Returns:
        pandas.DataFrame: DataFrame с добавленными столбцами меток кластеров.
    """
    if features_transformed is None:
        print("Сначала выполните преобразование данных (этап 5).")
        return None

    features_transformed = features_transformed.copy()

    for cluster_name, feature_columns in cluster_config.items():
        if isinstance(feature_columns, str):
            feature_columns = [feature_columns]
        
        # Проверяем, что все указанные столбцы существуют
        missing_columns = [col for col in feature_columns if col not in features_transformed.columns]
        if missing_columns:
            print(f"Ошибка: Не найдены следующие столбцы: {missing_columns}")
            continue
            
        features_for_clustering = features_transformed[feature_columns].copy()
        
        if clustering_method == 'kmeans':
            model = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
            cluster_labels = model.fit_predict(features_for_clustering)
            
            # Оценка качества кластеризации (например, с помощью коэффициента силуэта)
            if len(np.unique(cluster_labels)) > 1: # Проверка на случай, когда все точки отнесены к одному кластеру
                silhouette_avg = silhouette_score(features_for_clustering, cluster_labels)
                print(f"Коэффициент силуэта для {n_clusters} кластеров ({cluster_name}): {silhouette_avg:.4f}")
            else:
                print(f"Невозможно рассчитать коэффициент силуэта для {n_clusters} кластера ({cluster_name}) (все точки в одном кластере).")

        else:
            print("Неподдерживаемый метод кластеризации.")
            return None

        features_transformed[cluster_name] = cluster_labels
        print(f"Кластеризация выполнена для '{cluster_name}'. Метки кластеров добавлены.")

    return features_transformed

# Выполнение кластеризации (после этапа 5 и до этапа 6)
if 'features_transformed' in locals() and features_transformed is not None:
    # Пример конфигурации кластеризации
    cluster_config = {
        'cluster1': ['столбец1', 'столбец2'],  # Замените на реальные названия столбцов
        'cluster2': ['столбец3']              # Замените на реальное название столбца
    }
    
    n_clusters = 3  # Количество кластеров (подберите оптимальное значение)
    features_transformed = cluster_data(features_transformed, cluster_config, n_clusters)
    
    # Визуализация кластеров (пример для случая, когда есть 2 числовых признака)
    # Определяем, какие кластеры были созданы
    cluster_columns = [col for col in features_transformed.columns if col.startswith('cluster')]
    
    if cluster_columns:
        # Визуализируем первый кластер
        first_cluster = cluster_columns[0]
        numerical_features = features_transformed.select_dtypes(include=np.number)
        if numerical_features.shape[1] >= 2:
            plt.figure(figsize=(8, 6))
            plt.scatter(numerical_features.iloc[:, 0], numerical_features.iloc[:, 1], 
                       c=features_transformed[first_cluster], cmap='viridis')
            plt.xlabel(numerical_features.columns[0])
            plt.ylabel(numerical_features.columns[1])
            plt.title(f'Результаты кластеризации: {first_cluster}')
            plt.colorbar(label='Номер кластера')
            plt.show()
        else:
            print("Недостаточно числовых признаков для визуализации кластеров на плоскости.")
    else:
        print("Не удалось создать кластеры.")
else:
    print("Сначала выполните этап 5 (Преобразование данных).")