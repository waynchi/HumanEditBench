import math
import numpy as np

class Value:
    """ stores a single scalar value and its gradient """

    def __init__(self, data, _children=(), _op=''):
        self.data = data
        self.grad = 0
        # internal variables used for autograd graph construction
        self._backward = lambda: None
        self._prev = set(_children)
        self._op = _op # the op that produced this node, for graphviz / debugging / etc

    def __add__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data + other.data, (self, other), '+')

        def _backward():
            self.grad += out.grad
            other.grad += out.grad
        out._backward = _backward

        return out

    def __mul__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data * other.data, (self, other), '*')

        def _backward():
            self.grad += other.data * out.grad
            other.grad += self.data * out.grad
        out._backward = _backward

        return out

    def __pow__(self, other):
        assert isinstance(other, (int, float)), "only supporting int/float powers for now"
        out = Value(self.data**other, (self,), f'**{other}')

        def _backward():
            self.grad += (other * self.data**(other-1)) * out.grad
        out._backward = _backward

        return out


        print(f'** EXP {self}')
        out = Value(math.exp(self.data), (self,), "e")
        def _backward():
            self.grad += math.exp(self.data) * out.grad
        out._backward = _backward
        
        return out
    
    def log(self):
        out = Value(math.log(self.data), (self,), f'log{self.data}')
        def _backward():
            self.grad += 1 / self.data
        out._backward = _backward       
        
        return out
    
    def relu(self):
        assert isinstance(self.data, (int, float)), "only supporting int/float powers for now"
        out = Value(0 if self.data < 0 else self.data, (self,), 'ReLU')

        def _backward():
            self.grad += (out.data > 0) * out.grad
        out._backward = _backward

        return out
    
    # Modified section: softmax function with differentiation
    # Note: This softmax expects a list of Value objects and returns a list of Value objects.
    def softmax(xs):
        # Compute softmax outputs from list of Value objects.
        # Use numpy for numerical stability.
        x_data = np.array([x.data for x in xs])
        # subtract max for numerical stability
        exp_x = np.exp(x_data - np.max(x_data))
        sum_exp = np.sum(exp_x)
        softmax_values = exp_x / sum_exp
        # Create new Value objects for each softmax output with dependencies on all xs.
        out = [Value(s, tuple(xs), 'softmax') for s in softmax_values]

        # Define a shared backward function for softmax differentiation.
        def _backward():
            # Gather softmax outputs as floats.
            s = [y.data for y in out]
            # For each input x_i, accumulate gradients from all outputs.
            for i, x in enumerate(xs):
                grad_contrib = 0
                for j, y in enumerate(out):
                    # Softmax derivative: if i == j: s_i*(1-s_i), else: -s_i*s_j.
                    if i == j:
                        grad_contrib += y.grad * s[j] * (1 - s[i])
                    else:
                        grad_contrib += y.grad * (- s[j] * s[i])
                x.grad += grad_contrib

        # Attach the shared _backward function to each output node.
        for y in out:
            y._backward = _backward

        return out

    # Additional helper function to compute the Jacobian of the softmax function.
    # Given a list of Value objects (softmax outputs), returns a list of list (matrix)
    # where mat[i][j] is the derivative of output i with respect to input j.
    def differentiate_softmax(softmax_outputs):
        s = [v.data for v in softmax_outputs]
        jacobian = []
        for i in range(len(s)):
            row = []
            for j in range(len(s)):
                if i == j:
                    row.append(s[i] * (1 - s[i]))
                else:
                    row.append(-s[i] * s[j])
            jacobian.append(row)
        return jacobian

    def backward(self):

        # topological order all of the children in the graph
        topo = []
        visited = set()
        def build_topo(v):
            if v not in visited:
                visited.add(v)
                for child in v._prev:
                    build_topo(child)
                topo.append(v)
        build_topo(self)

        # go one variable at a time and apply the chain rule to get its gradient
        self.grad = 1
        for v in reversed(topo):
            v._backward()

    def __neg__(self): # -self
        return self * -1
    def __gt__(self, other):
        return self.data > other.data

    def __radd__(self, other): # other + self
        return self + other

    def __sub__(self, other): # self - other
        return self + (-other)

    def __rsub__(self, other): # other - self
        return other + (-self)

    def __rmul__(self, other): # other * self
        return self * other

    def __truediv__(self, other): # self / other
        return self * other**-1

    def __rtruediv__(self, other): # other / self
        return other * self**-1

    def __repr__(self):
        return f"Value(data={self.data}, grad={self.grad})"