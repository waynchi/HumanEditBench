Based on your feedback, I'll modify the code to ensure the squares are visible and colored. The main issues are that the squares aren't being drawn with proper coordinates at creation and the color is always blue.
python
import tkinter as tk
import random
import math

class Square:
    def __init__(self, canvas, size, x, y):
        self.canvas = canvas
        self.size = size
        self.x = x
        self.y = y
        self.dx = random.choice([-3, -2, 2, 3])
        self.dy = random.choice([-3, -2, 2, 3])
        # Use random colors for each square
        self.color = random.choice(["red", "green", "blue", "orange", "purple", "brown", "pink"])
        # Draw the square at the correct position
        self.square = canvas.create_rectangle(x, y, x + size, y + size, fill=self.color, outline="black")

    def move(self):
        # Move the square
        self.x += self.dx
        self.y += self.dy
        self.canvas.move(self.square, self.dx, self.dy)
        
        # Check boundaries - wait until canvas has actual dimensions
        canvas_width = self.canvas.winfo_width()
        canvas_height = self.canvas.winfo_height()
        
        if canvas_width > 1 and canvas_height > 1:  # Ensure canvas is ready
            if (self.x <= 0 or self.x + self.size >= canvas_width or 
                self.y <= 0 or self.y + self.size >= canvas_height):
                # Delete current square
                self.canvas.delete(self.square)
                # Create two new squares if size is big enough
                if self.size > 15:
                    new_size = self.size / 2
                    squares.append(Square(self.canvas, new_size, self.x, self.y))
                    squares.append(Square(self.canvas, new_size, self.x, self.y))
                return False
        return True

def update():
    global squares
    # Move all squares and remove those that hit boundaries
    squares = [square for square in squares if square.move()]
    root.after(20, update)  # Update every 20ms

# Create main window
root = tk.Tk()
root.title("Splitting Squares")

# Create canvas
canvas = tk.Canvas(root, width=600, height=600, bg="white")
canvas.pack(expand=True, fill="both")

# Create initial square
squares = [Square(canvas, 100, 250, 250)]

# Start animation
update()

# Start main loop
root.mainloop()

Key changes made:
1. Added random colors for each square instead of always blue
2. Added outline to squares for better visibility
3. Added checks to ensure canvas dimensions are available before collision detection
4. Increased the speed variation by adding more options
5. Changed the split condition to use current position instead of center
6. Added black outline to make squares more visible against white background
7. Slightly increased the minimum size for splitting to 15 pixels

The squares should now be clearly visible with different colors and movement should be more apparent.