# Папка со всеми фотографиями / папка с фотографиями для тренировки
TRAIN_DIR = os.path.join(DATA_PATH, "train")
# Считываем названия директорий, которые и являются видом затмения
ECLIPSE_LIST = {i:name for i, name in enumerate(os.listdir(TRAIN_DIR))}


# Папка с фотографиями для валидации
VAL_DIR = os.path.join(DATA_PATH, "val")
os.makedirs(VAL_DIR, exist_ok=True)

# Папка с фотографиями для теста
TEST_DIR = os.path.join(DATA_PATH, "test")


# Доля изображений в валидации
VAL_FRAC = 0.3


# Создаем директорию с валидационной выборкой для каждого вида затмения.
for eclipse in ECLIPSE_LIST.values():
    os.makedirs(os.path.join(VAL_DIR, eclipse), exist_ok=True)

    # Считываем выборку изображений.
    eclipse_path = os.path.join(TRAIN_DIR, eclipse)
    
    # Сортируем изображения для детерминированнсти
    images_filename = sorted(os.listdir(eclipse_path))
    
    # Разбиваем изображения на train и val с помощью train_test_split
    from sklearn.model_selection import train_test_split
    train_images, val_images = train_test_split(
        images_filename, 
        test_size=VAL_FRAC, 
        random_state=42,
        shuffle=True
    )

    num_images = len(images_filename)
    num_val = len(val_images)
    
    print(f'{eclipse} | train images = {len(train_images)} | val images = {num_val}')
    
    # Сохраняем валидационную выборку
    for image_filename in val_images:
        source = os.path.join(TRAIN_DIR, eclipse, image_filename)
        destination = os.path.join(VAL_DIR, eclipse, image_filename)
        shutil.copy(source, destination)
    
    # Удаляем из train только те изображения, которые скопированы в val
    for image_filename in val_images:
        os.remove(os.path.join(TRAIN_DIR, eclipse, image_filename))