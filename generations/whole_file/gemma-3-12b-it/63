
python
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

def cluster_data(features_transformed, cluster_feature_name, n_clusters=2, clustering_method='kmeans'):
    """
    Выполняет кластеризацию данных.

    Args:
        features_transformed (pandas.DataFrame): Преобразованный DataFrame с параметрами.
        cluster_feature_name (str): Имя столбца, в который будут записаны метки кластеров.
        n_clusters (int): Количество кластеров.
        clustering_method (str): Метод кластеризации ('kmeans').

    Returns:
        pandas.DataFrame: DataFrame с добавленным столбцом меток кластеров.
    """
    if features_transformed is None:
        print("Сначала выполните преобразование данных (этап 5).")
        return None

    #features_for_clustering = features_transformed.copy()

    if clustering_method == 'kmeans':
        for cluster_name, columns in cluster_feature_name.items():
            features_for_clustering = features_transformed[columns]
            model = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
            cluster_labels = model.fit_predict(features_for_clustering)
            features_transformed[cluster_name] = cluster_labels

            # Оценка качества кластеризации (например, с помощью коэффициента силуэта)
            if len(np.unique(cluster_labels)) > 1: # Проверка на случай, когда все точки отнесены к одному кластеру
                silhouette_avg = silhouette_score(features_for_clustering, cluster_labels)
                print(f"Коэффициент силуэта для {n_clusters} кластеров в {cluster_name}: {silhouette_avg:.4f}")
            else:
                print(f"Невозможно рассчитать коэффициент силуэта для {n_clusters} кластера (все точки в одном кластере) для {cluster_name}.")

    else:
        print("Неподдерживаемый метод кластеризации.")
        return None

    #features_transformed[cluster_feature_name] = cluster_labels
    print(f"Кластеризация выполнена. Метки кластеров добавлены в столбцы.")
    return features_transformed

# Выполнение кластеризации (после этапа 5 и до этапа 6)
if 'features_transformed' in locals() and features_transformed is not None:
    cluster_feature_name = {'Cluster1': ['столбец1', 'столбец2'], 'Cluster2': ['столбец3']}  # Имя столбца для меток кластеров, словарь с именами кластеров и списками столбцов
    n_clusters = 3  # Количество кластеров (подберите оптимальное значение)
    features_transformed = cluster_data(features_transformed, cluster_feature_name, n_clusters)
    
    # Визуализация кластеров (пример для случая, когда есть 2 числовых признака)
    numerical_features = features_transformed.select_dtypes(include=np.number)
    if numerical_features.shape[1] >= 2:
        plt.figure(figsize=(8, 6))
        plt.scatter(numerical_features.iloc[:, 0], numerical_features.iloc[:, 1], c=features_transformed['Cluster1'], cmap='viridis') # Визуализируем только Cluster1 для примера
        plt.xlabel(numerical_features.columns[0])
        plt.ylabel(numerical_features.columns[1])
        plt.title('Результаты кластеризации')
        plt.colorbar(label='Номер кластера')
        plt.show()
    else:
        print("Недостаточно числовых признаков для визуализации кластеров на плоскости.")
else:
    print("Сначала выполните этап 5 (Преобразование данных).")