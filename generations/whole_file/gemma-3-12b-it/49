def create_matrix(rows: int, cols: int, fill_value=0) -> list:
  """
  Создает матрицу размера rows x cols, заполненную значением fill_value.
  Параметры:
  rows (int): количество строк.
  cols (int): количество столбцов.
  fill_value (любой тип): значение для заполнения матрицы.
  Возвращает:
  list: матрица в виде списка списков.
  """
  matrix = []
  for _ in range(rows):
    row = [fill_value] * cols
    matrix.append(row)
  return matrix

def add_matrices(matrix_a: list, matrix_b: list) -> list:
  """
  Складывает две матрицы одинакового размера.
  Параметры:
  matrix_a (list): первая матрица.
  matrix_b (list): вторая матрица.
  Возвращает:
  list: результат сложения матриц.
  """
  rows = len(matrix_a)
  cols = len(matrix_a[0])
  result = []
  for i in range(rows):
    row = []
    for j in range(cols):
      row.append(matrix_a[i][j] + matrix_b[i][j])
    result.append(row)
  return result

def scalar_multiply(matrix: list, scalar: float) -> list:
  """
  Умножает все элементы матрицы на скаляр.
  Параметры:
  matrix (list): исходная матрица.
  scalar (float): число, на которое умножаются элементы матрицы.
  Возвращает:
  list: результат умножения матрицы на скаляр.
  """
  result = []
  for row in matrix:
    new_row = []
    for element in row:
      new_row.append(element * scalar)
    result.append(new_row)
  return result


def multiply_matrices(matrix_a: list, matrix_b: list) -> list:
  """
  Перемножает две матрицы.
  Параметры:
  matrix_a (list): первая матрица.
  matrix_b (list): вторая матрица.
  Возвращает:
  list: результат умножения матриц.
  """
  rows_a = len(matrix_a)
  cols_a = len(matrix_a[0])
  rows_b = len(matrix_b)
  cols_b = len(matrix_b[0])

  if cols_a != rows_b:
    raise ValueError("Невозможно перемножить матрицы: количество столбцов первой матрицы не равно количеству строк второй матрицы.")

  result = []
  for i in range(rows_a):
    row = []
    for j in range(cols_b):
      sum_val = 0
      for k in range(cols_a):
        sum_val += matrix_a[i][k] * matrix_b[k][j]
      row.append(sum_val)
    result.append(row)
  return result


def transpose_matrix(matrix: list) -> list:
  """
  Транспонирует матрицу.
  Параметры:
  matrix (list): исходная матрица.
  Возвращает:
  list: транспонированная матрица.
  """
  rows = len(matrix)
  cols = len(matrix[0])
  result = []
  for j in range(cols):
    row = []
    for i in range(rows):
      row.append(matrix[i][j])
    result.append(row)
  return result


def determinant_3x3(matrix: list) -> float:
  """
  Вычисляет определитель матрицы 3x3.
  Параметры:
  matrix (list): исходная матрица размером 3x3.
  Возвращает:
  float: определитель матрицы.
  """
  a = matrix[0][0]
  b = matrix[0][1]
  c = matrix[0][2]
  d = matrix[1][0]
  e = matrix[1][1]
  f = matrix[1][2]
  g = matrix[2][0]
  h = matrix[2][1]
  i = matrix[2][2]

  return a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g)