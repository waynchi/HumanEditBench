import torch
import torch.nn as nn

class SimpleConvNet1(nn.Module):
    def __init__(self):  # 移除 flattened_size 参数，因为可以在 forward 中自动计算
        super().__init__()

        self.conv1 = nn.Sequential(
            nn.Conv2d(3, 32, 3),
            nn.ReLU(),
            nn.MaxPool2d(2)
        )

        self.conv2 = nn.Sequential(
            nn.Conv2d(32, 64, 3),
            nn.ReLU(),
            nn.MaxPool2d(2)
        )

        self.flatten = nn.Flatten()
        # 先不定义 fc1，等知道展平后的尺寸再在 forward 中动态创建
        self.fc1 = None

    def forward(self, x):
        x = self.conv1(x)
        x = self.conv2(x)
        x = self.flatten(x)
        
        # 动态计算展平后的尺寸并创建全连接层
        if self.fc1 is None:
            flattened_size = x.shape[1]
            self.fc1 = nn.Sequential(
                nn.Linear(flattened_size, 512),
                nn.ReLU(),
                nn.Linear(512, 3)
            ).to(x.device)  # 确保层在正确的设备上
        
        x = self.fc1(x)
        return x