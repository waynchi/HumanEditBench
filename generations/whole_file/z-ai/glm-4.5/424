from langchain_ollama import ChatOllama
from langchain_core.prompts.chat import ChatPromptTemplate
import json

def generate_response(shap_file_path, system_prompt_path, model_name="llama3.2", base_url="http://localhost:11434"):
    """
    Generuje odpowiedź od modelu językowego na podstawie wartości SHAP i promptu systemowego.

    Args:
        shap_file_path (str): Ścieżka do pliku JSON z wartościami SHAP.
        system_prompt_path (str): Ścieżka do pliku z promptem systemowym.
        model_name (str): Nazwa modelu do użycia.
        base_url (str): Adres URL serwera Ollama.

    Returns:
        str: Treść odpowiedzi wygenerowanej przez model.
    """
    # Zainicjuj model ChatOllama
    chat_model = ChatOllama(model=model_name, base_url=base_url)
    # chat_model = ChatOllama(
    # model="llama3.1:70b",
    # base_url="http://ada-open-webui.serveo.net/ollama",
    # client_kwargs={
    # headers": {"authorization": "Bearer <MASKED>"}
    # },
    # )

    # Załaduj wartości SHAP z pliku JSON
    with open(shap_file_path, "r") as file:
        shap_values_json = json.load(file).get("shap_values")

    # Wczytaj systemowy prompt z pliku
    with open(system_prompt_path, "r") as file:
        sys_prompt = file.read().strip()

    # Przygotuj wiadomości
    prompt = ChatPromptTemplate(
        [
            ("system", sys_prompt),
            ("human", "{user_input}"),
        ]
    )

    # Generuj odpowiedź
    user_input = json.dumps(shap_values_json)  # Przygotuj dane wejściowe użytkownika

    chain = prompt | chat_model

    # Wydrukuj odpowiedź
    response = chain.invoke(user_input)
    return response.content

# Wydrukuj odpowiedź
response_content = generate_response(
    shap_file_path="Vuori_Final_Approval_2024_09_24.json",
    system_prompt_path="system.prompt"
)
print(response_content)