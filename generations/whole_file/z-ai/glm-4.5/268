python
import math
class Value:
    """хранит одно скалярное значение и его градиент"""

    def __init__(self, data, _children=(), _op=''):
        self.data = data
        self.grad = 0
        # внутренние переменные, используемые для построения графа автоградаций
        self._backward = lambda: None
        self._prev = set(_children)
        self._op = _op # операция, которая создала этот узел, для graphviz / отладки / и т.д.

    def __add__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data + other.data, (self, other), '+')

        def _backward():
            self.grad += out.grad
            other.grad += out.grad
        out._backward = _backward

        return out

    def __mul__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data * other.data, (self, other), '*')

        def _backward():
            self.grad += other.data * out.grad
            other.grad += self.data * out.grad
        out._backward = _backward

        return out

    def __pow__(self, other):
        assert isinstance(other, (int, float)), "only supporting int/float powers for now"
        out = Value(self.data**other, (self,), f'**{other}')

        def _backward():
            self.grad += (other * self.data**(other-1)) * out.grad
        out._backward = _backward

        return out


        print(f'** EXP {self}')
        out = Value(math.exp(self.data), (self,), "e")
        def _backward():
            self.grad += math.exp(self.data) * out.grad
        out._backward = _backward
        
        return out
    
    def log(self):
        out = Value(math.log(self.data), (self,), f'log{self.data}')
        def _backward():
            self.grad += 1 / self.data
        out._backward = _backward       
        
        return out
    
    def relu(self):
        assert isinstance(self.data, (int, float)), "only supporting int/float powers for now"
        out = Value(0 if self.data < 0 else self.data, (self,), 'ReLU')

        def _backward():
            self.grad += (out.data > 0) * out.grad
        out._backward = _backward

        return out
    
    @staticmethod
    def softmax(values):
        # values: list of Value objects
        # Compute max value for numerical stability
        max_val = max(values, key=lambda x: x.data).data
        
        # Compute exponentials shifted by max value
        exps = []
        for v in values:
            exp_val = (v - max_val).exp()
            exps.append(exp_val)
        
        # Sum the exponentials
        sum_exps = exps[0]
        for i in range(1, len(exps)):
            sum_exps = sum_exps + exps[i]
        
        # Compute softmax probabilities
        probs = []
        for exp_val in exps:
            prob = exp_val / sum_exps
            probs.append(prob)
        
        # Set backward functions for each probability
        for i, prob in enumerate(probs):
            def _backward(i=i, probs=probs, values=values):
                # For each input value, compute gradient contribution
                for j, v in enumerate(values):
                    if i == j:
                        # Diagonal elements: p_i * (1 - p_i)
                        term = probs[i].data * (1 - probs[i].data)
                    else:
                        # Off-diagonal elements: -p_i * p_j
                        term = -probs[i].data * probs[j].data
                    # Accumulate gradient
                    v.grad += term * prob.grad
            prob._backward = _backward
        
        return probs

    def backward(self):

        # топологический порядок всех потомков в графе
        topo = []
        visited = set()
        def build_topo(v):
            if v not in visited:
                visited.add(v)
                for child in v._prev:
                    build_topo(child)
                topo.append(v)
        build_topo(self)

        # рассматриваем по одной переменной и применяем правило цепочки, чтобы получить её градиент
        self.grad = 1
        for v in reversed(topo):
            v._backward()

    def __neg__(self): # -self
        return self * -1
    def __gt__(self, other):
        return self.data > other.data

    def __radd__(self, other): # другой + сам
        return self + other

    def __sub__(self, other): # self - other
        return self + (-other)

    def __rsub__(self, other): # другое - self
        return other + (-self)

    def __rmul__(self, other): # другое * сам
        return self * other

    def __truediv__(self, other): # self / other
        return self * other**-1

    def __rtruediv__(self, other): # другой / self
        return other * self**-1

    def __repr__(self):
        return f"Value(data={self.data}, grad={self.grad})"

    def softmax(x):
        e_x = np.exp(x - np.max(x))