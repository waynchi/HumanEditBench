import numpy as np

def conjugate_gradient(A, b, x0=None, tol=1e-8, max_iter=None):
    """
    Implementacja metody sprzężonych gradientów do rozwiązywania układu równań liniowych Ax = b.
    
    Parametry:
    A : macierz symetryczna, dodatnio określona (numpy.ndarray)
    b : wektor prawych stron (numpy.ndarray)
    x0 : początkowe przybliżenie rozwiązania (numpy.ndarray, opcjonalne)
    tol : tolerancja dla kryterium zatrzymania (float, domyślnie 1e-8)
    max_iter : maksymalna liczba iteracji (int, opcjonalne)
    
    Zwraca:
    x : przybliżone rozwiązanie układu równań (numpy.ndarray)
    """
    n = len(b)
    if max_iter is None:
        max_iter = n
    
    if x0 is None:
        x = np.zeros(n)
    else:
        x = x0.copy()
    
    r = b - np.dot(A, x)
    p = r.copy()
    rs_old = np.dot(r, r)
    
    for i in range(max_iter):
        Ap = np.dot(A, p)
        alpha = rs_old / np.dot(p, Ap)
        x += alpha * p
        r -= alpha * Ap
        rs_new = np.dot(r, r)
        
        if np.sqrt(rs_new) < tol:
            break
            
        p = r + (rs_new / rs_old) * p
        rs_old = rs_new
    
    return x