python
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

def cluster_data(features_transformed, cluster_configs, n_clusters=2, clustering_method='kmeans'):
    """
    Выполняет кластеризацию данных для независимых наборов столбцов.

    Args:
        features_transformed (pandas.DataFrame): Преобразованный DataFrame с параметрами.
        cluster_configs (dict): Словарь, где ключи - имена новых столбцов для кластеров,
                               а значения - кортежи имен столбцов для кластеризации.
        n_clusters (int): Количество кластеров (одинаковое для всех наборов).
        clustering_method (str): Метод кластеризации ('kmeans').

    Returns:
        pandas.DataFrame: DataFrame с добавленными столбцами меток кластеров.
    """
    if features_transformed is None:
        print("Сначала выполните преобразование данных (этап 5).")
        return None

    for cluster_name, columns in cluster_configs.items():
        # Проверяем наличие всех столбцов в DataFrame
        if not all(col in features_transformed.columns for col in columns):
            missing_cols = [col for col in columns if col not in features_transformed.columns]
            print(f"Пропуск кластеризации '{cluster_name}': отсутствуют столбцы {missing_cols}")
            continue

        # Выбираем подмножество данных для текущей конфигурации
        features_subset = features_transformed[list(columns)]
        
        if clustering_method == 'kmeans':
            model = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
            cluster_labels = model.fit_predict(features_subset)
            
            # Оценка качества кластеризации
            if len(np.unique(cluster_labels)) > 1:
                silhouette_avg = silhouette_score(features_subset, cluster_labels)
                print(f"Коэффициент силуэта для '{cluster_name}' ({n_clusters} кластеров): {silhouette_avg:.4f}")
            else:
                print(f"Невозможно рассчитать коэффициент силуэта для '{cluster_name}' (все точки в одном кластере).")

        else:
            print(f"Неподдерживаемый метод кластеризации для '{cluster_name}'.")
            continue

        # Добавляем метки кластеров в DataFrame
        features_transformed[cluster_name] = cluster_labels
        print(f"Кластеризация выполнена для '{cluster_name}'. Метки добавлены в столбец '{cluster_name}'.")
    
    return features_transformed

# Выполнение кластеризации (после этапа 5 и до этапа 6)
if 'features_transformed' in locals() and features_transformed is not None:
    # Пример конфигурации кластеризации
    cluster_configs = {
        'Кластер1': ('столбец1', 'столбец2'),  # Замените на реальные имена столбцов
        'Кластер2': ('столбец3',)               # Замените на реальные имена столбцов
    }
    n_clusters = 3  # Количество кластеров (подберите оптимальное значение)
    features_transformed = cluster_data(features_transformed, cluster_configs, n_clusters)
    
    # Визуализация кластеров (пример для случая, когда есть 2 числовых признака)
    numerical_features = features_transformed.select_dtypes(include=np.number)
    if numerical_features.shape[1] >= 2:
        plt.figure(figsize=(8, 6))
        # Визуализируем первый кластер из конфигурации
        first_cluster = list(cluster_configs.keys())[0]
        plt.scatter(numerical_features.iloc[:, 0], numerical_features.iloc[:, 1], 
                   c=features_transformed[first_cluster], cmap='viridis')
        plt.xlabel(numerical_features.columns[0])
        plt.ylabel(numerical_features.columns[1])
        plt.title(f'Результаты кластеризации для {first_cluster}')
        plt.colorbar(label='Номер кластера')
        plt.show()
    else:
        print("Недостаточно числовых признаков для визуализации кластеров на плоскости.")
else:
    print("Сначала выполните этап 5 (Преобразование данных).")