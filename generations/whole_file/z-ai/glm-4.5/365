import math
class Value:
    """przechowuje pojedynczą wartość skalarną i jej gradient"""

    def __init__(self, data, _children=(), _op=''):
        self.data = data
        self.grad = 0
        # wewnętrzne zmienne używane do konstrukcji grafu autograd
        self._backward = lambda: None
        self._prev = set(_children)
        self._op = _op # operacja, która wygenerowała ten węzeł, dla graphviz / debugowania / itp.

    def __add__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data + other.data, (self, other), '+')

        def _backward():
            self.grad += out.grad
            other.grad += out.grad
        out._backward = _backward

        return out

    def __mul__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data * other.data, (self, other), '*')

        def _backward():
            self.grad += other.data * out.grad
            other.grad += self.data * out.grad
        out._backward = _backward

        return out

    def __pow__(self, other):
        assert isinstance(other, (int, float)), "only supporting int/float powers for now"
        out = Value(self.data**other, (self,), f'**{other}')

        def _backward():
            self.grad += (other * self.data**(other-1)) * out.grad
        out._backward = _backward

        return out


        print(f'** EXP {self}')
        out = Value(math.exp(self.data), (self,), "e")
        def _backward():
            self.grad += math.exp(self.data) * out.grad
        out._backward = _backward
        
        return out
    
    def log(self):
        out = Value(math.log(self.data), (self,), f'log{self.data}')
        def _backward():
            self.grad += 1 / self.data
        out._backward = _backward       
        
        return out
    
    def relu(self):
        assert isinstance(self.data, (int, float)), "only supporting int/float powers for now"
        out = Value(0 if self.data < 0 else self.data, (self,), 'ReLU')

        def _backward():
            self.grad += (out.data > 0) * out.grad
        out._backward = _backward

        return out
    
    def softmax(values):
        # Oblicz wartości e^x dla każdego elementu
        exp_values = [math.exp(v.data) for v in values]
        
        # Oblicz sumę wartości e^x
        sum_exp_values = sum(exp_values)
        
        # Oblicz wartości softmax i stwórz nowe obiekty Value
        softmax_values = []
        for i, v in enumerate(values):
            s_i = exp_values[i] / sum_exp_values
            softmax_values.append(Value(s_i, (v,), 'softmax'))
            
            # Zdefiniuj funkcję wstecznej propagacji dla tego elementu
            def _backward(v_local=v, s_local=s_i, values_local=values): 
                # v_local to obiekt Value, z którego pochodzi ten element softmax
                # s_local to wartość softmax dla tego elementu
                # values_local to lista oryginalnych obiektów Value
                for j, v_j in enumerate(values_local):
                    if v_local is v_j:
                        # Pochodna d(s_i)/d(x_i) = s_i * (1 - s_i)
                        v_j.grad += s_local * (1 - s_local) * v_local.grad
                    else:
                        # Pochodna d(s_i)/d(x_j) = -s_i * s_j
                        v_j.grad -= s_local * (exp_values[j] / sum_exp_values) * v_local.grad
            softmax_values[-1]._backward = _backward
            
        return softmax_values
    
    def backward(self):

        # uporządkować topologicznie wszystkie dzieci w grafie
        topo = []
        visited = set()
        def build_topo(v):
            if v not in visited:
                visited.add(v)
                for child in v._prev:
                    build_topo(child)
                topo.append(v)
        build_topo(self)

        # przejdź po jednej zmiennej na raz i zastosuj regułę łańcuchową, aby uzyskać jej gradient
        self.grad = 1
        for v in reversed(topo):
            v._backward()

    def __neg__(self): # -self
        return self * -1
    def __gt__(self, other):
        return self.data > other.data

    def __radd__(self, other): # other + self
        return self + other

    def __sub__(self, other): # self - other
        return self + (-other)

    def __rsub__(self, other): # other - self
        return other + (-self)

    def __rmul__(self, other): # other * self
        return self * other

    def __truediv__(self, other): # self / other
        return self * other**-1

    def __rtruediv__(self, other): # other / self
        return other * self**-1

    def __repr__(self):
        return f"Value(data={self.data}, grad={self.grad})"