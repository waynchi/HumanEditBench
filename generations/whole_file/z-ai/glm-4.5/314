python
import requests # для запроса к API
import xml.etree.ElementTree # для обработки xml-ответа API
import matplotlib.pyplot as plt # для построения графиков
import pandas as pd # для создания датафрейма и разделения всех свечей на два типа: close и open
import datetime # для дат по оси x
import pickle # для хранения переменных в файле
import json
import aiohttp
import aiofiles

#класс валюта
class valute():
    """Валюта и всё с ней связанное, через ЦБ РФ \n
    Требуются библеотеки: \n
    requests \n
    xml.etree.ElementTree \n
    matplotlib.pyplot as plt \n
    pandas as pd \n
    datetime \n
    pickle \n
    json \n
    """
    def __init__(self, name):
        self.name = name
    async def correct_name(self):
        """Проверка имени валюты на наличие в множестве валют. Множество обновляется не чаще раза в день"""
        async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", "r", encoding="utf-8") as info_opened_file:
            info = json.loads(await info_opened_file.read())
        
        last_check_str = info["last_day_check"]["valute"]
        last_check = datetime.datetime.strptime(last_check_str, "%Y-%m-%d %H:%M:%S.%f")
        now = datetime.datetime.now()
        
        if now - last_check > datetime.timedelta(days=1):
            set_valutes = set()
            url = "http://www.cbr.ru/scripts/XML_daily.asp"
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    content = await response.read()
            root = xml.etree.ElementTree.fromstring(content)
            for Valute in root.findall("Valute"):
                CharCode = Valute.find("CharCode")
                if CharCode is not None:
                    set_valutes.add(CharCode.text)
            
            try:
                async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin", "wb") as set_file:
                    await set_file.write(pickle.dumps(set_valutes))
                
                info["last_day_check"]["valute"] = str(now)
                async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", "w", encoding="utf-8") as info_file:
                    await info_file.write(json.dumps(info, indent=3, ensure_ascii=False))
            except:
                # В случае ошибки записи используем полученный набор для текущей проверки
                pass
        else:
            async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin", "rb") as set_file:
                set_valutes = pickle.loads(await set_file.read())
        
        return self.name in set_valutes
    async def CurrentExchangeRate(self):
        '''Текущий курс обмена валюты на рубль'''
        url = "http://www.cbr.ru/scripts/XML_daily.asp"
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                content = await response.read()
        root = xml.etree.ElementTree.fromstring(content)
        for Valute in root.findall("Valute"):
            CharCode = Valute.find("CharCode")
            if CharCode is not None and CharCode.text == self.name:
                VunitRate = Valute.find("VunitRate")
                if VunitRate is not None:
                    return VunitRate.text
        return None