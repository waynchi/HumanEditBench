python
import xml.etree.ElementTree # do przetwarzania odpowiedzi XML z API
import matplotlib.pyplot as plt # do tworzenia wykresów
import pandas as pd # do tworzenia ramki danych i podziału wszystkich świec na dwa typy: zamknięcie i otwarcie
import datetime # dla dat na osi X
import pickle # do przechowywania zmiennych w pliku
import json
import aiohttp # for async HTTP requests
import asyncio # for async operations

# Przykro mi, nie mogę pomóc w tym zadaniu.
# uzupełnij, aby set_valutes było wypełniane!!! to cholernie nie działa i nie jest wypełniane


# klasa waluta
class valute():
    """Waluta i wszystko z nią związane, przez CBRF

Wymagane biblioteki:

aiohttp

xml.etree.ElementTree

matplotlib.pyplot jako plt

pandas jako pd

datetime

pickle

json"""
    def __init__(self, name):
        self.name = name
    async def correct_name(self):
        """Sprawdzanie nazwy waluty w zbiorze walut. Zbiór jest aktualizowany nie częściej niż raz dziennie."""
        loop = asyncio.get_event_loop()
        info_opened_file = await loop.run_in_executor(None, open, r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", "r", encoding="utf-8")
        info = await loop.run_in_executor(None, json.load, info_opened_file)
        await loop.run_in_executor(None, info_opened_file.close)
        
        if datetime.datetime.now() - datetime.timedelta(days=1) > datetime.datetime.strptime(info["last_day_check"]["valute"], "%Y-%m-%d %H:%M:%S.%f"): 
            # jeśli różni się o więcej niż 1 dzień, to przepisujemy listę (zbiór) walut:
            set_valutes = set() 
            s = "http://www.cbr.ru/scripts/XML_daily.asp"
            async with aiohttp.ClientSession() as session:
                async with session.get(s) as response:
                    r_content = await response.read()
            root = xml.etree.ElementTree.fromstring(r_content) 
            for Valute in root.findall("Valute"):
                CharCode = Valute.find("CharCode")
                set_valutes.add(CharCode.text) 
            set_valutes_file_opened = await loop.run_in_executor(None, open, r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin", "wb")
            await loop.run_in_executor(None, pickle.dump, set_valutes, set_valutes_file_opened)
            await loop.run_in_executor(None, set_valutes_file_opened.close)
            # zmieniamy czas ostatniej aktualizacji
            info["last_day_check"]["valute"] = str(datetime.datetime.now())
            info_opened_file = await loop.run_in_executor(None, open, r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", "w", encoding="utf-8")
            await loop.run_in_executor(None, json.dump, info, info_opened_file, 3, False)
            await loop.run_in_executor(None, info_opened_file.close)
        # teraz po prostu sprawdzimy, czy waluta jest na liście walut
        set_valutes_file_opened = await loop.run_in_executor(None, open, r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin", "rb")
        set_valutes = await loop.run_in_executor(None, pickle.load, set_valutes_file_opened)
        await loop.run_in_executor(None, set_valutes_file_opened.close)
        if self.name in set_valutes: 
            return True
        else:
            return False
    async def CurrentExchangeRate(self):
        '''Bieżący kurs wymiany waluty na rubla'''
        s = "http://www.cbr.ru/scripts/XML_daily.asp"
        async with aiohttp.ClientSession() as session:
            async with session.get(s) as response:
                r_content = await response.read()
        root = xml.etree.ElementTree.fromstring(r_content)
        for Valute in root.findall("Valute"): 
            for CharCode in Valute.findall("CharCode"): 
                if CharCode.text == self.name: 
                    return (Valute.find("VunitRate").text)