import os
import json
import sys
import re
from   tkinter import *
from   tkinter import filedialog
from   tkinter import messagebox as mb
import eel
import tasks

@eel.expose
def loadJSONFile(initialdir):
    root = Tk()
    root.withdraw()
    root.wm_attributes('-topmost', 1)
    file_path = filedialog.askopenfilename(title="Выберите JSON файл для загрузки",filetypes=[("JSON files", "*.json"), ("All files", "*.*")],initialdir=initialdir)
    if file_path:
        try:
            with open(file_path, 'r', encoding='utf-8') as file:
                data = json.load(file)
            return data
        except Exception as e:
            print(f"Ошибка при загрузке JSON файла: {e}")
            return None
    else:
        print("Файл не выбран.")
        return None

@eel.expose
def saveJSONFile(json_data):
    root = Tk()
    root.withdraw()
    root.wm_attributes('-topmost', 1)
    file_path = filedialog.asksaveasfilename(title="Сохранить JSON файл как",defaultextension=".json",filetypes=[("JSON files", "*.json"), ("All files", "*.*")])
    if file_path:
        try:
            with open(file_path, 'w', encoding='utf-8') as file:
                json.dump(json_data, file, ensure_ascii=False, indent=4)
            print(f"JSON файл успешно сохранен: {file_path}")
        except Exception as e:
            print(f"Ошибка при сохранении JSON файла: {e}")
    else:
        print("Файл не выбран.")

@eel.expose
def select_file(title,patterns,initialdir):
    patterns=patterns or ['*.*']
    filetypes = [ [p,p.split('/')[-1]] for p in patterns]
    regex     = [ p.split('/')[0] for p in patterns if len(p.split('/'))==2 ]
    root = Tk()
    root.withdraw()
    root.wm_attributes('-topmost', 1)
    while  True:
        file     = filedialog.askopenfilename(filetypes=filetypes,title=title,initialdir=initialdir)
        if not file or not regex: break
        folder=file.replace('\\','/').split('/')[-2]
        for r in regex:
            if re.match(r, folder):
                return file
        mb.showerror("Ошибка",f"Папка не соответствует паттерну {','.join(regex)}. \nПовторите выбор файла")
    return file

@eel.expose
def save_task(taskData,taskName,settings):
    try:
        return tasks.save_task(taskData,taskName,settings),0
    except Exception as e:
        return  0,str(e)

# Escribe get_task_list para obtener la lista de nombres de archivos *.xml de la carpeta settings['taskPath'].
# En la primera línea de cada archivo opcionalmente se escribe la cadena: <!-- comment -->
# Presenta la respuesta en formato de lista de objetos {fileName, comment, file_date_str}
@eel.expose
def get_task_list(settings):
    path = settings['taskPath']
    try:
        task_list = []
        # Get a list of all .xml files in the directory
        xml_files = [f for f in os.listdir(path) if f.endswith('.xml')]
        
        for filename in xml_files:
            file_path = os.path.join(path, filename)
            comment = ""
            
            # Try to read the first line for a comment
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    first_line = f.readline()
                    # Check if the first line is an HTML comment
                    if first_line.strip().startswith("<!--") and first_line.strip().endswith("-->"):
                        comment = first_line.strip()[4:-3].strip()
            except Exception as e:
                print(f"Warning: Could not read comment from {filename}: {e}")
                comment = "Error reading file"

            # Get file modification time and format it
            try:
                mod_time = os.path.getmtime(file_path)
                # Format the date as a string (e.g., "YYYY-MM-DD HH:MM:SS")
                file_date_str = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(mod_time))
            except Exception as e:
                print(f"Warning: Could not get date for {filename}: {e}")
                file_date_str = "N/A"
                
            task_list.append({
                "fileName": filename,
                "comment": comment,
                "file_date_str": file_date_str
            })
            
        return task_list
    except Exception as e:
        print(f"Error getting task list: {e}")
        return []

if __name__ == "__main__":
    options={'mode':'chrome'}
    for i in range(2,len(sys.argv),2):
        if sys.argv[i-1]=='mode':  options['mode']=sys.argv[i]

    eel.init('web')
    eel.start('index.html', **options) # , host='localhost', port=8000, size=(1280,800), cmdline_args=['--start-fullscreen'])
    # eel.start('index.html', mode='chrome-app', host='localhost', port=8000,cmdline_args=['--start-fullscreen'])