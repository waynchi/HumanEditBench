plik = open("dane_obrazki.txt")
maxbitybledne = 0
bityBledne = list()
def czyPoprawny(obrazek): # obrzek zawiera liste łancuchów znaków  i można korzystać z operatora balicowego
                            # obrazek[i][j]
    for wiersz in obrazek[:-1]: # nie liczymy z ostaniego wiersza tam są bity parzystosci
        if wiersz[:-1].count('1') % 2 != int(wiersz[-1]):
            return False
    for i in range(20): # i = 0,1,2,3,4,5,6,7..19
        kolumna = ""
        for j in range(21):  # j = 0,1,2,3,4,5,..20
            kolumna+=obrazek[j][i]
        if kolumna[:-1].count('1')% 2 != int(kolumna[-1]):
            return False
    return True

def czyNaprawialny(obrazek):
    bityKolBleden = 0
    bityWierBledne = 0
    for wiersz in obrazek[:-1]: # nie liczymy z ostaniego wiersza tam są bity parzystosci
        if wiersz[:-1].count('1') % 2 != int(wiersz[-1]):
            bityWierBledne+=1
    for i in range(20): # i = 0,1,2,3,4,5,6,7..19
        kolumna = ""
        for j in range(21):  # j = 0,1,2,3,4,5,..20
            kolumna+=obrazek[j][i]
        if kolumna[:-1].count('1')% 2 != int(kolumna[-1]):
           bityKolBleden+=1
    global maxbitybledne
    if maxbitybledne<(bityKolBleden+bityWierBledne):
        maxbitybledne = bityKolBleden+bityWierBledne
    bityBledne.append(bityKolBleden+bityWierBledne)

    if bityWierBledne >1 :
        return False
    if bityKolBleden > 1:
        return False

    return True

def napraw(obrazek):
    """Wejście stanowi plik tekstowy zawierający dane czarnobiałego obrazka zakodowane jaki piksele.
0 - piksel biały 1 - piksel czarny. 
Każdy wiersz oraz kolumna zwiera na swoim końcu bit parzystości . 
Bit parzystości jest równy 0, jeśli ilość jedynek w wierszy (lub w kolumnie dla kolumn) jest parzysta a 
1 jeśli jest nieparzysta.
np.
0 1 1 0 1 1 bit błędny należy zmienić go na przeciwny
1 1 1 0 1 0
1 1 1 1 1 1
0 1 1 0 0 0
1 1 0 1 1 0
1 1 0 0 0 - bity parzystości kolumny 
 ^
 |- bity parzystości wiersza
Napisz funkcje który znajdzie uszkodzone obrazki oraz je naprawi . tzn Jest to obrazek naprawialny ( 
posiada co najwyżej jeden bit parzystości wiersza i co najwyżej jeden bit parzystości kolumny 
niepoprawny ) a następnie naprawi te obrazy 
Wynik ma zawierać obrazek błędny(naprawialny) oraz obrazek poprawiony"""
    
    wynik = list()
    
    # Znajdź wiersz i kolumnę z błędnym bitem parzystości
    bledny_wiersz = -1
    for i in range(20): # Sprawdzaj tylko 20 pierwszych wierszy (dane)
        if obrazek[i][:-1].count('1') % 2 != int(obrazek[i][-1]):
            bledny_wiersz = i
            break

    bledna_kolumna = -1
    for i in range(20): # Sprawdzaj tylko 20 pierwszych kolumn (dane)
        kolumna = ""
        for j in range(21): # Budujemy kolumnę z 21 wierszy (dane + bit parzystości wiersza)
            kolumna += obrazek[j][i]
        if kolumna[:-1].count('1') % 2 != int(kolumna[-1]):
            bledna_kolumna = i
            break
    
    # Jeśli znaleziono błąd w wierszu lub kolumnie, napraw go
    if bledny_wiersz != -1 and bledna_kolumna != -1:
        # Zanotuj oryginalny obrazek (konwertując listę stringów na pojedynczy string)
        original_image_str = "\n".join(obrazek)
        wynik.append(("Błędny obrazek", original_image_str))

        # Stwórz głęboką kopię obrazka do naprawy
        obrazek_naprawiony = [list(wiersz) for wiersz in obrazek]
        
        # Zmień bit na przeciwny na przecięciu błędnego wiersza i kolumny
        if obrazek_naprawiony[bledny_wiersz][bledna_kolumna] == '0':
            obrazek_naprawiony[bledny_wiersz][bledna_kolumna] = '1'
        else:
            obrazek_naprawiony[bledny_wiersz][bledna_kolumna] = '0'
            
        # Konwertuj z powrotem na listę stringów
        obrazek_naprawiony_str = ["".join(wiersz) for wiersz in obrazek_naprawiony]
        
        # Zanotuj naprawiony obrazek
        fixed_image_str = "\n".join(obrazek_naprawiony_str)
        wynik.append(("Naprawiony obrazek", fixed_image_str))
        
    return wynik

poprawne = 0
naprawialne = 0
obrazek = list()
for linia in plik:
    wiersz = linia.strip() # odcinamy białe znaki np enter
   # wiersz = wiersz[:-1]  # tylko dane obrazka bez bitu parzystosci  teraz czytamy cala wiersz danych
    obrazek.append(wiersz)
    if len(obrazek) == 21: # mamy 21 lini czyli cały obrazek razem z wierszam bitów parzystosci
        if czyPoprawny(obrazek):
            poprawne+=1
        elif czyNaprawialny(obrazek):
            naprawialne+=1
            naprawiony = napraw(obrazek)


    if len(obrazek) == 22:  # po 22 lini czyscimy obrazek by czytać wiersze nastepnego obrazka
        obrazek = list()

print(poprawne,naprawialne,200-poprawne-naprawialne)
print(maxbitybledne,max(bityBledne))