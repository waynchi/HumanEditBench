def create_matrix(rows: int, cols: int, fill_value=0) -> list:
    """
    Создает матрицу размера rows x cols, заполненную значением fill_value.
    Параметры:
    rows (int): количество строк.
    cols (int): количество столбцов.
    fill_value (любой тип): значение для заполнения матрицы.
    Возвращает:
    list: матрица в виде списка списков.
    """
    if rows <= 0 or cols <= 0:
        return []
    
    matrix = []
    for i in range(rows):
        row = []
        for j in range(cols):
            row.append(fill_value)
        matrix.append(row)
    return matrix

def add_matrices(matrix_a: list, matrix_b: list) -> list:
    """
    Складывает две матрицы одинакового размера.
    Параметры:
    matrix_a (list): первая матрица.
    matrix_b (list): вторая матрица.
    Возвращает:
    list: результат сложения матриц.
    """
    rows_a = len(matrix_a)
    if rows_a == 0:
        return []
    
    cols_a = len(matrix_a[0])
    rows_b = len(matrix_b)
    cols_b = len(matrix_b[0])

    if rows_a != rows_b or cols_a != cols_b:
        raise ValueError("Матрицы должны иметь одинаковый размер для сложения")

    result_matrix = create_matrix(rows_a, cols_a)
    
    for i in range(rows_a):
        for j in range(cols_a):
            result_matrix[i][j] = matrix_a[i][j] + matrix_b[i][j]
            
    return result_matrix

def scalar_multiply(matrix: list, scalar: float) -> list:
    """
    Умножает все элементы матрицы на скаляр.
    Параметры:
    matrix (list): исходная матрица.
    scalar (float): число, на которое умножаются элементы матрицы.
    Возвращает:
    list: результат умножения матрицы на скаляр.
    """
    if not matrix:
        return []
        
    rows = len(matrix)
    cols = len(matrix[0])
    
    result_matrix = create_matrix(rows, cols)
    
    for i in range(rows):
        for j in range(cols):
            result_matrix[i][j] = matrix[i][j] * scalar
            
    return result_matrix

def multiply_matrices(matrix_a: list, matrix_b: list) -> list:
    """
    Перемножает две матрицы.
    Параметры:
    matrix_a (list): первая матрица.
    matrix_b (list): вторая матрица.
    Возвращает:
    list: результат умножения матриц.
    """
    if not matrix_a or not matrix_b:
        return []

    rows_a = len(matrix_a)
    cols_a = len(matrix_a[0])
    rows_b = len(matrix_b)
    cols_b = len(matrix_b[0])

    if cols_a != rows_b:
        raise ValueError("Количество столбцов первой матрицы должно быть равно количеству строк второй матрицы")

    result_matrix = create_matrix(rows_a, cols_b)
    
    for i in range(rows_a):
        for j in range(cols_b):
            sum_val = 0
            for k in range(cols_a): # or range(rows_b)
                sum_val += matrix_a[i][k] * matrix_b[k][j]
            result_matrix[i][j] = sum_val
            
    return result_matrix

def transpose_matrix(matrix: list) -> list:
    """
    Транспонирует матрицу.
    Параметры:
    matrix (list): исходная матрица.
    Возвращает:
    list: транспонированная матрица.
    """
    if not matrix:
        return []
        
    rows = len(matrix)
    cols = len(matrix[0])
    
    result_matrix = create_matrix(cols, rows)
    
    for i in range(rows):
        for j in range(cols):
            result_matrix[j][i] = matrix[i][j]
            
    return result_matrix

def determinant_3x3(matrix: list) -> float:
    """
    Вычисляет определитель матрицы 3x3.
    Параметры:
    matrix (list): исходная матрица размером 3x3.
    Возвращает:
    float: определитель матрицы.
    """
    if len(matrix) != 3 or len(matrix[0]) != 3:
        raise ValueError("Матрица должна быть размером 3x3")
        
    a11, a12, a13 = matrix[0]
    a21, a22, a23 = matrix[1]
    a31, a32, a33 = matrix[2]
    
    det = (a11 * (a22 * a33 - a23 * a32) -
           a12 * (a21 * a33 - a23 * a31) +
           a13 * (a21 * a32 - a22 * a31))
           
    return float(det)