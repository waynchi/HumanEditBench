python
def create_matrix(rows: int, cols: int, fill_value=0) -> list:
    """
    创建一个大小为rows x cols的矩阵，并用fill_value填充。
    参数：
        rows (int): 行数。
        cols (int): 列数。
        fill_value (任意类型): 用于填充矩阵的值。
    返回：
        list: 以列表形式表示的矩阵。
    """
    matrix = []
    for i in range(rows):
        row = []
        for j in range(cols):
            row.append(fill_value)
        matrix.append(row)
    return matrix

def add_matrices(matrix_a: list, matrix_b: list) -> list:
    """
    加法两个相同大小的矩阵。
    参数：
        matrix_a (list): 第一个矩阵。
        matrix_b (list): 第二个矩阵。
    返回：
        list: 矩阵加法的结果。
    """
    rows = len(matrix_a)
    cols = len(matrix_a[0])
    result = create_matrix(rows, cols)
    for i in range(rows):
        for j in range(cols):
            result[i][j] = matrix_a[i][j] + matrix_b[i][j]
    return result

def scalar_multiply(matrix: list, scalar: float) -> list:
    """
    将矩阵的所有元素乘以标量。
    参数：
        matrix (list): 原始矩阵。
        scalar (float): 用于乘以矩阵元素的数。
    返回：
        list: 矩阵数乘的结果。
    """
    rows = len(matrix)
    cols = len(matrix[0])
    result = create_matrix(rows, cols)
    for i in range(rows):
        for j in range(cols):
            result[i][j] = matrix[i][j] * scalar
    return result

def multiply_matrices(matrix_a: list, matrix_b: list) -> list:
    """
    乘法两个矩阵。
    参数：
        matrix_a (list): 第一个矩阵。
        matrix_b (list): 第二个矩阵。
    返回：
        list: 矩阵乘法的结果。
    """
    rows_a = len(matrix_a)
    cols_a = len(matrix_a[0])
    rows_b = len(matrix_b)
    cols_b = len(matrix_b[0])
    result = create_matrix(rows_a, cols_b)
    for i in range(rows_a):
        for j in range(cols_b):
            total = 0
            for k in range(cols_a):
                total += matrix_a[i][k] * matrix_b[k][j]
            result[i][j] = total
    return result

def transpose_matrix(matrix: list) -> list:
    """
    转置矩阵。
    参数：
        matrix (list): 原始矩阵。
    返回：
        list: 转置后的矩阵。
    """
    rows = len(matrix)
    cols = len(matrix[0])
    result = create_matrix(cols, rows)
    for i in range(rows):
        for j in range(cols):
            result[j][i] = matrix[i][j]
    return result

def determinant_3x3(matrix: list) -> float:
    """
    计算3x3矩阵的行列式。
    参数：
        matrix (list): 大小为3x3的原始矩阵。
    返回：
        float: 矩阵的行列式。
    """
    a = matrix[0][0]
    b = matrix[0][1]
    c = matrix[0][2]
    d = matrix[1][0]
    e = matrix[1][1]
    f = matrix[1][2]
    g = matrix[2][0]
    h = matrix[2][1]
    i_val = matrix[2][2]
    
    det = a * (e * i_val - f * h) - b * (d * i_val - f * g) + c * (d * h - e * g)
    return det