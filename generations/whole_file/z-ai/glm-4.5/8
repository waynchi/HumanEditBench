python
def is_sum_of_four_squares(n):
    if n < 0:
        return False
    global representations
    if representations is None:
        return None
    if n in representations:
        return representations[n]
    return None

def find_four_squares_sums(limit):
    """
    Finds numbers up to a limit that can be expressed as the sum of four squares
    without any of the squares being zero.
    """
    global representations
    if representations is None:
        return []
    results = []
    for n in range(1, limit + 1):
        if n in representations:
            results.append(n)
    return results

# Example usage:
limit = int(input("Digite o limite superior: "))
representations = None  # Global variable to store precomputed representations

def precompute_representations(limit):
    max_val = int(limit**0.5) + 1
    rep_dict = {}
    for a in range(1, max_val):
        a2 = a * a
        if a2 > limit:
            break
        for b in range(1, max_val):
            b2 = b * b
            s2 = a2 + b2
            if s2 > limit:
                break
            for c in range(1, max_val):
                c2 = c * c
                s3 = s2 + c2
                if s3 > limit:
                    break
                for d in range(1, max_val):
                    d2 = d * d
                    s = s3 + d2
                    if s > limit:
                        break
                    if s not in rep_dict:
                        rep_dict[s] = (a, b, c, d)
    return rep_dict

representations = precompute_representations(limit)
sums_found = find_four_squares_sums(limit)
print("Números que podem ser expressos como a soma de quatro quadrados não nulos:")
for num in sums_found:
    result = is_sum_of_four_squares(num)
    a, b, c, d = result
    print(f"{num} = {a}^2 + {b}^2 + {c}^2 + {d}^2")