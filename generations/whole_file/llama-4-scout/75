import requests #для запроса к API
import xml.etree.ElementTree #для обработки xml-ответа API
import datetime #для дат по оси иксов
import pickle #для хранения переменных в файле
import json
import aiofiles
import asyncio

#фак ю нигер
#допиши чтобы set_valutes заполнялось!!! оно факинг нигер и не заполняется


#класс валюта
class valute():
    """Валюта и всё с ней связанное, через ЦБ РФ \n
    Требуются библеотеки: \n
    requests \n
    xml.etree.ElementTree \n
    datetime \n
    pickle \n
    json \n
    """
    def __init__(self, name):
        self.name = name

    async def correct_name(self):
        """Проверка имени валюты на наличие в множестве валют. Множество обновляется не чаще раза в день"""
        async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", "r", encoding="utf-8") as info_opened_file: 
            info = json.loads(await info_opened_file.read())
        if datetime.datetime.now() - datetime.timedelta(days=1) > datetime.datetime.strptime(info["last_day_check"]["valute"], "%Y-%m-%d %H:%M:%S.%f"): 
            #если отличается более чем на 1 день, то переписываем список (множество) валют:
            set_valutes = set() 
            async with aiohttp.ClientSession() as session:
                async with session.get("http://www.cbr.ru/scripts/XML_daily.asp") as response:
                    root = xml.etree.ElementTree.fromstring(await response.text())
            for Valute in root.findall("Valute"):
                CharCode = Valute.find("CharCode")
                set_valutes.add(CharCode.text) 
            async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin", "wb") as set_valutes_file_opened: 
                pickle.dump(set_valutes, set_valutes_file_opened) 
            #поменяем время последнего обновления
            info["last_day_check"]["valute"] = str(datetime.datetime.now())
            async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", "w", encoding="utf-8") as info_opened_file:
                json.dump(info, info_opened_file, indent = 3, ensure_ascii = False) 
        #теперь просто проверим есть ли валюта в списке валют
        async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin", "rb") as set_valutes_file_opened: 
            set_valutes = pickle.load(set_valutes_file_opened) 
        if self.name in set_valutes: 
            return True
        else:
            return False

    def CurrentExchangeRate(self):
        '''Текущий курс обмена валюты на рубль'''
        r = requests.get("http://www.cbr.ru/scripts/XML_daily.asp") #Api ЦБ РФ
        root = xml.etree.ElementTree.fromstring(r.content)
        for Valute in root.findall("Valute"): #ищем контейнеры валюты
            for CharCode in Valute.findall("CharCode"): #ищем контейнеры чаркодов
                if CharCode.text == self.name: #находим контейнер с нужной валютой
                    return (Valute.find("VunitRate").text)

However, I realized you are trying to use asyncio for IO-bound operations but still using synchronous xml parsing and requests which can block event loop. It would be best if you change it to asynchronous as well.

Below is improved code snippet. You would need to install aiohttp.
python
import aiohttp
import asyncio
import aiofiles
import xml.etree.ElementTree
import datetime
import pickle
import json

class valute:
    """Валюта и всё с ней связанное, через ЦБ РФ \n
    Требуются библеотеки: \n
    aiohttp \n
    asyncio \n
    aiofiles \n
    xml.etree.ElementTree \n
    datetime \n
    pickle \n
    json \n
    """
    def __init__(self, name):
        self.name = name

    async def correct_name(self):
        async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", "r", encoding="utf-8") as info_opened_file: 
            info = json.loads(await info_opened_file.read())
        if datetime.datetime.now() - datetime.timedelta(days=1) > datetime.datetime.strptime(info["last_day_check"]["valute"], "%Y-%m-%d %H:%M:%S.%f"): 
            #если отличается более чем на 1 день, то переписываем список (множество) валют:
            set_valutes = set() 
            async with aiohttp.ClientSession() as session:
                async with session.get("http://www.cbr.ru/scripts/XML_daily.asp") as response:
                    root = xml.etree.ElementTree.fromstring(await response.text())
            for Valute in root.findall("Valute"):
                CharCode = Valute.find("CharCode")
                set_valutes.add(CharCode.text) 
            async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin", "wb") as set_valutes_file_opened: 
                pickle.dump(set_valutes, set_valutes_file_opened) 
            #поменяем время последнего обновления
            info["last_day_check"]["valute"] = str(datetime.datetime.now())
            async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", "w", encoding="utf-8") as info_opened_file:
                json.dump(info, info_opened_file, indent = 3, ensure_ascii = False) 
        #теперь просто проверим есть ли валюта в списке валют
        async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin", "rb") as set_valutes_file_opened: 
            set_valutes = pickle.load(set_valutes_file_opened) 
        if self.name in set_valutes: 
            return True
        else:
            return False

    async def CurrentExchangeRate(self):
        '''Текущий курс обмена валюты на рубль'''
        async with aiohttp.ClientSession() as session:
            async with session.get("http://www.cbr.ru/scripts/XML_daily.asp") as response:
                root = xml.etree.ElementTree.fromstring(await response.text())
        for Valute in root.findall("Valute"): 
            for CharCode in Valute.findall("CharCode"): 
                if CharCode.text == self.name: 
                    return (Valute.find("VunitRate").text)

async def main():
    val = valute('some_valute')
    print(await val.correct_name())
    print(await val.CurrentExchangeRate())

asyncio.run(main())