import numpy as np

def conjugate_gradient(A, b, x0=None, tol=1e-10, max_iter=1000):
    n = len(b)
    if x0 is None:
        x0 = np.zeros(n)
    x = x0
    r = b - np.dot(A, x)
    p = r.copy()
    rsold = np.dot(r, r)

    for _ in range(max_iter):
        Ap = np.dot(A, p)
        alpha = rsold / np.dot(p, Ap)
        x = x + alpha * p
        r = r - alpha * Ap
        rsnew = np.dot(r, r)
        if np.sqrt(np.dot(r, r)) < tol:
            break
        p = r + (rsnew / rsold) * p
        rsold = rsnew

    return x

# Example usage
if __name__ == "__main__":
    A = np.array([[4, 1, 1], [1, 3, 1], [1, 1, 5]])
    b = np.array([7, 7, 9])
    x = conjugate_gradient(A, b)
    print("Solution:", x)