import requests  # для запроса к API
import xml.etree.ElementTree  # для обработки xml-ответа API
import matplotlib.pyplot as plt  # для построения графиков
import pandas as pd  # для создания датафрейма и разденеия всех свечей на два типа: close и open
import datetime  # для дат по оси иксов
import pickle  # для хранения переменных в файле
import json
import aiohttp  # асинхронный HTTP клиент
import aiofiles  # асинхронная работа с файлами
import io  # для работы с бинарными данными в памяти

# класс валюта
class valute():
    """Валюта и всё с ней связанное, через ЦБ РФ
    Требуются библеотеки:
    requests
    xml.etree.ElementTree
    matplotlib.pyplot as plt
    pandas as pd
    datetime
    pickle
    json
    """

    def __init__(self, name):
        self.name = name

    async def correct_name(self):
        """Проверка имени валюты на наличие в множестве валют. Множество обновляется не чаще раза в день"""
        # читаем файл с информацией
        async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", "r", encoding="utf-8") as f:
            info_str = await f.read()
            info = json.loads(info_str)

        # проверяем дату последнего обновления
        last_check = datetime.datetime.strptime(
            info["last_day_check"]["valute"], "%Y-%m-%d %H:%M:%S.%f"
        )
        if datetime.datetime.now() - datetime.timedelta(days=1) > last_check:
            # обновляем список валют
            set_valutes = set()
            url = "http://www.cbr.ru/scripts/XML_daily.asp"
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as resp:
                    content = await resp.read()
            root = xml.etree.ElementTree.fromstring(content)
            for Valute in root.findall("Valute"):
                CharCode = Valute.find("CharCode")
                if CharCode is not None:
                    set_valutes.add(CharCode.text)

            # сохраняем в бинарный файл
            with io.BytesIO() as buffer:
                pickle.dump(set_valutes, buffer)
                data_bytes = buffer.getvalue()
            async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin", "wb") as f:
                await f.write(data_bytes)

            # обновляем время проверки
            info["last_day_check"]["valute"] = str(datetime.datetime.now())
            async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", "w", encoding="utf-8") as f:
                await f.write(json.dumps(info, indent=3, ensure_ascii=False))

        # читаем актуальный набор валют
        async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin", "rb") as f:
            data_bytes = await f.read()
        set_valutes = pickle.loads(data_bytes)

        return self.name in set_valutes

    async def CurrentExchangeRate(self):
        """Текущий курс обмена валюты на рубль"""
        url = "http://www.cbr.ru/scripts/XML_daily.asp"
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                content = await resp.read()
        root = xml.etree.ElementTree.fromstring(content)
        for Valute in root.findall("Valute"):
            CharCode = Valute.find("CharCode")
            if CharCode is not None and CharCode.text == self.name:
                rate_elem = Valute.find("VunitRate")
                if rate_elem is not None:
                    return rate_elem.text
        return None