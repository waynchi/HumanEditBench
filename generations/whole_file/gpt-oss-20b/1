import torch.nn as nn
import torch.nn.functional as F

# Updated network with Dropout after each conv layer (no BatchNorm)
class SimpleConvNet3(nn.Module):
    def __init__(self):
        super(SimpleConvNet3, self).__init__()
        self.conv1 = nn.Conv2d(in_channels=3, out_channels=32, kernel_size=3, stride=1, padding=1)
        self.conv2 = nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3, stride=1, padding=1)
        self.conv3 = nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3, stride=1, padding=1)
        self.conv4 = nn.Conv2d(in_channels=128, out_channels=256, kernel_size=3, stride=1, padding=1)
        self.fc1 = nn.Linear(256 * 16 * 16, 512)
        self.fc2 = nn.Linear(512, 3)  # 3 output classes

        # Dropout layers
        self.dropout_conv1 = nn.Dropout(p=0.25)
        self.dropout_conv2 = nn.Dropout(p=0.25)
        self.dropout_conv3 = nn.Dropout(p=0.25)
        self.dropout_conv4 = nn.Dropout(p=0.25)
        self.dropout_fc = nn.Dropout(p=0.5)

    def forward(self, x):
        x = self.dropout_conv1(F.relu(self.conv1(x)))
        x = F.max_pool2d(x, kernel_size=2, stride=2)

        x = self.dropout_conv2(F.relu(self.conv2(x)))
        x = F.max_pool2d(x, kernel_size=2, stride=2)

        x = self.dropout_conv3(F.relu(self.conv3(x)))
        x = F.max_pool2d(x, kernel_size=2, stride=2)

        x = self.dropout_conv4(F.relu(self.conv4(x)))
        x = F.max_pool2d(x, kernel_size=2, stride=2)

        x = x.view(x.size(0), -1)  # Flatten the tensor

        x = self.dropout_fc(F.relu(self.fc1(x)))
        x = self.fc2(x)
        return x