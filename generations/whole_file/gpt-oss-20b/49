def create_matrix(rows: int, cols: int, fill_value=0) -> list:
    """
    Создает матрицу размера rows x cols, заполненную значением fill_value.

    Параметры:
        rows (int): количество строк.
        cols (int): количество столбцов.
        fill_value (любой тип): значение для заполнения матрицы.

    Возвращает:
        list: матрица в виде списка списков.
    """
    if rows < 0 or cols < 0:
        raise ValueError("Размер матрицы должен быть неотрицательным")
    return [[fill_value for _ in range(cols)] for _ in range(rows)]


def add_matrices(matrix_a: list, matrix_b: list) -> list:
    """
    Складывает две матрицы одинакового размера.

    Параметры:
        matrix_a (list): первая матрица.
        matrix_b (list): вторая матрица.

    Возвращает:
        list: результат сложения матриц.
    """
    if not matrix_a or not matrix_b:
        raise ValueError("Матрицы не могут быть пустыми")
    if len(matrix_a) != len(matrix_b) or any(len(row_a) != len(row_b) for row_a, row_b in zip(matrix_a, matrix_b)):
        raise ValueError("Матрицы должны иметь одинаковые размеры")
    result = []
    for row_a, row_b in zip(matrix_a, matrix_b):
        result.append([a + b for a, b in zip(row_a, row_b)])
    return result


def scalar_multiply(matrix: list, scalar: float) -> list:
    """
    Умножает все элементы матрицы на скаляр.

    Параметры:
        matrix (list): исходная матрица.
        scalar (float): число, на которое умножаются элементы матрицы.

    Возвращает:
        list: результат умножения матрицы на скаляр.
    """
    return [[elem * scalar for elem in row] for row in matrix]


def multiply_matrices(matrix_a: list, matrix_b: list) -> list:
    """
    Перемножает две матрицы.

    Параметры:
        matrix_a (list): первая матрица.
        matrix_b (list): вторая матрица.

    Возвращает:
        list: результат умножения матриц.
    """
    if not matrix_a or not matrix_b:
        raise ValueError("Матрицы не могут быть пустыми")
    n_rows_a = len(matrix_a)
    n_cols_a = len(matrix_a[0])
    n_rows_b = len(matrix_b)
    n_cols_b = len(matrix_b[0])

    if n_cols_a != n_rows_b:
        raise ValueError("Количество столбцов первой матрицы должно совпадать с количеством строк второй матрицы")

    # Инициализируем результат нулевыми строками и столбцами
    result = [[0 for _ in range(n_cols_b)] for _ in range(n_rows_a)]

    for i in range(n_rows_a):
        for k in range(n_cols_a):
            for j in range(n_cols_b):
                result[i][j] += matrix_a[i][k] * matrix_b[k][j]

    return result


def transpose_matrix(matrix: list) -> list:
    """
    Транспонирует матрицу.

    Параметры:
        matrix (list): исходная матрица.

    Возвращает:
        list: транспонированная матрица.
    """
    if not matrix:
        return []
    n_rows = len(matrix)
    n_cols = len(matrix[0])
    # Проверяем, что все строки одинакового размера
    if any(len(row) != n_cols for row in matrix):
        raise ValueError("Все строки матрицы должны иметь одинаковую длину")
    return [[matrix[i][j] for i in range(n_rows)] for j in range(n_cols)]


def determinant_3x3(matrix: list) -> float:
    """
    Вычисляет определитель матрицы 3x3.

    Параметры:
        matrix (list): исходная матрица размером 3x3.

    Возвращает:
        float: определитель матрицы.
    """
    if len(matrix) != 3 or any(len(row) != 3 for row in matrix):
        raise ValueError("Ожидается матрица 3x3")
    a11, a12, a13 = matrix[0]
    a21, a22, a23 = matrix[1]
    a31, a32, a33 = matrix[2]
    return (a11 * (a22 * a33 - a23 * a32)
            - a12 * (a21 * a33 - a23 * a31)
            + a13 * (a21 * a32 - a22 * a31))