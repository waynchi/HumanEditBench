class SimpleConvNet1(nn.Module):
    def __init__(self, input_shape):  # input_shape is a tuple (C, H, W)
        super().__init__()

        self.conv1 = nn.Sequential(
            nn.Conv2d(3, 32, kernel_size=3, stride=1, padding=0),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=2, stride=2)
        )

        self.conv2 = nn.Sequential(
            nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=0),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=2, stride=2)
        )

        self.flatten = nn.Flatten()

        # Compute the size of the flattened tensor after the conv layers
        dummy = torch.zeros(1, *input_shape)
        with torch.no_grad():
            x = self.conv1(dummy)
            x = self.conv2(x)
        flattened_size = x.view(1, -1).size(1)

        self.fc1 = nn.Sequential(
            nn.Linear(flattened_size, 512),
            nn.ReLU(),
            nn.Linear(512, 3)
        )

    def forward(self, x):
        x = self.conv1(x)
        x = self.conv2(x)
        x = self.flatten(x)
        x = self.fc1(x)
        return x