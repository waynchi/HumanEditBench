import random
import logging
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.common.exceptions import NoSuchElementException, TimeoutException
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time

class SearchModule:
    def __init__(self, driver, config):
        self.driver = driver
        self.config = config
        self.search_engine = config.get('Search', 'search_engine')
        self.queries = [q.strip() for q in config.get('Search', 'queries').split(',')]
        self.random_query = config.getboolean('Search', 'random_query')

    def perform_search(self):
        query = random.choice(self.queries) if self.random_query else self.queries[0]
        logging.info(f"Performing search with query: {query}")

        try:
            if self.search_engine.lower() == 'google':
                self.driver.get("https://www.google.com")
                search_box = WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.NAME, "q"))
                )
            elif self.search_engine.lower() == 'yandex':
                self.driver.get("https://ya.ru")
                search_box = WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, 'input[placeholder="Найдётся всё"]'))
                )
            elif self.search_engine.lower() == 'bing':
                self.driver.get("https://www.bing.com")
                search_box = WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.NAME, "q"))
                )
            else:
                logging.error("Unsupported search engine.")
                return
        except TimeoutException:
            logging.error("Timed out waiting for search box to load.")
            return

        try:
            search_box.send_keys(query + Keys.RETURN)
            time.sleep(random.uniform(2, 4))  # Esperando la carga de resultados
        except Exception as e:
            logging.error(f"Failed to send search query: {str(e)}")
            return

    def navigate_random_link(self):
        logging.info("Navigating to a random search result link.")
        try:
            if self.search_engine.lower() == 'google':
                links = WebDriverWait(self.driver, 10).until(
                    EC.presence_of_all_elements_located((By.CSS_SELECTOR, 'div.yuRUbf > a'))
                )
            elif self.search_engine.lower() == 'yandex':
                links = WebDriverWait(self.driver, 10).until(
                    EC.presence_of_all_elements_located((By.CSS_SELECTOR, 'a.link'))
                )
            elif self.search_engine.lower() == 'bing':
                links = WebDriverWait(self.driver, 10).until(
                    EC.presence_of_all_elements_located((By.CSS_SELECTOR, 'li.b_algo h2 a'))
                )
            else:
                logging.error("Unsupported search engine.")
                return
        except TimeoutException:
            logging.error("Timed out waiting for search results to load.")
            return

        if not links:
            logging.warning("No links found on the search results page.")
            return

        try:
            random_link = random.choice(links)
            href = random_link.get_attribute('href')
            logging.info(f"Navigating to: {href}")
            self.driver.get(href)
            time.sleep(random.uniform(3, 6))  # Esperando la carga de la página
        except Exception as e:
            logging.error(f"Failed to navigate to random link: {str(e)}")
            return