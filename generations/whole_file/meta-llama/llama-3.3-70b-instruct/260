import numpy as np

def conjugate_gradient_method(A, b, x0, max_iter=1000, tol=1e-6):
    """
    Функция для метода сопряжённых градиентов.

    Args:
    A (numpy.array): Матрица коэффициентов.
    b (numpy.array): Вектор правой части.
    x0 (numpy.array): Начальное приближение.
    max_iter (int): Максимальное количество итераций.
    tol (float): Тolerance для остановки.

    Returns:
    x (numpy.array): Решение линейной системы.
    """
    n = len(b)
    x = x0.copy()
    r = b - np.dot(A, x)
    p = r.copy()
    rsold = np.dot(r, r)

    for _ in range(max_iter):
        Ap = np.dot(A, p)
        alpha = rsold / np.dot(p, Ap)
        x += alpha * p
        r -= alpha * Ap
        rsnew = np.dot(r, r)
        if np.sqrt(rsnew) < tol:
            break
        p = r + (rsnew / rsold) * p
        rsold = rsnew

    return x

# Пример использования
A = np.array([[4, 1], [1, 3]])
b = np.array([5, 6])
x0 = np.array([0, 0])

x = conjugate_gradient_method(A, b, x0)
print("Решение:", x)