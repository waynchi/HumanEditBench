# Folder with all photos / folder with photos for training
TRAIN_DIR = os.path.join(DATA_PATH, "train")
# Reading the directory names, which are the types of eclipses
ECLIPSE_LIST = {i:name for i, name in enumerate(os.listdir(TRAIN_DIR))}

# New training directory for the reduced training set
NEW_TRAIN_DIR = os.path.join(DATA_PATH, "new_train")
os.makedirs(NEW_TRAIN_DIR, exist_ok=True)

# Folder with photos for validation
VAL_DIR = os.path.join(DATA_PATH, "val")
os.makedirs(VAL_DIR, exist_ok=True)

# Folder with photos for testing
TEST_DIR = os.path.join(DATA_PATH, "test")

# Fraction of images in validation
VAL_FRAC = 0.3

# Create a directory with the validation set for each type of eclipse.
for eclipse in ECLIPSE_LIST.values():
    os.makedirs(os.path.join(VAL_DIR, eclipse), exist_ok=True)
    os.makedirs(os.path.join(NEW_TRAIN_DIR, eclipse), exist_ok=True)

    # Reading the image dataset.
    eclipse_path = os.path.join(TRAIN_DIR, eclipse)
    
    # Sort images for determinism
    images_filename = sorted(os.listdir(eclipse_path))
    
    # Selecting a portion of images for validation
    # Select random images from the dataset for validation, with a set random_state
    num_images = len(images_filename)
    num_val = int(num_images * VAL_FRAC)
    indices = sample_without_replacement(num_images, num_val, random_state=42)
    val_images = np.take(images_filename, indices)
    train_images = [image for i, image in enumerate(images_filename) if i not in indices]

    print(f'{eclipse} | train images = {len(train_images)} | val images = {num_val}')
    
    # Saving the validation set
    for image_filename in val_images:
        source = os.path.join(TRAIN_DIR, eclipse, image_filename)
        destination = os.path.join(VAL_DIR, eclipse, image_filename)
        shutil.copy(source, destination)
        os.remove(source)

    # Saving the new training set
    for image_filename in train_images:
        source = os.path.join(TRAIN_DIR, eclipse, image_filename)
        destination = os.path.join(NEW_TRAIN_DIR, eclipse, image_filename)
        shutil.copy(source, destination)
        os.remove(source)