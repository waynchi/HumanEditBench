import requests # 用于API请求
import xml.etree.ElementTree # 用于处理 API 的 xml 响应
import matplotlib.pyplot as plt # 用于绘制图表
import pandas as pd # 用于创建数据框并将所有蜡烛分为两种类型：收盘和开盘
import datetime # 用于X轴的日期
import pickle # 用于在文件中存储变量
import json # 用于处理数据库
import aiofiles

# 没有技术分析工具和空白天（无交易）的问题，因为在数据框中无交易的天数不是零，而是根本不存在。因此，它们不会破坏指标的值。
# 类标的，方法图表和当前价格
class ticker():
    """股票代码及其相关内容，通过 MoexApi

需要的库：

requests

xml.etree.ElementTree

matplotlib.pyplot as plt

pandas as pd

datetime

pickle

json"""
    def __init__(self, name: str):
        """self.name - 股票代码名称
self.tech_dict - 技术分析字典"""
        self.name = name 
        """Имя тикера, то есть сам по себе тикер"""
        # 原则上这里可以更改所有用户的默认设置。可能需要通过这个实现自定义技术分析工具。
        self.tech_dict = {"value" : {"use" : False, "has_periods" : False, "need_graph_space" : True}, 
                          "sma" : {"use" : False, "has_periods" : True, "periods" : [], "need_graph_space" : False},
                          "ema" : {"use" : False, "has_periods" : True, "periods" : [],"need_graph_space" : False}
                          }
        """Словарь реализованных опций теханализа. Имеет вид \n
        {"sma": {"use": True, "periods": [20, 50], "need_graph_space": False}, "rsi": {"use": True, "periods": [10], "need_graph_space": True}} \n
        Где use отвечает за использование, period - список периодов, по которым будут считаться значения, need_graph_space за то, требует ли осциллятор доп места на графике \n
        Изначально все use имеют значение False, а списки периодов пусты \n \n
        При реализации нового инструмента теханализа достаточно дописать его в self.tech_dict \n
        При этом функцию, соответствующую этому инструменту важно назвать также, как и сам инструмент в словаре. А её аргументы - self и ax (редактируемый/заполняемый график) \n
        Доп графики инструментов теханализа, которые их требуют, будут отображаться в таком же порядке, в котором инструменты располагаются в словаре. Также в этом порядке будут высвечиваться кнопки в боте и уже выбранные инструменты теханализа"""
    async def correct_name(self):
        """检查股票代码名称是否存在于股票代码集合中。集合每天更新不超过一次。"""
        async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", mode='r', enc