import os
import random
import torch
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.metrics import precision_score, recall_score
from torch.nn import functional as F
from PIL import Image
import matplotlib.pyplot as plt
import seaborn as sns

# Ruta al conjunto de datos extraído de Flickr8k
FLICKR8K_IMAGES_PATH = "flickr8k/Images"
FLICKR8K_CAPTIONS_PATH = "flickr8k/captions.txt"

# Función para cargar pares de imagen-texto de Flickr8k
def load_flickr8k_data(images_path, captions_path, fraction=0.1):
    # Leer archivo de subtítulos
    with open(captions_path, "r") as f:
        captions_data = f.readlines()[1:]  # Omitir encabezado

    # Analizar subtítulos
    image_text_pairs = {}
    for line in captions_data:
        image_name, caption = line.strip().split(",", 1)
        if image_name not in image_text_pairs:
            image_text_pairs[image_name] = []
        image_text_pairs[image_name].append(caption)

    # Cargar solo una fracción del conjunto de datos
    selected_images = random.sample(list(image_text_pairs.keys()), int(len(image_text_pairs) * fraction))
    image_text_pairs = {k: image_text_pairs[k] for k in selected_images}

    # Crear pares de imágenes y subtítulos
    pairs = []
    for image_name, captions in image_text_pairs.items():
        image_path = os.path.join(images_path, image_name)
        if os.path.exists(image_path):
            pairs.append((Image.open(image_path), random.choice(captions)))
    return pairs

# Función para crear pares no relacionados
def create_unrelated_pairs(image_text_pairs):
    """Crea pares no relacionados de imágenes y textos al mezclar aleatoriamente los textos.

Args:
    image_text_pairs (list): Una lista de tuplas que contiene imágenes y sus textos correspondientes.

Returns:
    list: Una lista de tuplas que contiene imágenes y textos no relacionados."""
    images, texts = zip(*image_text_pairs)
    unrelated_texts = random.sample(texts, len(texts))
    return list(zip(images, unrelated_texts))


def create_visual_pairs(image_text_pairs):
    """Crea pares de imágenes originales y aumentadas a partir de pares de imagen-texto.

Esta función toma una lista de pares de imagen-texto y crea nuevos pares que consisten
en las imágenes originales y sus versiones aumentadas. La augmentación utilizada
en esta implementación es un volteo horizontal.

Argumentos:
    image_text_pairs (list): Una lista de tuplas que contienen pares (imagen, texto),
        donde las imágenes son objetos PIL Image y los textos son cadenas de caracteres.

Devuelve:
    list: Una lista de tuplas que contienen pares (imagen_original, imagen_aumentada),
        donde ambos elementos son objetos PIL Image."""
    from torchvision.transforms import ToTensor
    images, _ = zip(*image_text_pairs)
    augmented_images = [ToTensor()(image).flip(-1) for image in images]  # Ejemplo de aumento: volteo horizontal
    return list(zip(images, augmented_images))


def get_embeddings(images, texts, model_id="google/siglip-base-patch16-224"):
    """Dadas listas de imágenes y textos, devuelve embeddings normalizados para ambos."""
    # Asegúrate de que texts sea una lista de cadenas
    if not all(isinstance(t, str) for t in texts):
        raise ValueError("All text inputs must be strings.")

    device = "cuda" if torch.cuda.is_available() else "cpu"
    model = AutoModel.from_pretrained(model_id, ignore_mismatched_sizes=True).to(device)
    processor = AutoProcessor.from_pretrained(model_id)
    
    # Preprocesar imágenes y textos
    image_inputs = processor(images=images, return_tensors="pt").to(device)
    text_inputs = processor(text=texts, return_tensors="pt", padding="max_length").to(device)
    
    with torch.no_grad():
        image_embeds = model.get_image_features(**image_inputs)
        text_embeds = model.get_text_features(**text_inputs)

    # Normalizar incrustaciones
    image_embeds = image_embeds / image_embeds.norm(dim=-1, keepdim=True)
    text_embeds = text_embeds / text_embeds.norm(dim=-1, keepdim=True)

    return image_embeds, text_embeds


def cosine_similarity_analysis(embeddings1, embeddings2, title):
    """Calcula la similitud coseno para pares coincidentes y no relacionados y compara distribuciones."""
    similarities = cosine_similarity(embeddings1.cpu().numpy(), embeddings2.cpu().numpy())

    # Pares coincidentes: Diagonal de la matriz de similitud
    matching_similarities = np.diag(similarities)

    # Pares no relacionados: Similitudes fuera de la diagonal
    unrelated_similarities = similarities[~np.eye(similarities.shape[0], dtype=bool)]

    print(f"### {title} ###")
    print(f"Mean Matching Similarity: {np.mean(matching_similarities):.4f}")
    print(f"Mean Unrelated Similarity: {np.mean(unrelated_similarities):.4f}")
    print()

    # Graficar distribuciones
    plt.figure(figsize=(10, 6))
    sns.histplot(matching_similarities, kde=True, label="Matching Pairs", color="blue", bins=30)
    sns.histplot(unrelated_similarities, kde=True, label="Unrelated Pairs", color="red", bins=30)
    plt.title(f"{title}: Cosine Similarity Distributions")
    plt.xlabel("Cosine Similarity")
    plt.ylabel("Frequency")
    plt.legend()
    plt.show()

# ## b. Recuperación de Vecinos Más Cercanos
def retrieval_metrics(query_embeds, target_embeds, ground_truth_indices, k=5):
    """Calcula Precision@k y Recall@k para la recuperación de vecinos más cercanos.

Esta función evalúa la efectividad de la recuperación calculando Precision@k y Recall@k.
Precision@k mide la precisión de los elementos recuperados en el top-k, mientras que Recall@k mide la capacidad
de encontrar el elemento relevante dentro de los elementos recuperados en el top-k. Se asume que hay solo una coincidencia
verdadera por consulta.

Args:
    query_embeds (torch.Tensor): Embeddings de los datos de consulta.
    target_embeds (torch.Tensor): Embeddings de los datos objetivo (base de datos).
    ground_truth_indices (list): Lista de índices en los datos objetivo que representan las coincidencias verdaderas para cada consulta.
    k (int): El número de mejores resultados a considerar.

Returns:
    tuple: Una tupla que contiene la media de Precision@k y la media de Recall@k."""
    similarities = cosine_similarity(query_embeds.cpu().numpy(), target_embeds.cpu().numpy())
    sorted_indices = np.argsort(-similarities, axis=1)[:, :k]  # Índices top-k

    # Calcular métricas
    precisions = []
    recalls = []
    for i, true_idx in enumerate(ground_truth_indices):
        retrieved_indices = sorted_indices[i]
        true_positives = int(true_idx in retrieved_indices)
        precisions.append(true_positives / k)
        recalls.append(true_positives / 1)  # Solo una coincidencia verdadera por consulta

    mean_precision = np.mean(precisions)
    mean_recall = np.mean(recalls)

    return mean_precision, mean_recall

def plot_query_token_importance(
    pil_image,
    similarity_maps,
    query_tokens,
    alpha: float = 0.5
) -> None:
    """Traza un mapa de calor separado para cada token de consulta en los similarity_maps.

Args:
    pil_image (PIL.Image.Image): La imagen original (por ejemplo, cargada a través de Image.open(...)).
    similarity_maps (torch.Tensor): 
        Forma = (num_query_tokens, n_patches_x, n_patches_y).
    query_tokens (List[str]): Una lista de cadenas para cada token en la consulta.
    alpha (float): Transparencia para las superposiciones del mapa de calor (0=transparente, 1=opaco)."""
    # Convertir PIL a numpy
    image_np = np.array(pil_image)
    H, W = image_np.shape[:2]

    num_tokens = similarity_maps.size(0)
    assert num_tokens == len(query_tokens), (
        f"The number of query tokens in similarity_maps ({num_tokens}) "
        f"doesn't match the length of query_tokens list ({len(query_tokens)})."
    )

    fig, axs = plt.subplots(1, num_tokens, figsize=(5 * num_tokens, 5))
    if num_tokens == 1:
        # Si solo hay un token, axs no será un iterable
        axs = [axs]

    for idx in range(num_tokens):
        # Cada similarity_map para un solo token de consulta: forma = (n_patches_x, n_patches_y)
        single_map = similarity_maps[idx]  # (n_patches_x, n_patches_y)

        # Incrementar a tamaño completo de la imagen sin interpolación
        upsampled = single_map.repeat(int(H//single_map.shape[0]), dim=0).repeat(int(W//single_map.shape[1]), dim=1)  

        # .to(torch.float32) solución si tu mapa es bfloat16
        heatmap = upsampled.to(torch.float32).cpu().numpy()  # (H, W)

        # Opcionalmente normalizar el mapa de calor (descomentar si se desea)
        # heatmap = (heatmap - heatmap.min()) / (heatmap.max() - heatmap.min() + 1e-8)

        # Graficar
        axs[idx].imshow(image_np, cmap=None if image_np.ndim == 3 else 'gray')
        axs[idx].imshow(heatmap, cmap='jet', alpha=alpha)
        axs[idx].set_title(f"Query: {query_tokens[idx]}")
        axs[idx].axis('off')

    plt.tight_layout()
    plt.show()