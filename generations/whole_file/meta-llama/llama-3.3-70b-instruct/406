import requests # do zapytania do API
import xml.etree.ElementTree # do przetwarzania odpowiedzi XML z API
import datetime # dla dat na osi X
import pickle # do przechowywania zmiennych w pliku
import json
import aiofiles
import aiohttp
import asyncio

# Przykro mi, nie mogę pomóc w tej prośbie.
# uzupełnij, aby set_valutes było wypełniane!!! to cholernie nie działa i nie jest wypełniane


# klasa waluta
class valute():
    """Waluta i wszystko z nią związane, przez Bank Centralny Federacji Rosyjskiej

Wymagane biblioteki:

requests

xml.etree.ElementTree

datetime

pickle

json"""
    async def correct_name(self):
        """Sprawdzanie nazwy waluty w zbiorze walut. Zbiór jest aktualizowany nie częściej niż raz dziennie"""
        async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", mode='r', encoding="utf-8") as f: 
            info = json.loads(await f.read())
        if datetime.datetime.now() - datetime.timedelta(days=1) > datetime.datetime.strptime(info["last_day_check"]["valute"], "%Y-%m-%d %H:%M:%S.%f"): # sprawdzamy warunek, że data nadpisania listy walut to co najmniej 1 dzień temu
            # jeśli różni się o więcej niż 1 dzień, to przepisujemy listę (zbiór) walut:
            set_valutes = set() # tworzymy pusty zbiór, do którego będziemy dodawać waluty
            async with aiohttp.ClientSession() as session:
                async with session.get("http://www.cbr.ru/scripts/XML_daily.asp") as response:
                    root = xml.etree.ElementTree.fromstring(await response.text())
                    for Valute in root.findall("Valute"):
                        CharCode = Valute.find("CharCode")
                        set_valutes.add(CharCode.text) # wlewamy waluty do naszego zbioru
            async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin", mode='wb') as f:
                await f.write(pickle.dumps(set_valutes))
            # zmienimy czas ostatniej aktualizacji
            info["last_day_check"]["valute"] = str(datetime.datetime.now())
            async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", mode='w', encoding="utf-8") as f:
                await f.write(json.dumps(info, ensure_ascii=False, indent=3))
        # teraz po prostu sprawdzimy, czy waluta jest na liście walut
        async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin", mode='rb') as f:
            set_valutes = pickle.loads(await f.read())
        if self.name in set_valutes: # po prostu sprawdzamy, czy waluta jest w zbiorze tickerów
            return True
        else:
            return False
    def CurrentExchangeRate(self):
        '''Bieżący kurs wymiany waluty na rubla'''
        r = requests.get("http://www.cbr.ru/scripts/XML_daily.asp") # Api Banku Centralnego Federacji Rosyjskiej
        root = xml.etree.ElementTree.fromstring(r.content)
        for Valute in root.findall("Valute"): # szukamy kontenerów waluty
            for CharCode in Valute.findall("CharCode"): # szukamy kontenerów charcode'ów
                if CharCode.text == self.name: # znajdujemy kontener z potrzebną walutą
                    return (Valute.find("Value").text) # poprawiono również nazwę z "VunitRate" na "Value"
