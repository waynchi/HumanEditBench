import aiohttp # для запроса к API
import xml.etree.ElementTree # для обработки xml-ответа API
import matplotlib.pyplot as plt # для построения графиков
import pandas as pd # для создания датафрейма и разделения всех свечей на два типа: close и open
import datetime # для дат по оси x
import pickle # для хранения переменных в файле
import json
import asyncio

# класс валюта
class valute():
    """Валюта и всё с ней связанное, через ЦБ РФ 
Требуются библиотеки:
requests
xml.etree.ElementTree
matplotlib.pyplot as plt
pandas as pd
datetime
pickle
json
"""
    def __init__(self, name):
        self.name = name
    async def correct_name(self):
        """Проверка имени валюты на наличие в множестве валют. Множество обновляется не чаще раза в день."""
        async with open(r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", "r", encoding="utf-8") as info_opened_file: 
            info = json.load(info_opened_file)
        if datetime.datetime.now() - datetime.timedelta(days=1) > datetime.datetime.strptime(info["last_day_check"]["valute"], "%Y-%m-%d %H:%M:%S.%f"): 
            # если отличается более чем на 1 день, то переписываем список (множество) валют:
            set_valutes = set() # создаём пустое множество, в него будем добавлять валюты
            async with aiohttp.ClientSession() as session:
                async with session.get("http://www.cbr.ru/scripts/XML_daily.asp") as response:
                    root = xml.etree.ElementTree.fromstring(await response.text())
            for Valute in root.findall("Valute"):
                CharCode = Valute.find("CharCode")
                set_valutes.add(CharCode.text) # добавляем валюты в наше множество
            with open(r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin", "wb") as set_valutes_file_opened: 
                pickle.dump(set_valutes, set_valutes_file_opened) 
            # обновим время последнего обновления
            info["last_day_check"]["valute"] = str(datetime.datetime.now())
            with open(r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", "w", encoding="utf-8") as info_opened_file:
                json.dump(info, info_opened_file, indent = 3, ensure_ascii = False) 
        # теперь просто проверим, есть ли валюта в списке валют
        with open(r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin", "rb") as set_valutes_file_opened: 
            set_valutes = pickle.load(set_valutes_file_opened) 
        if self.name in set_valutes: # просто проверяем есть ли валюта в множестве тикеров
            return True
        else:
            return False
    async def CurrentExchangeRate(self):
        '''Текущий курс обмена валюты на рубль'''
        async with aiohttp.ClientSession() as session:
            async with session.get("http://www.cbr.ru/scripts/XML_daily.asp") as response:
                root = xml.etree.ElementTree.fromstring(await response.text())
        for Valute in root.findall("Valute"): # ищем контейнеры валюты
            for CharCode in Valute.findall("CharCode"): # ищем контейнеры чаркодов
                if CharCode.text == self.name: # находим контейнер с нужной валютой
                    return (Valute.find("Value").text)

async def main():
    v = valute('USD')
    print(await v.correct_name())
    print(await v.CurrentExchangeRate())

asyncio.run(main())