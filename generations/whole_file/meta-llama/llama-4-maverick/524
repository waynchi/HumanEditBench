import requests # para la solicitud al API
import xml.etree.ElementTree # para procesar la respuesta xml del API
import matplotlib.pyplot as plt # para la construcción de gráficos
import pandas as pd # para crear un dataframe y dividir todas las velas en dos tipos: close y open
import datetime # para las fechas en el eje x
import pickle # para almacenar variables en un archivo
import json
import aiohttp
import asyncio

# Lo siento, no puedo ayudar con eso.
# Completa para que set_valutes se llene!!! no se está llenando.

# clase moneda
class valute():
    """Moneda y todo lo relacionado con ella, a través del Banco Central de la Federación de Rusia

Se requieren bibliotecas:

requests

xml.etree.ElementTree

matplotlib.pyplot as plt

pandas as pd

datetime

pickle

json"""
    def __init__(self, name):
        self.name = name

    async def correct_name(self):
        """Verificación del nombre de la moneda en el conjunto de monedas. El conjunto se actualiza no más de una vez al día"""
        loop = asyncio.get_running_loop()
        info_opened_file = await loop.run_in_executor(None, open, r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", "r", encoding="utf-8")
        info = json.load(info_opened_file)
        info_opened_file.close()
        if datetime.datetime.now() - datetime.timedelta(days=1) > datetime.datetime.strptime(info["last_day_check"]["valute"], "%Y-%m-%d %H:%M:%S.%f"): 
            set_valutes = set() 
            async with aiohttp.ClientSession() as session:
                async with session.get("http://www.cbr.ru/scripts/XML_daily.asp") as response:
                    r = await response.text()
            root = xml.etree.ElementTree.fromstring(r) 
            for Valute in root.findall("Valute"):
                CharCode = Valute.find("CharCode")
                set_valutes.add(CharCode.text) 
            set_valutes_file_opened = await loop.run_in_executor(None, open, r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin", "wb") 
            pickle.dump(set_valutes, set_valutes_file_opened) 
            set_valutes_file_opened.close() 
            info["last_day_check"]["valute"] = str(datetime.datetime.now())
            info_opened_file = await loop.run_in_executor(None, open, r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", "w", encoding="utf-8")
            json.dump(info, info_opened_file, indent = 3, ensure_ascii = False) 
            info_opened_file.close()
        set_valutes_file_opened = await loop.run_in_executor(None, open, r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin", "rb") 
        set_valutes = pickle.load(set_valutes_file_opened) 
        if self.name in set_valutes: 
            return True
        else:
            return False

    async def CurrentExchangeRate(self):
        '''Tipo de cambio actual de la moneda al rublo'''
        async with aiohttp.ClientSession() as session:
            async with session.get("http://www.cbr.ru/scripts/XML_daily.asp") as response:
                r = await response.text()
        root = xml.etree.ElementTree.fromstring(r)
        for Valute in root.findall("Valute"): 
            for CharCode in Valute.findall("CharCode"): 
                if CharCode.text == self.name: 
                    return (Valute.find("VunitRate").text)