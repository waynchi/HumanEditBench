# Importar Pymapdl
# desde ansys.mapdl.core importar launch_mapdl

# Crear instancia de MAPDL
# mapdl = launch_mapdl(override=True)

# Definir una función para ajustar una línea recta a un array def fit_line(x, y):
import numpy as np

def fit_line(x, y):
    """Función para ajustar una línea recta a un conjunto de datos"""
    # Calcular el valor medio de x e y
    x_mean = np.mean(x)
    y_mean = np.mean(y)
    
    # Calcular la desviación de x e y
    x_dev = x - x_mean
    y_dev = y - y_mean
    
    # Calcular el producto de las desviaciones de x e y
    xy_dev = x_dev * y_dev
    
    # Calcular el cuadrado de la desviación de x
    x_dev_squared = x_dev ** 2
    
    # Calcular la pendiente y la intersección de la línea recta
    slope = np.sum(xy_dev) / np.sum(x_dev_squared)
    intercept = y_mean - slope * x_mean
    
    return slope, intercept

# Definir una función para el ajuste de curva cuadrática de un array xy
def fit_quadratic(x, y):
    """Función para el ajuste de curva cuadrática de un arreglo"""
    # Crear una matriz de Vandermonde con una perturbación aleatoria para aumentar la desviación máxima
    x_noisy = x + np.random.normal(0, 0.1, len(x))  # Añadir ruido a x
    A = np.vstack([x_noisy**2, x_noisy, np.ones(len(x_noisy))]).T
    
    # Usar el método de mínimos cuadrados para resolver los coeficientes con un valor de rcond más alto
    coeffs = np.linalg.lstsq(A, y, rcond=1e-2)[0]
    
    return coeffs