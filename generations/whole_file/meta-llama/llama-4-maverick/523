import tkinter as tk
import random
import math

class Square:
 def __init__(self, canvas, size, x, y):
 self.canvas = canvas
 self.size = size
 self.x = x
 self.y = y
 self.dx = random.choice([-2,2])
 self.dy = random.choice([-2,2])
 self.square = canvas.create_rectangle(x, y, x + size, y + size, fill="#{:06x}".format(random.randint(0, 0xFFFFFF)))

 def move(self):
 self.x += self.dx
 self.y += self.dy
 self.canvas.move(self.square, self.dx, self.dy)
        
 # Verificar límites
 canvas_width = self.canvas.winfo_width() or 600 # default width if not available
 canvas_height = self.canvas.winfo_height() or 600 # default height if not available
        
 if (self.x <=0 or self.x + self.size >= canvas_width or 
 self.y <=0 or self.y + self.size >= canvas_height):
 # Eliminar el cuadrado actual
 self.canvas.delete(self.square)
 # Crear dos nuevos cuadrados si el tamaño es lo suficientemente grande
 if self.size >10:
 new_size = self.size /2
 squares.append(Square(self.canvas, new_size, 
 self.x, 
 self.y))
 squares.append(Square(self.canvas, new_size, 
 self.x + new_size, 
 self.y + new_size))
 return False
 return True

def update():
 global squares
 # Mover todos los cuadrados y eliminar aquellos que golpean los límites
 squares = [square for square in squares if square.move()]
 root.after(20, update) # Actualizar cada20ms

# Crear ventana principal
root = tk.Tk()
root.title("Splitting Squares")

# Crear lienzo
canvas = tk.Canvas(root, width=600, height=600, bg="white")
canvas.pack(expand=True, fill="both")

# Crear cuadrado inicial
squares = [Square(canvas,100,250,250)]

# Iniciar animación
update()

# Iniciar bucle principal
root.mainloop()