def create_matrix(rows: int, cols: int, fill_value=0) -> list:
    """
    Создает матрицу размера rows x cols, заполненную значением fill_value.
    
    Параметры:
    rows (int): количество строк.
    cols (int): количество столбцов.
    fill_value (любой тип): значение для заполнения матрицы.
    
    Возвращает:
    list: матрица в виде списка списков.
    """
    return [[fill_value for _ in range(cols)] for _ in range(rows)]

def add_matrices(matrix_a: list, matrix_b: list) -> list:
    """
    Складывает две матрицы одинакового размера.
    
    Параметры:
    matrix_a (list): первая матрица.
    matrix_b (list): вторая матрица.
    
    Возвращает:
    list: результат сложения матриц.
    """
    rows_a, cols_a = len(matrix_a), len(matrix_a[0])
    rows_b, cols_b = len(matrix_b), len(matrix_b[0])
    if rows_a != rows_b or cols_a != cols_b:
        raise ValueError("Матрицы должны быть одинакового размера")
    return [[matrix_a[i][j] + matrix_b[i][j] for j in range(cols_a)] for i in range(rows_a)]

def scalar_multiply(matrix: list, scalar: float) -> list:
    """
    Умножает все элементы матрицы на скаляр.
    
    Параметры:
    matrix (list): исходная матрица.
    scalar (float): число, на которое умножаются элементы матрицы.
    
    Возвращает:
    list: результат умножения матрицы на скаляр.
    """
    return [[element * scalar for element in row] for row in matrix]

def multiply_matrices(matrix_a: list, matrix_b: list) -> list:
    """
    Перемножает две матрицы.
    
    Параметры:
    matrix_a (list): первая матрица.
    matrix_b (list): вторая матрица.
    
    Возвращает:
    list: результат умножения матриц.
    """
    rows_a, cols_a = len(matrix_a), len(matrix_a[0])
    rows_b, cols_b = len(matrix_b), len(matrix_b[0])
    if cols_a != rows_b:
        raise ValueError("Количество столбцов первой матрицы должно быть равно количеству строк второй матрицы")
    return [[sum(matrix_a[i][k] * matrix_b[k][j] for k in range(cols_a)) for j in range(cols_b)] for i in range(rows_a)]

def transpose_matrix(matrix: list) -> list:
    """
    Транспонирует матрицу.
    
    Параметры:
    matrix (list): исходная матрица.
    
    Возвращает:
    list: транспонированная матрица.
    """
    return list(map(list, zip(*matrix)))

def determinant_3x3(matrix: list) -> float:
    """
    Вычисляет определитель матрицы 3x3.
    
    Параметры:
    matrix (list): исходная матрица размером 3x3.
    
    Возвращает:
    float: определитель матрицы.
    """
    a11, a12, a13 = matrix[0]
    a21, a22, a23 = matrix[1]
    a31, a32, a33 = matrix[2]
    return a11 * (a22 * a33 - a23 * a32) - a12 * (a21 * a33 - a23 * a31) + a13 * (a21 * a32 - a22 * a31)