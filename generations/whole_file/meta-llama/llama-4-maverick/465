import numpy as np

def gradientes_conjugados(A, b, x0=None, tol=1e-10, max_iter=1000):
    """
    Función para resolver sistemas de ecuaciones lineales utilizando el método de gradientes conjugados.

    Parámetros:
    - A: Matriz cuadrada y simétrica definida positiva.
    - b: Vector de términos independientes.
    - x0: Estimación inicial para la solución. Si no se proporciona, se inicializa con un vector cero.
    - tol: Tolerancia para el criterio de convergencia.
    - max_iter: Número máximo de iteraciones.

    Retorna:
    - x: Solución aproximada del sistema Ax = b.
    """
    n = len(b)
    if x0 is None:
        x = np.zeros(n)
    else:
        x = x0
    
    r = b - np.dot(A, x)
    p = r.copy()
    rsold = np.dot(r, r)
    
    for _ in range(max_iter):
        Ap = np.dot(A, p)
        alpha = rsold / np.dot(p, Ap)
        x += alpha * p
        r -= alpha * Ap
        rsnew = np.dot(r, r)
        
        if np.sqrt(rsnew) < tol:
            break
        
        p = r + (rsnew / rsold) * p
        rsold = rsnew
    
    return x

# Ejemplo de uso
if __name__ == "__main__":
    # Definir la matriz A y el vector b
    A = np.array([[4, 1], [1, 3]])
    b = np.array([1, 2])
    
    # Resolver el sistema
    x = gradientes_conjugados(A, b)
    
    # Imprimir la solución
    print("Solución:", x)