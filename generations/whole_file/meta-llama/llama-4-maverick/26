import numpy as np

def conjugate_gradient(A, b, tol=1e-10, max_iter=1000):
    """
    Conjugate Gradient Method for solving Ax = b.

    Parameters:
    A (numpy array): Symmetric positive definite matrix.
    b (numpy array): Right-hand side vector.
    tol (float, optional): Tolerance for convergence. Defaults to 1e-10.
    max_iter (int, optional): Maximum number of iterations. Defaults to 1000.

    Returns:
    numpy array: Solution vector x.
    """
    n = len(b)
    x = np.zeros(n)
    r = b - np.dot(A, x)
    p = r.copy()
    rsold = np.dot(r, r)

    for _ in range(max_iter):
        Ap = np.dot(A, p)
        alpha = rsold / np.dot(p, Ap)
        x += alpha * p
        r -= alpha * Ap
        rsnew = np.dot(r, r)
        if np.sqrt(rsnew) < tol:
            break
        p = r + (rsnew / rsold) * p
        rsold = rsnew

    return x

# Example usage:
if __name__ == "__main__":
    # Define a symmetric positive definite matrix A
    A = np.array([[4, 1], [1, 3]])

    # Define the right-hand side vector b
    b = np.array([1, 2])

    # Solve Ax = b using Conjugate Gradient
    x = conjugate_gradient(A, b)

    print("Solution vector x:", x)