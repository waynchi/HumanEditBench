def create_matrix(rows: int, cols: int, fill_value=0) -> list:
    """ Creates a matrix of size rows x cols, filled with fill_value.
    Parameters:
    rows (int): number of rows.
    cols (int): number of columns.
    fill_value (any type): value to fill the matrix.
    Returns:
    list: matrix as a list of lists.
    """
    return [[fill_value for _ in range(cols)] for _ in range(rows)]


def add_matrices(matrix_a: list, matrix_b: list) -> list:
    """ Adds two matrices of the same size.
    Parameters:
    matrix_a (list): first matrix.
    matrix_b (list): second matrix.
    Returns:
    list: result of matrix addition.
    """
    rows_a, cols_a = len(matrix_a), len(matrix_a[0])
    rows_b, cols_b = len(matrix_b), len(matrix_b[0])
    if rows_a != rows_b or cols_a != cols_b:
        raise ValueError("Matrices must be of the same size")
    return [[matrix_a[i][j] + matrix_b[i][j] for j in range(cols_a)] for i in range(rows_a)]


def scalar_multiply(matrix: list, scalar: float) -> list:
    """ Multiplies all elements of a matrix by a scalar.
    Parameters:
    matrix (list): original matrix.
    scalar (float): number by which matrix elements are multiplied.
    Returns:
    list: result of matrix scalar multiplication.
    """
    return [[element * scalar for element in row] for row in matrix]


def multiply_matrices(matrix_a: list, matrix_b: list) -> list:
    """ Multiplies two matrices.
    Parameters:
    matrix_a (list): first matrix.
    matrix_b (list): second matrix.
    Returns:
    list: result of matrix multiplication.
    """
    rows_a, cols_a = len(matrix_a), len(matrix_a[0])
    rows_b, cols_b = len(matrix_b), len(matrix_b[0])
    if cols_a != rows_b:
        raise ValueError("Number of columns in matrix A must match number of rows in matrix B")
    return [[sum(matrix_a[i][k] * matrix_b[k][j] for k in range(cols_a)) for j in range(cols_b)] for i in range(rows_a)]


def transpose_matrix(matrix: list) -> list:
    """ Transposes a matrix.
    Parameters:
    matrix (list): original matrix.
    Returns:
    list: transposed matrix.
    """
    return list(map(list, zip(*matrix)))


def determinant_3x3(matrix: list) -> float:
    """ Calculates the determinant of a 3x3 matrix.
    Parameters:
    matrix (list): original 3x3 matrix.
    Returns:
    float: determinant of the matrix.
    """
    a11, a12, a13 = matrix[0]
    a21, a22, a23 = matrix[1]
    a31, a32, a33 = matrix[2]
    return a11 * (a22 * a33 - a23 * a32) - a12 * (a21 * a33 - a23 * a31) + a13 * (a21 * a32 - a22 * a31)