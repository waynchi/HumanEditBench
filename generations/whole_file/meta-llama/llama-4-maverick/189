import torch
import torch.nn as nn

class SimpleConvNet(nn.Module):
    def __init__(self, input_height, input_width):
        super().__init__()

        self.conv1 = nn.Sequential(
            nn.Conv2d(3, 32, 3),
            nn.ReLU(),
            nn.MaxPool2d(2)
        )

        self.conv2 = nn.Sequential(
            nn.Conv2d(32, 64, 3),
            nn.ReLU(),
            nn.MaxPool2d(2)
        )

        self.flatten = nn.Flatten()
        
        # 计算flatten后的大小
        with torch.no_grad():
            dummy_input = torch.randn(1, 3, input_height, input_width)
            dummy_output = self.conv2(self.conv1(dummy_input))
            flattened_size = dummy_output.shape[1] * dummy_output.shape[2] * dummy_output.shape[3]

        self.fc1 = nn.Sequential(
            nn.Linear(flattened_size, 512),
            nn.ReLU(),
            nn.Linear(512, 3)
        )

    def forward(self, x):
        x = self.conv1(x)
        x = self.conv2(x)
        x = self.flatten(x)
        x = self.fc1(x)
        return x

# 示例用法
if __name__ == "__main__":
    # 假设输入图像大小为224x224
    model = SimpleConvNet(224, 224)
    dummy_input = torch.randn(1, 3, 224, 224)
    output = model(dummy_input)
    print(output.shape)