import numpy as np

def conjugate_gradient(A, b, x0=None, tol=1e-10, max_iter=1000):
    if x0 is None:
        x0 = np.zeros_like(b)
        
    x = x0
    r = b - A @ x
    p = r
    rsold = np.dot(r, r)

    for i in range(max_iter):
        Ap = A @ p
        alpha = rsold / np.dot(p, Ap)
        x = x + alpha * p
        r = r - alpha * Ap
        rsnew = np.dot(r, r)

        if np.sqrt(rsnew) < tol:
            break

        p = r + (rsnew / rsold) * p
        rsold = rsnew

    return x