from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

def cluster_data(features_transformed, clusters_dict, clustering_method='kmeans'):
    """
    Выполняет кластеризацию данных по выбранным столбцам.

    Args:
        features_transformed (pandas.DataFrame): Преобразованный DataFrame с параметрами.
        clusters_dict (dict): Словарь, где ключи - имена столбцов для меток кластеров, 
                              значения - кортежи с именами столбцов для кластеризации.
        clustering_method (str): Метод кластеризации ('kmeans').

    Returns:
        pandas.DataFrame: DataFrame с добавленными столбцами меток кластеров.
    """
    if features_transformed is None:
        print("Сначала выполните преобразование данных (этап 5).")
        return None

    for cluster_feature_name, columns in clusters_dict.items():
        features_for_clustering = features_transformed[list(columns)].copy()

        if clustering_method == 'kmeans':
            model = KMeans(n_clusters=len(np.unique(features_transformed[columns[0]])), random_state=42, n_init=10)
            cluster_labels = model.fit_predict(features_for_clustering)
            
            # Оценка качества кластеризации (например, с помощью коэффициента силуэта)
            if len(np.unique(cluster_labels)) > 1: # Проверка на случай, когда все точки отнесены к одному кластеру
                silhouette_avg = silhouette_score(features_for_clustering, cluster_labels)
                print(f"Коэффициент силуэта для {len(np.unique(cluster_labels))} кластеров в '{cluster_feature_name}': {silhouette_avg:.4f}")
            else:
                print(f"Невозможно рассчитать коэффициент силуэта для {cluster_feature_name} (все точки в одном кластере).")
        else:
            print("Неподдерживаемый метод кластеризации.")
            return None

        features_transformed[cluster_feature_name] = cluster_labels
        print(f"Кластеризация выполнена для '{cluster_feature_name}'. Метки кластеров добавлены в столбец '{cluster_feature_name}'.")

    return features_transformed

# Выполнение кластеризации (после этапа 5 и до этапа 6)
if 'features_transformed' in locals() and features_transformed is not None:
    clusters_dict = {
        'cluster1': ('column1', 'column2'),
        'cluster2': ('column3',)
    }
    features_transformed = cluster_data(features_transformed, clusters_dict)
    
    # Визуализация кластеров (пример для случая, когда есть 2 числовых признака)
    numerical_features = features_transformed.select_dtypes(include=np.number)
    if numerical_features.shape[1] >= 2:
        plt.figure(figsize=(8, 6))
        plt.scatter(numerical_features.iloc[:, 0], numerical_features.iloc[:, 1], c=features_transformed['cluster1'], cmap='viridis')
        plt.xlabel(numerical_features.columns[0])
        plt.ylabel(numerical_features.columns[1])
        plt.title('Результаты кластеризации для cluster1')
        plt.colorbar(label='Номер кластера')
        plt.show()
    else:
        print("Недостаточно числовых признаков для визуализации кластеров на плоскости.")
else:
    print("Сначала выполните этап 5 (Преобразование данных).")