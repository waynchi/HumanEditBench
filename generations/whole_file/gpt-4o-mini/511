import requests # para la solicitud al API
import xml.etree.ElementTree # para procesar la respuesta xml de la API
import datetime # para las fechas en el eje x
import pickle # para almacenar variables en un archivo
import json
import aiofiles # para manejar archivos de forma asíncrona

# jódete negro
# Completa para que set_valutes se llene!!! no se está llenando.


# clase moneda
class valute():
    """Moneda y todo lo relacionado con ella, a través del Banco Central de la Federación de Rusia

Se requieren bibliotecas:

requests

xml.etree.ElementTree

datetime

pickle

json

aiofiles"""
    
    def __init__(self, name):
        self.name = name
        
    async def correct_name(self):
        """Проверка имени валюты на наличие в множестве валют. Множество обновляется не чаще раза в день"""
        async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", "r", encoding="utf-8") as info_opened_file: # открываем файл инфы, encoding чтобы не было
            info = json.loads(await info_opened_file.read())

        if datetime.datetime.now() - datetime.timedelta(days=1) > datetime.datetime.strptime(info["last_day_check"]["valute"], "%Y-%m-%d %H:%M:%S.%f"): # проверяем условие что дата перезаписи списка валют это хотя бы 1 день назад
            # если отличается более чем на 1 день, то переписываем список (множество) валют:
            set_valutes = set() # создаём пустое множество, в него будем заливать валюты
            s = "http://www.cbr.ru/scripts/XML_daily.asp"
            r = requests.get(s)
            root = xml.etree.ElementTree.fromstring(r.content) # запрос всё равно выдаёт данные сайта как строку, так что без fromstring никак
            for Valute in root.findall("Valute"):
                CharCode = Valute.find("CharCode")
                set_valutes.add(CharCode.text) # заливаем валюты в наше множество

            async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin", "wb") as set_valutes_file_opened: # открываем файл для бинарной записи множества тикеров в него
                pickle.dump(set_valutes, set_valutes_file_opened) # закидываем созданное множество в файл. Если что, каждый раз будет перезаписываться (проверено)

            # поменяем время последнего обновления
            info["last_day_check"]["valute"] = str(datetime.datetime.now())
            async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", "w", encoding="utf-8") as info_opened_file:
                await info_opened_file.write(json.dumps(info, indent=3, ensure_ascii=False)) # запишем новый файл

        # теперь просто проверим есть ли валюта в списке валют
        async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin", "rb") as set_valutes_file_opened: # открываем файл с множеством тикеров чтобы его оттуда получить
            set_valutes = pickle.load(set_valutes_file_opened) # из открытого файла выгружаем значение множества валют в переменную. Если вдруг запишется несколько множеств (такого быть не должно), то откроется только первое из них
            
        if self.name in set_valutes: # просто проверяем есть ли валюта в множестве тикеров
            return True
        else:
            return False
            
    def CurrentExchangeRate(self):
        '''Тип валюты текущая в рублей'''
        r = requests.get("http://www.cbr.ru/scripts/XML_daily.asp") # Api Центрального банка России
        root = xml.etree.ElementTree.fromstring(r.content)
        for Valute in root.findall("Valute"): # ищем контейнеры валют
            for CharCode in Valute.findall("CharCode"): # ищем контейнеры кодов символов
                if CharCode.text == self.name: # нашли контейнер с нужной валютой
                    return (Valute.find("VunitRate").text)