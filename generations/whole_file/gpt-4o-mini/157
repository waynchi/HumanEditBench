import numpy as np

def conjugate_gradient(A, b, x0=None, tol=1e-10, max_iter=None):
    n = len(b)
    if x0 is None:
        x0 = np.zeros(n)

    r = b - A.dot(x0)
    p = r.copy()
    rsold = np.dot(r, r)

    if max_iter is None:
        max_iter = n

    for i in range(max_iter):
        Ap = A.dot(p)
        alpha = rsold / np.dot(p, Ap)
        x0 += alpha * p
        r -= alpha * Ap
        rsnew = np.dot(r, r)

        if np.sqrt(rsnew) < tol:
            break

        p = r + (rsnew / rsold) * p
        rsold = rsnew

    return x0