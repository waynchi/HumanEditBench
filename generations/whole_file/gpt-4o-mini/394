from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

def cluster_data(features_transformed, cluster_columns_map, n_clusters=2, clustering_method='kmeans'):
    """Wykonuje klasteryzację danych dla wskazanych zestawów kolumn.

Args:
    features_transformed (pandas.DataFrame): Przekształcony DataFrame z parametrami.
    cluster_columns_map (dict): Słownik z zestawami kolumn i odpowiadającymi im nazwami nowych kolumn klastra.
    n_clusters (int): Liczba klastrów.
    clustering_method (str): Metoda klasteryzacji ('kmeans').

Returns:
    pandas.DataFrame: DataFrame z dodanymi kolumnami etykiet klastrów."""
    if features_transformed is None:
        print("Сначала выполните преобразование данных (этап 5).")
        return None

    for cluster_feature_name, columns in cluster_columns_map.items():
        if not all(col in features_transformed.columns for col in columns):
            print(f"Jedna lub więcej kolumn z {columns} nie istnieje w danych.")
            continue

        features_for_clustering = features_transformed[list(columns)].copy()

        if clustering_method == 'kmeans':
            model = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
            cluster_labels = model.fit_predict(features_for_clustering)
            
            # Ocena jakości klasteryzacji (na przykład za pomocą współczynnika sylwetki)
            if len(np.unique(cluster_labels)) > 1: # Sprawdzenie przypadku, gdy wszystkie punkty są przypisane do jednego klastra
                silhouette_avg = silhouette_score(features_for_clustering, cluster_labels)
                print(f"Коэффициент силуэта dla {n_clusters} кластеров w {cluster_feature_name}: {silhouette_avg:.4f}")
            else:
                print(f"Невозможно рассчитать коэффициент силуэта для {n_clusters} кластера w {cluster_feature_name} (все точки в одном кластере).")

        else:
            print("Неподдерживаемый метод кластеризации.")
            return None

        features_transformed[cluster_feature_name] = cluster_labels
        print(f"Кластеризация выполнена. Метки кластеров добавлены в столбец '{cluster_feature_name}'.")

    return features_transformed

# Wykonywanie klasteryzacji (po etapie 5 i przed etapem 6)
if 'features_transformed' in locals() and features_transformed is not None:
    cluster_columns_map = {
        'cluster1': ['kolumna1', 'kolumna2'],
        'cluster2': ['kolumna3']
    }  # Nazwy kolumn dla etykiet klastrów
    n_clusters = 3  # Liczba klastrów (dobierz optymalną wartość)
    features_transformed = cluster_data(features_transformed, cluster_columns_map, n_clusters)
    
    # Wizualizacja klastrów (przykład dla przypadku, gdy są 2 cechy numeryczne)
    numerical_features = features_transformed.select_dtypes(include=np.number)
    if numerical_features.shape[1] >= 2:
        plt.figure(figsize=(8, 6))
        plt.scatter(numerical_features.iloc[:, 0], numerical_features.iloc[:, 1], c=features_transformed['cluster1'], cmap='viridis')
        plt.xlabel(numerical_features.columns[0])
        plt.ylabel(numerical_features.columns[1])
        plt.title('Результаты кластеризации dla cluster1')
        plt.colorbar(label='Номер кластера')
        plt.show()
    else:
        print("Недостаточно числовых признаков для визуализации кластеров на плоскости.")
else:
    print("Сначала выполните этап 5 (Преобразование данных).")