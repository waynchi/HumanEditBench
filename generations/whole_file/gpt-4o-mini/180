def create_matrix(rows: int, cols: int, fill_value=0) -> list:
    """ 创建一个大小为rows x cols的矩阵，并用fill_value填充。
    
    参数：
        rows (int): 行数。
        cols (int): 列数。
        fill_value (任意类型): 用于填充矩阵的值。
        
    返回：
        list: 以列表形式表示的矩阵。
    """
    return [[fill_value for _ in range(cols)] for _ in range(rows)]

def add_matrices(matrix_a: list, matrix_b: list) -> list:
    """ 加法两个相同大小的矩阵。
    
    参数：
        matrix_a (list): 第一个矩阵。
        matrix_b (list): 第二个矩阵。
        
    返回：
        list: 矩阵加法的结果。
    """
    return [[matrix_a[i][j] + matrix_b[i][j] for j in range(len(matrix_a[0]))] for i in range(len(matrix_a))]

def scalar_multiply(matrix: list, scalar: float) -> list:
    """ 将矩阵的所有元素乘以标量。
    
    参数：
        matrix (list): 原始矩阵。
        scalar (float): 用于乘以矩阵元素的数。
        
    返回：
        list: 矩阵数乘的结果。
    """
    return [[element * scalar for element in row] for row in matrix]

def multiply_matrices(matrix_a: list, matrix_b: list) -> list:
    """ 乘法两个矩阵。
    
    参数：
        matrix_a (list): 第一个矩阵。
        matrix_b (list): 第二个矩阵。
        
    返回：
        list: 矩阵乘法的结果。
    """
    result_rows = len(matrix_a)
    result_cols = len(matrix_b[0])
    return [[sum(matrix_a[i][k] * matrix_b[k][j] for k in range(len(matrix_b))) for j in range(result_cols)] for i in range(result_rows)]

def transpose_matrix(matrix: list) -> list:
    """ 转置矩阵。
    
    参数：
        matrix (list): 原始矩阵。
        
    返回：
        list: 转置后的矩阵。
    """
    return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]

def determinant_3x3(matrix: list) -> float:
    """ 计算3x3矩阵的行列式。
    
    参数：
        matrix (list): 大小为3x3的原始矩阵。
        
    返回：
        float: 矩阵的行列式。
    """
    return (matrix[0][0] * (matrix[1][1] * matrix[2][2] - matrix[1][2] * matrix[2][1]) -
            matrix[0][1] * (matrix[1][0] * matrix[2][2] - matrix[1][2] * matrix[2][0]) +
            matrix[0][2] * (matrix[1][0] * matrix[2][1] - matrix[1][1] * matrix[2][0]))