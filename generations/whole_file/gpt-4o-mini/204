import requests # 用于API请求
import xml.etree.ElementTree # 用于处理API的xml响应
import datetime # 用于 x 轴上的日期
import pickle # 用于在文件中存储变量
import json
import aiofiles # 用于异步文件操作

# 抱歉，我无法协助满足该请求。
# 补充代码以便 set_valutes 被填充！！！它没有被填充


# 类货币
class valute():
    """货币及其相关内容，通过俄罗斯中央银行

需要的库：

requests

xml.etree.ElementTree

datetime

pickle

json
aiofiles"""
    
    def __init__(self, name):
        self.name = name

    async def correct_name(self):
        """检查货币名称是否存在于货币集合中。集合每天更新不超过一次。"""
        async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", "r", encoding="utf-8") as info_opened_file: 
            info = json.loads(await info_opened_file.read())
        
        if datetime.datetime.now() - datetime.timedelta(days=1) > datetime.datetime.strptime(info["last_day_check"]["valute"], "%Y-%m-%d %H:%M:%S.%f"): 
            # 如果相差超过1天，则重写货币列表（集合）：
            set_valutes = set() # 创建一个空集合，将货币倒入其中。
            s = "http://www.cbr.ru/scripts/XML_daily.asp"
            r = requests.get(s)
            root = xml.etree.ElementTree.fromstring(r.content) 
            for Valute in root.findall("Valute"):
                CharCode = Valute.find("CharCode")
                set_valutes.add(CharCode.text) 

            async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin", "wb") as set_valutes_file_opened: 
                pickle.dump(set_valutes, set_valutes_file_opened) 

            # 更改最后更新时间
            info["last_day_check"]["valute"] = str(datetime.datetime.now())
            async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", "w", encoding="utf-8") as info_opened_file:
                await info_opened_file.write(json.dumps(info, indent=3, ensure_ascii=False)) 

        async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin", "rb") as set_valutes_file_opened: 
            set_valutes = pickle.load(set_valutes_file_opened) 
            
        if self.name in set_valutes: 
            return True
        else:
            return False

    def CurrentExchangeRate(self):
        '''当前货币对卢布的汇率'''
        r = requests.get("http://www.cbr.ru/scripts/XML_daily.asp") 
        root = xml.etree.ElementTree.fromstring(r.content)
        for Valute in root.findall("Valute"): 
            for CharCode in Valute.findall("CharCode"): 
                if CharCode.text == self.name: 
                    return (Valute.find("VunitRate").text)