plik = open("dane_obrazki.txt")
maxbitybledne = 0
bityBledne = list()

def czyPoprawny(obrazek):
    for wiersz in obrazek[:-1]:
        if wiersz[:-1].count('1') % 2 != int(wiersz[-1]):
            return False
    for i in range(20):
        kolumna = ""
        for j in range(21):
            kolumna += obrazek[j][i]
        if kolumna[:-1].count('1') % 2 != int(kolumna[-1]):
            return False
    return True

def czyNaprawialny(obrazek):
    bityKolBleden = 0
    bityWierBledne = 0
    for wiersz in obrazek[:-1]:
        if wiersz[:-1].count('1') % 2 != int(wiersz[-1]):
            bityWierBledne += 1
    for i in range(20):
        kolumna = ""
        for j in range(21):
            kolumna += obrazek[j][i]
        if kolumna[:-1].count('1') % 2 != int(kolumna[-1]):
            bityKolBleden += 1
    global maxbitybledne
    if maxbitybledne < (bityKolBleden + bityWierBledne):
        maxbitybledne = bityKolBleden + bityWierBledne
    bityBledne.append(bityKolBleden + bityWierBledne)

    if bityWierBledne > 1:
        return False
    if bityKolBleden > 1:
        return False

    return True

def napraw(obrazek):
    """Wejście stanowi plik tekstowy zawierający dane czarnobiałego obrazka zakodowane jaki piksele.
    0 - piksel biały 1 - piksel czarny. 
    Każdy wiersz oraz kolumna zwiera na swoim końcu bit parzystości . 
    Bit parzystości jest równy 0, jeśli ilość jedynek w wierszy (lub w kolumnie dla kolumn) jest parzysta a 
    1 jeśli jest nieparzysta.
    Napisz funkcje który znajdzie uszkodzone obrazki oraz je naprawi . tzn Jest to obrazek naprawialny ( 
    posiada co najwyżej jeden bit parzystości wiersza i co najwyżej jeden bit parzystości kolumny 
    niepoprawny ) a następnie naprawi te obrazy 
    Wynik ma zawierać obrazek błędny(naprawialny) oraz obrazek poprawiony"""

    bityWierBledne = []
    bityKolBleden = []
    
    for wiersz in obrazek[:-1]:
        if wiersz[:-1].count('1') % 2 != int(wiersz[-1]):
            bityWierBledne.append(obrazek.index(wiersz))

    for i in range(20):
        kolumna = ""
        for j in range(21):
            kolumna += obrazek[j][i]
        if kolumna[:-1].count('1') % 2 != int(kolumna[-1]):
            bityKolBleden.append(i)

    for w in bityWierBledne:
        obrazek[w] = obrazek[w][:-1] + str(1 - int(obrazek[w][-1]))  # Toggle parity bit for the wrong row

    for k in bityKolBleden:
        for idx in range(21):
            obrazek[idx] = obrazek[idx][:k] + str(1 - int(obrazek[idx][k])) + obrazek[idx][k + 1:]  # Toggle parity bit for the wrong column

    return obrazek  # Return the repaired image

poprawne = 0
naprawialne = 0
obrazek = list()
for linia in plik:
    wiersz = linia.strip()
    obrazek.append(wiersz)
    if len(obrazek) == 21:
        if czyPoprawny(obrazek):
            poprawne += 1
        elif czyNaprawialny(obrazek):
            naprawialne += 1
            naprawiony = napraw(obrazek)

    if len(obrazek) == 22:
        obrazek = list()

print(poprawne, naprawialne, 200 - poprawne - naprawialne)
print(maxbitybledne, max(bityBledne))