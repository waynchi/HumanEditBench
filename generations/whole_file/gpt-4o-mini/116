import requests # for API request
import xml.etree.ElementTree # for processing the API's XML response
import matplotlib.pyplot as plt # for plotting graphs
import pandas as pd # To create a dataframe and divide all candles into two types: close and open
import datetime # for dates on the x-axis
import pickle # for storing variables in a file
import json # for working with the database
import aiofiles # for async file handling
import asyncio # for running async functions

class ticker():
    """Stock ticker and everything related to it, through MoexApi

Required libraries:

requests

xml.etree.ElementTree

matplotlib.pyplot as plt

pandas as pd

datetime

pickle

json"""
    
    def __init__(self, name: str):
        """self.name - ticker name
self.tech_dict - technical analysis dictionary"""
        self.name = name 
        self.tech_dict = {
            "value": {"use": False, "has_periods": False, "need_graph_space": True}, 
            "sma": {"use": False, "has_periods": True, "periods": [], "need_graph_space": False},
            "ema": {"use": False, "has_periods": True, "periods": [], "need_graph_space": False}
        }
        
    async def correct_name(self):
        """Checking the ticker name for presence in the set of tickers. The set is updated no more than once a day."""
        async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", "r", encoding="utf-8") as info_opened_file: # open the info file asynchronously
            info = json.loads(await info_opened_file.read())
        
        if datetime.datetime.now() - datetime.timedelta(days=1) > datetime.datetime.strptime(info["last_day_check"]["ticker"], "%Y-%m-%d %H:%M:%S.%f"):
            set_tickers = set()
            s = "https://iss.moex.com/iss/engines/stock/markets/shares/boards/TQBR/securities.xml?iss.meta=off"
            r = requests.get(s)
            root = xml.etree.ElementTree.fromstring(r.content)
            for data in root.findall("data"):
                if data.get("id") == "securities":
                    rows = data.find("rows")
                    for row in rows.findall("row"):
                        set_tickers.add(row.get("SECID"))
            
            async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\set_tickers.bin", "wb") as set_tickers_file_opened:
                pickle.dump(set_tickers, set_tickers_file_opened)
            
            info["last_day_check"]["ticker"] = str(datetime.datetime.now())
            async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", "w", encoding="utf-8") as info_opened_file:
                await info_opened_file.write(json.dumps(info, indent=3, ensure_ascii=False))

        async with aiofiles.open(r"D:\MoexAPI_bot_aiogram3\data_files\set_tickers.bin", "rb") as set_tickers_file_opened:
            set_tickers = pickle.load(set_tickers_file_opened)
        
        return self.name in set_tickers

    def CurrentPrice(self):
        """Current price for this ticker"""
        s = "https://iss.moex.com/iss/engines/stock/markets/shares/boards/TQBR/securities/" + self.name + ".xml?iss.meta=off"
        r = requests.get(s)
        root = xml.etree.ElementTree.fromstring(r.content)
        for data in root.findall("data"):
            if data.get("id") == "marketdata":
                rows = data.find("rows")
                row = rows.find("row")
                return(row.get("LAST"))

    def candles(self, candles_name: str, timeframe: str, start: str, end: str):
        s = "https://iss.moex.com/iss/engines/stock/markets/shares/boards/TQBR/securities/" + self.name + f"/candles.xml?iss.meta=off&interval={timeframe}&till={end}&from={start}"
        r = requests.get(s)
        root = xml.etree.ElementTree.fromstring(r.content)
        candles = root.find("data")
        rows = candles.find("rows")
        listcandles = []
        if candles_name == "begin" or candles_name == "end":
            for row in rows.findall("row"):
                datetime_str = row.get(candles_name)
                datetime_datetime = datetime.datetime(int(datetime_str[0:4]), int(datetime_str[5:7]), int(datetime_str[8:10]), int(datetime_str[11:13]), int(datetime_str[14:16]), int(datetime_str[17:]))
                listcandles.append(datetime_datetime)
        else:
            for row in rows.findall("row"):
                listcandles.append(float(row.get(candles_name)))
        return(listcandles)

    def setattr_candles_dataframe(self, timeframe=str("24"), start=str(""), end=str("")):
        candles_dataframe = pd.DataFrame({
            "open": self.candles("open", timeframe, start, end),
            "close": self.candles("close", timeframe, start, end),
            "high": self.candles("high", timeframe, start, end),
            "low": self.candles("low", timeframe, start, end),
            "value": self.candles("value", timeframe, start, end),
            "begin": self.candles("begin", timeframe, start, end)
        })
        setattr(self, "candles_dataframe", candles_dataframe)

    def graphic(self, timeframe=str("24"), start=str(""), end=str("")):
        self.setattr_candles_dataframe(timeframe, start, end)
        up = self.candles_dataframe[self.candles_dataframe.close >= self.candles_dataframe.open]
        down = self.candles_dataframe[self.candles_dataframe.close < self.candles_dataframe.open]
        setattr(self, "up", up)
        setattr(self, "down", down)
        
        if timeframe == "1":
            width_big = 1 / 24 / 60
        elif timeframe == "10":
            width_big = 1 / 24 / 6
        elif timeframe == "60":
            width_big = 1 / 24
        elif timeframe == "24":
            width_big = 1
        elif timeframe == "7":
            width_big = 7
        elif timeframe == "31":
            width_big = 30
        elif timeframe == "4":
            width_big = 90
        else:
            width_big = 0
        
        width_small = width_big / 10
        setattr(self, "width_big", width_big)
        
        number_of_additional_graphics = sum(1 for tech in self.tech_dict if self.tech_dict[tech]["use"] and self.tech_dict[tech]["need_graph_space"])
        
        if number_of_additional_graphics != 0:
            height_rations_list = [10 - number_of_additional_graphics] + [1] * number_of_additional_graphics
            fig, axs = plt.subplots(nrows=1 + number_of_additional_graphics, ncols=1, sharex=True, height_ratios=height_rations_list)
            plt.suptitle(self.name, fontsize=15)
            axs[0].grid(True)
            axs[0].bar(x=up.begin, height=up.close - up.open, width=width_big, bottom=up.open, color="green")
            axs[0].bar(x=up.begin, height=up.high - up.close, width=width_small, bottom=up.close, color="green")
            axs[0].bar(x=up.begin, height=up.open - up.low, width=width_small, bottom=up.low, color="green")
            axs[0].bar(x=down.begin, height=down.open - down.close, width=width_big, bottom=down.close, color="red")
            axs[0].bar(x=down.begin, height=down.high - down.open, width=width_small, bottom=down.open, color="red")
            axs[0].bar(x=down.begin, height=down.close - down.low, width=width_small, bottom=down.low, color="red")

            for tech in self.tech_dict:
                if self.tech_dict[tech]["use"]:
                    if not self.tech_dict[tech]["need_graph_space"]:
                        tech_func = getattr(self, tech)
                        tech_func(axs[0])
                    else:
                        for i in range(number_of_additional_graphics):
                            tech_func = getattr(self, tech)
                            axs[i + 1].grid(True)
                            tech_func(axs[i + 1])
        else: 
            fig = plt.figure()
            plt.title(self.name, fontsize=15) 
            ax = fig.add_subplot() 
            ax.grid(True)
            ax.bar(x=up.begin, height=up.close - up.open, width=width_big, bottom=up.open, color="green") 
            ax.bar(x=up.begin, height=up.high - up.close, width=width_small, bottom=up.close, color="green")
            ax.bar(x=up.begin, height=up.open - up.low, width=width_small, bottom=up.low, color="green")
            ax.bar(x=down.begin, height=down.open - down.close, width=width_big, bottom=down.close, color="red")
            ax.bar(x=down.begin, height=down.high - down.open, width=width_small, bottom=down.open, color="red")
            ax.bar(x=down.begin, height=down.close - down.low, width=width_small, bottom=down.low, color="red")

            for tech in self.tech_dict:
                if self.tech_dict[tech]["use"]:
                    tech_func = getattr(self, tech)
                    tech_func(ax)

        fig.savefig(r"D:\Python files\!MoexApiBot\graphic.png")
        opened_graphic = open(r"D:\Python files\!MoexApiBot\graphic.png", "rb")
        return opened_graphic

    def sma(self, ax):
        for period in self.tech_dict["sma"]["periods"]:
            if period <= len(self.candles_dataframe.begin):
                sma_list = []
                sma_list.append(sum(self.candles_dataframe.close[0:period]) / period)
                for i in range(period, len(self.candles_dataframe.begin)):
                    sma_list.append(sma_list[i - period] + (self.candles_dataframe.close[i] - self.candles_dataframe.close[i - period]) / period)
                ax.plot(self.candles_dataframe.begin[period - 1:], sma_list)

    def ema(self, ax):
        for period in self.tech_dict["ema"]["periods"]:
            if period <= len(self.candles_dataframe.begin):
                ema_list = []
                ema_list.append(sum(self.candles_dataframe.close[0:period]) / period) 
                for i in range(period, len(self.candles_dataframe.begin)):
                    ema_list.append(((period - 1) * ema_list[i - period] + 2 * self.candles_dataframe.close[i]) / (period + 1))
                ax.plot(self.candles_dataframe.begin[period - 1:], ema_list)

    def value(self, ax):
        ax.bar(x=self.up.begin, height=self.up.value, width=self.width_big, color="green")
        ax.bar(x=self.down.begin, height=self.down.value, width=self.width_big, color="red")
        ax.set_title("Value", fontsize=7)

"""
Тесты
"""

"""
beb = ticker("SBER")
beb.setattr_candles_dataframe("24", "2024-01-01", "2024-01-07")
print(beb.candles_dataframe)
"""

"""
beb.tech_dict["value"]["use"] = True
beb.graphic("24", "2024-01-01", "2024-10-01")
plt.show
"""

"""
beb = ticker("SBER")
beb.tech_dict["sma"]["use"] = True
beb.tech_dict["sma"]["periods"] = [20, 10]
beb.tech_dict["ema"]["use"] = True
beb.tech_dict["ema"]["periods"] = [150, 250]
beb.tech_dict["value"]["use"] = True
beb.graphic("24", "2024-01-01", "2024-05-01")
"""