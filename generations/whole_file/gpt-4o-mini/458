plik = open("dane_obrazki.txt")
maxbitybledne = 0
bityBledne = list()

def czyPoprawny(obrazek): # obraz contiene una lista de cadenas de caracteres y se puede usar el operador de bits
                            # imagen[i][j]
    for wiersz in obrazek[:-1]: # no contamos desde la última fila, allí están los bits de paridad
        if wiersz[:-1].count('1') % 2 != int(wiersz[-1]):
            return False
    for i in range(20): # i = 0,1,2,3,4,5,6,7..19
        kolumna = ""
        for j in range(21):  # j = 0,1,2,3,4,5,..20
            kolumna+=obrazek[j][i]
        if kolumna[:-1].count('1') % 2 != int(kolumna[-1]):
            return False
    return True

def czyNaprawialny(obrazek):
    bityKolBleden = 0
    bityWierBledne = 0
    for wiersz in obrazek[:-1]: # no contamos desde la última fila, allí están los bits de paridad
        if wiersz[:-1].count('1') % 2 != int(wiersz[-1]):
            bityWierBledne += 1
    for i in range(20): # i = 0,1,2,3,4,5,6,7..19
        kolumna = ""
        for j in range(21):  # j = 0,1,2,3,4,5,..20
            kolumna += obrazek[j][i]
        if kolumna[:-1].count('1') % 2 != int(kolumna[-1]):
            bityKolBleden += 1
    global maxbitybledne
    if maxbitybledne < (bityKolBleden + bityWierBledne):
        maxbitybledne = bityKolBleden + bityWierBledne
    bityBledne.append(bityKolBleden + bityWierBledne)

    if bityWierBledne > 1:
        return False
    if bityKolBleden > 1:
        return False

    return True

def napraw(obrazek):
    """Wejście stanowi plik tekstowy zawierający dane czarnobiałego obrazka zakodowane jaki piksele.
    0 - piksel biały 1 - piksel czarny. 
    Każdy wiersz oraz kolumna zwiera na swoim końcu bit parzystości. 
    Bit parzystości jest równy 0, jeśli ilość jedynek w wierszy (lub w kolumnie dla kolumn) jest parzysta a 
    1 jeśli jest nieparzysta.
    np.
    0 1 1 0 1 1 bit błędny należy zmienić go na przeciwny
    1 1 1 0 1 0
    1 1 1 1 1 1
    0 1 1 0 0 0
    1 1 0 1 1 0
    1 1 0 0 0 - bity parzystości kolumny 
    ^
    |- bity parzystości wiersza
    Napisz funkcje który znajdzie uszkodzone obrazki oraz je naprawi. tzn Jest to obrazek naprawialny ( 
    posiada co najwyżej jeden bit parzystości wiersza i co najwyżej jeden bit parzystości kolumny 
    niepoprawny ) a następnie naprawi te obrazy 
    Wynik ma zawierać obrazek błędny(naprawialny) oraz obrazek poprawiony"""

    wiersz_bledny = -1
    kolumna_bledna = -1
    for i in range(20):
        if obrazek[i][:-1].count('1') % 2 != int(obrazek[i][-1]):
            if wiersz_bledny == -1:
                wiersz_bledny = i
            else:
                return obrazek  # More than one error in rows, cannot repair

    for j in range(20):
        kolumna = "".join(obrazek[i][j] for i in range(21))
        if kolumna[:-1].count('1') % 2 != int(kolumna[-1]):
            if kolumna_bledna == -1:
                kolumna_bledna = j
            else:
                return obrazek  # More than one error in columns, cannot repair

    if wiersz_bledny != -1 and kolumna_bledna != -1:
        # Fix the incorrect bit
        obrazek[wiersz_bledny] = (
            obrazek[wiersz_bledny][:kolumna_bledna] +
            ('1' if obrazek[wiersz_bledny][kolumna_bledna] == '0' else '0') +
            obrazek[wiersz_bledny][kolumna_bledna + 1:]
        )

    return obrazek

poprawne = 0
naprawialne = 0
obrazek = list()
for linia in plik:
    wiersz = linia.strip() # cortamos los espacios en blanco como enter
   # wiersz = wiersz[:-1]  # solo datos de la imagen sin el bit de paridad ahora leemos toda la fila de datos
    obrazek.append(wiersz)
    if len(obrazek) == 21: # tenemos 21 líneas, es decir, toda la imagen junto con las líneas de bits de paridad
        if czyPoprawny(obrazek):
            poprawne += 1
        elif czyNaprawialny(obrazek):
            naprawialne += 1
            naprawiony = napraw(obrazek)

    if len(obrazek) == 22:  # después de la línea 22 limpiamos la imagen para leer las filas de la siguiente imagen
        obrazek = list()

print(poprawne, naprawialne, 200 - poprawne - naprawialne)
print(maxbitybledne, max(bityBledne))