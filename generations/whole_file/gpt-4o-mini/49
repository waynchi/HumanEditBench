def create_matrix(rows: int, cols: int, fill_value=0) -> list:
    """ 
    Создает матрицу размера rows x cols, заполненную значением fill_value. 
    Параметры: 
    rows (int): количество строк. 
    cols (int): количество столбцов. 
    fill_value (любой тип): значение для заполнения матрицы. 
    Возвращает: 
    list: матрица в виде списка списков. 
    """
    return [[fill_value for _ in range(cols)] for _ in range(rows)]

def add_matrices(matrix_a: list, matrix_b: list) -> list:
    """ 
    Складывает две матрицы одинакового размера. 
    Параметры: 
    matrix_a (list): первая матрица. 
    matrix_b (list): вторая матрица. 
    Возвращает: 
    list: результат сложения матриц. 
    """
    return [[matrix_a[i][j] + matrix_b[i][j] for j in range(len(matrix_a[0]))] for i in range(len(matrix_a))]

def scalar_multiply(matrix: list, scalar: float) -> list:
    """ 
    Умножает все элементы матрицы на скаляр. 
    Параметры: 
    matrix (list): исходная матрица. 
    scalar (float): число, на которое умножаются элементы матрицы. 
    Возвращает: 
    list: результат умножения матрицы на скаляр. 
    """
    return [[element * scalar for element in row] for row in matrix]

def multiply_matrices(matrix_a: list, matrix_b: list) -> list:
    """ 
    Перемножает две матрицы. 
    Параметры: 
    matrix_a (list): первая матрица. 
    matrix_b (list): вторая матрица. 
    Возвращает: 
    list: результат умножения матриц. 
    """
    result = create_matrix(len(matrix_a), len(matrix_b[0]), 0)
    for i in range(len(matrix_a)):
        for j in range(len(matrix_b[0])):
            result[i][j] = sum(matrix_a[i][k] * matrix_b[k][j] for k in range(len(matrix_b)))
    return result

def transpose_matrix(matrix: list) -> list:
    """ 
    Транспонирует матрицу. 
    Параметры: 
    matrix (list): исходная матрица. 
    Возвращает: 
    list: транспонированная матрица. 
    """
    return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]

def determinant_3x3(matrix: list) -> float:
    """ 
    Вычисляет определитель матрицы 3x3. 
    Параметры: 
    matrix (list): исходная матрица размером 3x3. 
    Возвращает: 
    float: определитель матрицы. 
    """
    return (matrix[0][0] * (matrix[1][1] * matrix[2][2] - matrix[1][2] * matrix[2][1])
            - matrix[0][1] * (matrix[1][0] * matrix[2][2] - matrix[1][2] * matrix[2][0])
            + matrix[0][2] * (matrix[1][0] * matrix[2][1] - matrix[1][1] * matrix[2][0]))