import numpy as np

def conjugate_gradient(A, b, x0=None, tol=1e-10, max_iter=1000):
    if x0 is None:
        x0 = np.zeros_like(b)
    
    x = x0
    r = b - A @ x
    p = r.copy()
    rsold = r @ r

    for i in range(max_iter):
        Ap = A @ p
        alpha = rsold / (p @ Ap)
        x += alpha * p
        r -= alpha * Ap
        rsnew = r @ r
        
        if np.sqrt(rsnew) < tol:
            break
        
        p = r + (rsnew / rsold) * p
        rsold = rsnew
    
    return x

# Example usage
A = np.array([[4, 1], [1, 3]])
b = np.array([1, 2])
x0 = np.array([2, 1])

solution = conjugate_gradient(A, b, x0)
print("Solution:", solution)