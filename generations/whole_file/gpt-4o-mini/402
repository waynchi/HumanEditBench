import torch
import numpy as np
import time
from torch.utils.data import DataLoader
from transformers import TrainerCallback
from transformers.data.data_collator import default_data_collator


def check_answer_factual(output_str, expected_answer):
    """Sprawdza, czy wynik modelu odpowiada oczekiwanej odpowiedzi.

Argumenty:
    output_str: Ciąg znaków będący wynikiem modelu
    expected_answer: Oczekiwany ciąg znaków odpowiedzi

Zwraca:
    bool: True, jeśli odpowiedź jest poprawna, False w przeciwnym razie"""
    return expected_answer.lower() in output_str.lower()


def check_answer_format(output_str, hard=False):
    """Sprawdza, czy wynik modelu jest zgodny z oczekiwanym formatem.

Argumenty:
    output_str: Wyjście w postaci ciągu znaków z modelu
    hard: Jeśli True, zastosuj bardziej rygorystyczne sprawdzanie formatu

Zwraca:
    bool: True, jeśli format jest poprawny, False w przeciwnym razie"""
    if hard:
        return bool(output_str.strip())  
    else:
        return len(output_str.strip()) > 0  


class FactualAccuracyCallbackBETTER(TrainerCallback):
    """Callback do oceny i rejestrowania dokładności faktograficznej modelu podczas treningu."""

    def __init__(
        self, model, tokenizer, dataset, batch_size, verbose=False, output_format=False
    ):
        super().__init__()
        self.model = model
        self.tokenizer = tokenizer
        self.n_samp = len(dataset)
        self.verbose = verbose
        self.output_format = output_format
        tokenized_questions = dataset.map(
            lambda examples: tokenizer(
                examples["question"],
                padding="max_length",
                truncation=True,
                max_length=512,
            ),
            batched=True,
        )
        batched_tokenized_questions = DataLoader(
            tokenized_questions,
            batch_size=3,
            shuffle=False,
            collate_fn=default_data_collator,
        )
        self.tokenized_eval_dataset = batched_tokenized_questions
        self.batched_expected_answers = DataLoader(
            dataset["answer"], batch_size=3, shuffle=False
        )

    def on_log(self, args, state, control, model=None, **kwargs):
        """Wywoływane po zalogowaniu ostatnich logów."""
        if model is not None:
            self.model = model
        elif self.model is None:
            return

        if not state.is_local_process_zero:
            return

        start_time = time.time()
        try:
            with torch.no_grad():
                results = factual_score_dataloader(
                    model=model,
                    tokenizer=self.tokenizer,
                    tokenized_eval_dataset=self.tokenized_eval_dataset,
                    output_format=self.output_format,
                )
                if self.output_format:
                    fact_results, format_hard_results, format_soft_results = results
                    format_hard_avg = np.mean(format_hard_results)
                    format_soft_avg = np.mean(format_soft_results)
                    factual_accuracy_avg = np.mean(fact_results)
                else:
                    factual_accuracy_avg = np.mean(results)

                if len(state.log_history) > 0:
                    state.log_history[-1]["factual_accuracy"] = factual_accuracy_avg
                    if self.output_format:
                        state.log_history[-1]["format_hard"] = format_hard_avg
                        state.log_history[-1]["format_soft"] = format_soft_avg
        except Exception as e:
            print(f"Error during factual accuracy evaluation: {e}")
        finally:
            time_taken = time.time() - start_time
            if self.verbose:
                print(
                    f"[TIME] {time_taken:.2f} seconds: Model evaluated on FactualAccuracy."
                )


def factual_score_dataloader(
    model,
    tokenizer,
    dataset,
    expected_answers,
    max_new_tokens=32,
    output_format=False,
    random_state=42,
    device=None,
    verbose=False,
):
    if device is None:
        device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model = model.to(device)
    fact_results = []
    format_hard_results, format_soft_results = ([], []) if output_format else (None, None)
    
    # Batch processing for better computation
    for batch, expected_answers in zip(dataset, expected_answers):
        batch = {k: v.to(device) for k, v in batch.items() if k in ["input_ids", "attention_mask"]}
        
    all_outputs = []
    
    with torch.no_grad():
        for batch in DataLoader(dataset, batch_size=3):
            outputs = model.generate(
                **batch,
                max_new_tokens=max_new_tokens,
                pad_token_id=tokenizer.pad_token_id
            )
            all_outputs.append(outputs)

    # Concatenate all outputs after processing to minimize model calls
    all_outputs = torch.cat(all_outputs) if all_outputs else torch.tensor([])

    detokenized_inputs = tokenizer.batch_decode(dataset["input_ids"], skip_special_tokens=True)
    output_strings = tokenizer.batch_decode(all_outputs[:, dataset["input_ids"].shape[-1]:], skip_special_tokens=True)
    
    for output_str, expected_answer, question in zip(output_strings, expected_answers, detokenized_inputs):
        if verbose:
            print(repr(question), repr(output_str), repr(expected_answer))
        fact_results.append(check_answer_factual(output_str, expected_answer))
        if output_format:
            format_hard_results.append(check_answer_format(output_str, hard=True))
            format_soft_results.append(check_answer_format(output_str, hard=False))

    return (fact_results, format_hard_results, format_soft_results) if output_format else fact_results