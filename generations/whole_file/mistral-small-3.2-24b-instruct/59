import torch.nn as nn

class SimpleConvNet1(nn.Module):
    def __init__(self, input_channels=3, output_classes=3):
        super().__init__()

        self.conv1 = nn.Sequential(
            nn.Conv2d(input_channels, 32, 3),
            nn.ReLU(),
            nn.MaxPool2d(2)
        )

        self.conv2 = nn.Sequential(
            nn.Conv2d(32, 64, 3),
            nn.ReLU(),
            nn.MaxPool2d(2)
        )

        # Calculate the flattened size dynamically
        self.flatten = nn.Flatten()
        self.fc1 = nn.Sequential(
            nn.Linear(64 * 5 * 5, 512),  # Assuming input size 32x32 after two max pooling layers
            nn.ReLU(),
            nn.Linear(512, output_classes)
        )

    def forward(self, x):
        x = self.conv1(x)
        x = self.conv2(x)
        x = self.flatten(x)
        x = self.fc1(x)
        return x