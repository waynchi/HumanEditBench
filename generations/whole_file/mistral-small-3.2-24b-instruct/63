from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import numpy as np

def cluster_data(features_transformed, cluster_config, n_clusters=2, clustering_method='kmeans'):
    """
    Выполняет кластеризацию данных для указанных наборов столбцов.

    Args:
        features_transformed (pandas.DataFrame): Преобразованный DataFrame с параметрами.
        cluster_config (dict): Словарь с конфигурацией кластеризации.
                              Пример: {'Кластер1': ('столбец1', 'столбец2'), 'Кластер2': ('столбец3')}
        n_clusters (int): Количество кластеров.
        clustering_method (str): Метод кластеризации ('kmeans').

    Returns:
        pandas.DataFrame: DataFrame с добавленными столбцами меток кластеров.
    """
    if features_transformed is None:
        print("Сначала выполните преобразование данных (этап 5).")
        return None

    features_for_clustering = features_transformed.copy()

    for cluster_name, columns in cluster_config.items():
        if clustering_method == 'kmeans':
            # Проверяем, что все указанные столбцы существуют в DataFrame
            if all(col in features_for_clustering.columns for col in columns):
                features_for_clustering_subset = features_for_clustering[list(columns)]

                model = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
                cluster_labels = model.fit_predict(features_for_clustering_subset)

                # Оценка качества кластеризации
                if len(np.unique(cluster_labels)) > 1:
                    silhouette_avg = silhouette_score(features_for_clustering_subset, cluster_labels)
                    print(f"Коэффициент силуэта для {cluster_name} ({n_clusters} кластеров): {silhouette_avg:.4f}")
                else:
                    print(f"Невозможно рассчитать коэффициент силуэта для {cluster_name} (все точки в одном кластере).")

                features_for_clustering[cluster_name] = cluster_labels
                print(f"Кластеризация выполнена. Метки кластеров для {cluster_name} добавлены в столбец '{cluster_name}'.")
            else:
                print(f"Один или несколько столбцов для кластера {cluster_name} не найдены в данных.")
                return None
        else:
            print("Неподдерживаемый метод кластеризации.")
            return None

    return features_for_clustering

# Выполнение кластеризации (после этапа 5 и до этапа 6)
if 'features_transformed' in locals() and features_transformed is not None:
    cluster_feature_name = 'cluster'  # Имя столбца для меток кластеров
    n_clusters = 3  # Количество кластеров (подберите оптимальное значение)
    features_transformed = cluster_data(features_transformed, cluster_feature_name, n_clusters)

    # Визуализация кластеров (пример для случая, когда есть 2 числовых признака)
    numerical_features = features_transformed.select_dtypes(include=np.number)
    if numerical_features.shape[1] >= 2:
        plt.figure(figsize=(8, 6))
        plt.scatter(numerical_features.iloc[:, 0], numerical_features.iloc[:, 1], c=features_transformed[cluster_feature_name], cmap='viridis')
        plt.xlabel(numerical_features.columns[0])
        plt.ylabel(numerical_features.columns[1])
        plt.title('Результаты кластеризации')
        plt.colorbar(label='Номер кластера')
        plt.show()
    else:
        print("Недостаточно числовых признаков для визуализации кластеров на плоскости.")
else:
    print("Сначала выполните этап 5 (Преобразование данных).")