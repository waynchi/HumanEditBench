plik = open("dane_obrazki.txt")
maxbitybledne = 0
bityBledne = list()
def czyPoprawny(obrazek): # obrzek zawiera liste łancuchów znaków  i można korzystać z operatora balicowego
                            # obrazek[i][j]
    for wiersz in obrazek[:-1]: # nie liczymy z ostaniego wiersza tam są bity parzystosci
        if wiersz[:-1].count('1') % 2 != int(wiersz[-1]):
            return False
    for i in range(20): # i = 0,1,2,3,4,5,6,7..19
        kolumna = ""
        for j in range(21):  # j = 0,1,2,3,4,5,..20
            kolumna+=obrazek[j][i]
        if kolumna[:-1].count('1')% 2 != int(kolumna[-1]):
            return False
    return True

def czyNaprawialny(obrazek):
    bityKolBleden = 0
    bityWierBledne = 0
    for wiersz in obrazek[:-1]: # nie liczymy z ostaniego wiersza tam są bity parzystosci
        if wiersz[:-1].count('1') % 2 != int(wiersz[-1]):
            bityWierBledne+=1
    for i in range(20): # i = 0,1,2,3,4,5,6,7..19
        kolumna = ""
        for j in range(21):  # j = 0,1,2,3,4,5,..20
            kolumna+=obrazek[j][i]
        if kolumna[:-1].count('1')% 2 != int(kolumna[-1]):
           bityKolBleden+=1
    global maxbitybledne
    if maxbitybledne<(bityKolBleden+bityWierBledne):
        maxbitybledne = bityKolBleden+bityWierBledne
    bityBledne.append(bityKolBleden+bityWierBledne)

    if bityWierBledne >1 :
        return False
    if bityKolBleden > 1:
        return False

    return True

def napraw(obrazek):
    """Naprawia obrazek, który ma co najwyżej jeden błędny bit parzystości wiersza
    i co najwyżej jeden błędny bit parzystości kolumny."""
    wynik = []
    wynik.append(obrazek.copy())  # Dodajemy oryginalny obrazek do wyniku

    # Znajdź wiersz z błędnym bitem parzystości
    wiersz_bledny = None
    for i, wiersz in enumerate(obrazek[:-1]):
        if wiersz[:-1].count('1') % 2 != int(wiersz[-1]):
            wiersz_bledny = i
            break

    # Znajdź kolumnę z błędnym bitem parzystości
    kolumna_bledna = None
    for j in range(20):
        kolumna = "".join([obrazek[i][j] for i in range(21)])
        if kolumna[:-1].count('1') % 2 != int(kolumna[-1]):
            kolumna_bledna = j
            break

    # Napraw obrazek
    naprawiony_obrazek = [list(wiersz) for wiersz in obrazek]

    # Napraw wiersz, jeśli jest błędny
    if wiersz_bledny is not None:
        wiersz = naprawiony_obrazek[wiersz_bledny]
        wiersz[-1] = str(wiersz[:-1].count('1') % 2)
        naprawiony_obrazek[wiersz_bledny] = "".join(wiersz)

    # Napraw kolumnę, jeśli jest błędna
    if kolumna_bledna is not None:
        for i in range(21):
            if i == 20:  # Ostatni wiersz to bity parzystości kolumn
                continue
            kolumna = [naprawiony_obrazek[j][kolumna_bledna] for j in range(21)]
            kolumna[-1] = str(kolumna[:-1].count('1') % 2)
            for j in range(21):
                if j == 20:
                    continue
                naprawiony_obrazek[j] = naprawiony_obrazek[j][:kolumna_bledna] + kolumna[j] + naprawiony_obrazek[j][kolumna_bledna+1:]

    # Napraw bity parzystości kolumn w ostatnim wierszu
    for j in range(20):
        kolumna = "".join([naprawiony_obrazek[i][j] for i in range(21)])
        naprawiony_obrazek[20] = naprawiony_obrazek[20][:j] + str(kolumna[:-1].count('1') % 2) + naprawiony_obrazek[20][j+1:]

    wynik.append(naprawiony_obrazek)
    return wynik

poprawne = 0
naprawialne = 0
obrazek = list()
for linia in plik:
    wiersz = linia.strip() # odcinamy białe znaki np enter
   # wiersz = wiersz[:-1]  # tylko dane obrazka bez bitu parzystosci  teraz czytamy cala wiersz danych
    obrazek.append(wiersz)
    if len(obrazek) == 21: # mamy 21 lini czyli cały obrazek razem z wierszam bitów parzystosci
        if czyPoprawny(obrazek):
            poprawne+=1
        elif czyNaprawialny(obrazek):
            naprawialne+=1
            naprawiony = napraw(obrazek)


    if len(obrazek) == 22:  # po 22 lini czyscimy obrazek by czytać wiersze nastepnego obrazka
        obrazek = list()

print(poprawne,naprawialne,200-poprawne-naprawialne)
print(maxbitybledne,max(bityBledne))