def create_matrix(rows: int, cols: int, fill_value=0) -> list:
    """
    Создает матрицу размера rows x cols, заполненную значением fill_value.

    Параметры:
        rows (int): количество строк.
        cols (int): количество столбцов.
        fill_value (любой тип): значение для заполнения матрицы.

    Возвращает:
        list: матрица в виде списка списков.
    """
    if rows < 0 or cols < 0:
        raise ValueError("Количество строк и столбцов должно быть неотрицательным.")
    return [[fill_value for _ in range(cols)] for _ in range(rows)]


def add_matrices(matrix_a: list, matrix_b: list) -> list:
    """
    Складывает две матрицы одинакового размера.

    Параметры:
        matrix_a (list): первая матрица.
        matrix_b (list): вторая матрица.

    Возвращает:
        list: результат сложения матриц.
    """
    if not matrix_a or not matrix_b:
        raise ValueError("Матрицы не должны быть пустыми.")
    if len(matrix_a) != len(matrix_b):
        raise ValueError("Матрицы должны иметь одинаковое количество строк.")
    result = []
    for row_a, row_b in zip(matrix_a, matrix_b):
        if len(row_a) != len(row_b):
            raise ValueError("Все строки матриц должны иметь одинаковую длину.")
        result.append([a + b for a, b in zip(row_a, row_b)])
    return result


def scalar_multiply(matrix: list, scalar: float) -> list:
    """
    Умножает все элементы матрицы на скаляр.

    Параметры:
        matrix (list): исходная матрица.
        scalar (float): число, на которое умножаются элементы матрицы.

    Возвращает:
        list: результат умножения матрицы на скаляр.
    """
    return [[element * scalar for element in row] for row in matrix]


def multiply_matrices(matrix_a: list, matrix_b: list) -> list:
    """
    Перемножает две матрицы.

    Параметры:
        matrix_a (list): первая матрица.
        matrix_b (list): вторая матрица.

    Возвращает:
        list: результат умножения матриц.
    """
    if not matrix_a or not matrix_b:
        raise ValueError("Матрицы не должны быть пустыми.")
    rows_a = len(matrix_a)
    cols_a = len(matrix_a[0])
    rows_b = len(matrix_b)
    cols_b = len(matrix_b[0])

    if cols_a != rows_b:
        raise ValueError("Кол-во столбцов первой матрицы должно совпадать с кол-вом строк второй.")

    # проверка, что все строки имеют одинаковую длину
    for row in matrix_a:
        if len(row) != cols_a:
            raise ValueError("Все строки первой матрицы должны иметь одинаковую длину.")
    for row in matrix_b:
        if len(row) != cols_b:
            raise ValueError("Все строки второй матрицы должны иметь одинаковую длину.")

    # результат будет размера rows_a x cols_b
    result = [[0 for _ in range(cols_b)] for _ in range(rows_a)]

    for i in range(rows_a):
        for j in range(cols_b):
            sum_product = 0
            for k in range(cols_a):  # или rows_b, они одинаковы
                sum_product += matrix_a[i][k] * matrix_b[k][j]
            result[i][j] = sum_product

    return result


def transpose_matrix(matrix: list) -> list:
    """
    Транспонирует матрицу.

    Параметры:
        matrix (list): исходная матрица.

    Возвращает:
        list: транспонированная матрица.
    """
    if not matrix:
        return []
    # Проверка корректности входа
    row_len = len(matrix[0])
    for row in matrix:
        if len(row) != row_len:
            raise ValueError("Все строки матрицы должны иметь одинаковую длину.")
    # Транспонирование
    transposed = [[matrix[i][j] for i in range(len(matrix))] for j in range(row_len)]
    return transposed


def determinant_3x3(matrix: list) -> float:
    """
    Вычисляет определитель матрицы 3x3.

    Параметры:
        matrix (list): исходная матрица размером 3x3.

    Возвращает:
        float: определитель матрицы.
    """
    if len(matrix) != 3 or any(len(row) != 3 for row in matrix):
        raise ValueError("Определитель может быть вычислен только для матрицы 3x3.")
    a11, a12, a13 = matrix[0]
    a21, a22, a23 = matrix[1]
    a31, a32, a33 = matrix[2]

    det = (
        a11 * (a22 * a33 - a23 * a32)
        - a12 * (a21 * a33 - a23 * a31)
        + a13 * (a21 * a32 - a22 * a31)
    )
    return float(det)