import math

def is_sum_of_four_nonzero_squares(n: int) -> bool:
    """
    Returns True if `n` can be expressed as a sum of four non‑zero square numbers:
        n = a² + b² + c² + d²
    where a, b, c, d are positive integers (i.e., ≥ 1).
    """
    max_root = int(math.isqrt(n))
    # Since each term is at least 1² = 1, the smallest possible sum is 4.
    if n < 4:
        return False

    # Iterate through possible values for a, b, c.
    # d is derived from the remaining value and can be checked directly.
    for a in range(1, max_root + 1):
        a2 = a * a
        if a2 > n - 3:  # need room for three more squares ≥1
            break
        for b in range(1, max_root + 1):
            b2 = b * b
            if a2 + b2 > n - 2:
                break
            for c in range(1, max_root + 1):
                c2 = c * c
                partial = a2 + b2 + c2
                if partial > n - 1:
                    break
                d2 = n - partial
                d = int(math.isqrt(d2))
                # Verify that the remaining part is a perfect square and d>0
                if d > 0 and d * d == d2:
                    return True
    return False


def list_numbers_as_sum_of_four_nonzero_squares(limit: int):
    """
    Prints all numbers up to `limit` that can be expressed as the sum of four
    non‑zero square numbers.
    """
    results = []
    for n in range(1, limit + 1):
        if is_sum_of_four_nonzero_squares(n):
            results.append(n)
    return results


if __name__ == "__main__":
    # Example usage: list numbers up to 200
    LIMIT = 200
    numbers = list_numbers_as_sum_of_four_nonzero_squares(LIMIT)
    print(f"Numbers ≤ {LIMIT} that are the sum of four non‑zero squares:")
    print(numbers)