from pathlib import Path
from typing import List, Tuple

# Choose the correct input file – comment the one you need.
INPUT_FILE_PATH = Path("./example_in.txt")  # or Path("./input.txt")

def main() -> None:
    """Entry point of the script."""
    rows = _parse_input_file()
    # Convert rows like "1   2" into two integer columns.
    col1, col2 = _load_columns(rows)

    # Pair the smallest remaining numbers from each column.
    total_distance = _sum_min_abs_differences(col1, col2)
    print(total_distance)

def _parse_input_file() -> List[str]:
    """Read the input file and return a list of non‑empty lines."""
    content = INPUT_FILE_PATH.read_text(encoding="utf-8")
    return [line for line in content.splitlines() if line.strip()]

def _load_columns(lines: List[str]) -> Tuple[List[int], List[int]]:
    """Split each line on whitespace and return two integer lists."""
    col1, col2 = [], []
    for line in lines:
        # Allow any amount of whitespace between the numbers.
        parts = line.split()
        if len(parts) != 2:
            raise ValueError(f"Expected exactly two numbers per line, got: {line!r}")
        a, b = map(int, parts)
        col1.append(a)
        col2.append(b)
    return col1, col2

def _sum_min_abs_differences(list1: List[int], list2: List[int]) -> int:
    """
    Repeatedly take the smallest element from each list,
    compute their absolute difference, and sum the results.
    """
    # Sorting once is more efficient than repeatedly calling ``min``.
    list1.sort()
    list2.sort()
    return sum(abs(a - b) for a, b in zip(list1, list2))

if __name__ == "__main__":
    main()