import logging
import random
from typing import List, Dict

app = FastAPI()

CHAT_URL = "https://duckduckgo.com/duckchat/v1/chat"
STATUS_URL = "https://duckduckgo.com/duckchat/v1/status"
MODELS = {
    "gpt-4o-mini": {"owned_by": "openai", "is_free": True},
    "llama-3.1-70b": {"owned_by": "Meta", "is_free": True},
    "mixtral-8x7b": {"owned_by": "mistralai", "is_free": True},
    "claude-3-haiku": {"owned_by": "Anthropic", "is_free": False},
}

# ---------------------------------------------------------------------------
# Table of valid User‑Agent strings for macOS, Windows and Linux browsers.
# The list is deliberately diverse to emulate different browsers and platforms.
# ---------------------------------------------------------------------------
USER_AGENTS: List[str] = [
    # macOS – Safari / Chrome
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.6 Safari/605.1.15",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 13_5_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
    # Windows – Edge / Chrome / Firefox
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Edg/130.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:130.0) Gecko/20100101 Firefox/130.0",
    # Linux – Chrome / Firefox
    "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36",
    "Mozilla/5.0 (X11; Linux x86_64; rv:130.0) Gecko/20100101 Firefox/130.0",
]

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def fetch_vqd() -> Dict[str, str]:
    """Fetch the VQD token required for authentication, returning it together with a random User‑Agent."""
    # Pick a random User‑Agent for this request
    ua = random.choice(USER_AGENTS)

    async with httpx.AsyncClient() as client:
        response = await client.get(
            STATUS_URL,
            headers={
                "User-Agent": ua,
                "x-vqd-accept": "1",
            },
        )
        if response.status_code != 200:
            logger.error(f"Failed to fetch VQD: {response.status_code}")
            raise HTTPException(status_code=500, detail="Failed to retrieve VQD token")
        vqd_token = response.headers.get("x-vqd-4", "")

    # Return both the token and the User‑Agent that was used
    return {"vqd": vqd_token, "user-agent": ua}