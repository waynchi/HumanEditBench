import requests  # для синхронных запросов (оставлен для совместимости, но не используется в async‑версии)
import xml.etree.ElementTree as ET  # для обработки xml‑ответа API
import matplotlib.pyplot as plt  # для построения графиков
import pandas as pd  # для создания датафрейма и разделения всех свечей на два типа: close и open
import datetime  # для дат по оси иксов
import pickle  # для хранения переменных в файле
import json
import aiohttp  # асинхронные HTTP‑запросы
import aiofiles  # асинхронная работа с файлами
import asyncio

# класс валюта
class valute():
    """Валюта и всё с ней связанное, через ЦБ РФ
    Требуются библеотеки:
    requests
    xml.etree.ElementTree
    matplotlib.pyplot as plt
    pandas as pd
    datetime
    pickle
    json
    aiohttp
    aiofiles
    """

    def __init__(self, name):
        self.name = name

    async def correct_name(self):
        """Проверка имени валюты на наличие в множестве валют.
        Множество обновляется не чаще раза в день.
        """
        info_path = r"D:\MoexAPI_bot_aiogram3\data_files\Info.json"
        set_path = r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin"

        # Чтение файла Info.json асинхронно
        async with aiofiles.open(info_path, "r", encoding="utf-8") as f:
            info_content = await f.read()
        info = json.loads(info_content)

        # Проверяем, прошло ли более одного дня с последнего обновления списка валют
        last_check_str = info["last_day_check"]["valute"]
        last_check_dt = datetime.datetime.strptime(last_check_str, "%Y-%m-%d %H:%M:%S.%f")
        if datetime.datetime.now() - datetime.timedelta(days=1) > last_check_dt:
            # Обновляем список валют
            set_valutes = set()
            url = "http://www.cbr.ru/scripts/XML_daily.asp"

            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    xml_bytes = await response.read()

            root = ET.fromstring(xml_bytes)
            for Valute in root.findall("Valute"):
                CharCode = Valute.find("CharCode")
                if CharCode is not None and CharCode.text:
                    set_valutes.add(CharCode.text)

            # Сохраняем обновлённое множество в бинарный файл
            async with aiofiles.open(set_path, "wb") as f:
                await f.write(pickle.dumps(set_valutes))

            # Обновляем метку времени в Info.json
            info["last_day_check"]["valute"] = str(datetime.datetime.now())
            async with aiofiles.open(info_path, "w", encoding="utf-8") as f:
                await f.write(json.dumps(info, indent=3, ensure_ascii=False))

        # Чтение множества валют из файла
        async with aiofiles.open(set_path, "rb") as f:
            set_data = await f.read()
        set_valutes = pickle.loads(set_data)

        return self.name in set_valutes

    async def CurrentExchangeRate(self):
        """Текущий курс обмена валюты на рубль"""
        url = "http://www.cbr.ru/scripts/XML_daily.asp"
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                xml_bytes = await response.read()

        root = ET.fromstring(xml_bytes)
        for Valute in root.findall("Valute"):
            CharCode = Valute.find("CharCode")
            if CharCode is not None and CharCode.text == self.name:
                rate_elem = Valute.find("VunitRate")
                return rate_elem.text if rate_elem is not None else None
        return None