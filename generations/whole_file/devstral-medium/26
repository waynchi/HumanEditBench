def conjugate_gradient(A, b, x0, tol=1e-6, max_iter=1000):
    """
    Solve the linear system Ax = b using the Conjugate Gradient method.

    Parameters:
    A (numpy.ndarray): The coefficient matrix.
    b (numpy.ndarray): The right-hand side vector.
    x0 (numpy.ndarray): The initial guess for the solution.
    tol (float): The tolerance for convergence.
    max_iter (int): The maximum number of iterations.

    Returns:
    x (numpy.ndarray): The solution vector.
    """
    import numpy as np

    x = x0
    r = b - np.dot(A, x)
    p = r
    rsold = np.dot(r, r)

    for i in range(max_iter):
        Ap = np.dot(A, p)
        alpha = rsold / np.dot(p, Ap)
        x = x + alpha * p
        r = r - alpha * Ap
        rsnew = np.dot(r, r)
        if np.sqrt(rsnew) < tol:
            break
        p = r + (rsnew / rsold) * p
        rsold = rsnew

    return x