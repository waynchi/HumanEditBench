from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import numpy as np
import matplotlib.pyplot as plt

def cluster_data(features_transformed, cluster_parameters, n_clusters=2, clustering_method='kmeans'):
    """
    Выполняет кластеризацию данных по указанным наборам столбцов.

    Args:
        features_transformed (pandas.DataFrame): Преобразованный DataFrame с параметрами.
        cluster_parameters (dict): Словарь параметров кластеризации. Ключ - имя столбца с метками кластеров,
                                значение - список столбцов, используемых для кластеризации.
        n_clusters (int): Количество кластеров (одно для всех кластеров).
        clustering_method (str): Метод кластеризации ('kmeans').

    Returns:
        pandas.DataFrame: DataFrame с добавленными столбцами меток кластеров.
    """
    if features_transformed is None:
        print("Сначала выполните преобразование данных (этап 5).")
        return None

    for cluster_name, columns in cluster_parameters.items():
        # Выделить указанные признаки
        features_subset = features_transformed[columns]
        
        # Проверка на числовые данные
        numeric_subset = features_subset.select_dtypes(include=np.number)
        if numeric_subset.shape[1] != len(columns):
            print(f"Кластер '{cluster_name}' не может быть выполнен, так как в выбранных столбцах есть ненумерические значения.")
            continue
        
        # Оценка качества кластеризации (например, с помощью коэффициента силуэта)
        if clustering_method == 'kmeans':
            model = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
            cluster_labels = model.fit_predict(features_subset)
            
            # Проверка на случай, когда все точки отнесены к одному кластеру
            if len(np.unique(cluster_labels)) > 1:
                silhouette_avg = silhouette_score(numeric_subset, cluster_labels)
                print(f"Коэффициент силуэта для кластера '{cluster_name}' и {n_clusters} кластеров: {silhouette_avg:.4f}")
            else:
                print(f"Невозможно рассчитать коэффициент силуэта для кластера '{cluster_name}' и {n_clusters} кластеров (все точки в одном кластере).")

        else:
            print("Неподдерживаемый метод кластеризации.")
            return None

        # Добавить результат кластеризации в DataFrame
        features_transformed[cluster_name] = cluster_labels
        print(f"Кластеризация для '{cluster_name}' выполнена. Метки кластеров добавлены в столбец '{cluster_name}'.")

    return features_transformed

# Выполнение кластеризации (после этапа 5 и до этапа 6)
if 'features_transformed' in locals() and features_transformed is not None:
    # Создание словаря с параметрами кластеризации
    cluster_parameters = {
        'cluster1': (features_transformed.columns[0], features_transformed.columns[1]),  # пары столбцов
        'cluster2': (features_transformed.columns[2],)  # один столбец
    }
    
    n_clusters = 3  # Количество кластеров (подберите оптимальное значение)
    features_transformed = cluster_data(features_transformed, cluster_parameters, n_clusters)
    
    # Визуализация кластеров (пример для случая, когда есть 2 числовых признака)
    numerical_features = features_transformed.select_dtypes(include=np.number)
    if numerical_features.shape[1] >= 2:
        plt.figure(figsize=(8, 6))
        plt.scatter(numerical_features.iloc[:, 0], numerical_features.iloc[:, 1], c=features_transformed['cluster1'], cmap='viridis')
        plt.xlabel(numerical_features.columns[0])
        plt.ylabel(numerical_features.columns[1])
        plt.title('Результаты кластеризации')
        plt.colorbar(label='Номер кластера')
        plt.show()
    else:
        print("Недостаточно числовых признаков для визуализации кластеров на плоскости.")
else:
    print("Сначала выполните этап 5 (Преобразование данных).")