import requests #для запроса к API
import xml.etree.ElementTree #для обработки xml-ответа API
import matplotlib.pyplot as plt #для построения графиков
import pandas as pd #для создания датафрейма и разденеия всех свечей на два типа: close и open
import datetime #для дат по оси иксов
import pickle #для хранения переменных в файле
import json
import aiohttp
import asyncio

#класс валюта
class valute():
    """Валюта и всё с ней связанное, через ЦБ РФ \n
    Требуются библеотеки: \n
    requests \n
    xml.etree.ElementTree \n
    matplotlib.pyplot as plt \n
    pandas as pd \n
    datetime \n
    pickle \n
    json \n
    """
    def __init__(self, name):
        self.name = name
    
    async def correct_name(self):
        """Проверка имени валюты на наличие в множестве валют. Множество обновляется не чаще раза в день"""
        info = await asyncio.to_thread(self._read_json_file)
        last_check = datetime.datetime.strptime(info["last_day_check"]["valute"], "%Y-%m-%d %H:%M:%S.%f")
        now = datetime.datetime.now()
        if now - last_check > datetime.timedelta(days=1):
            async with aiohttp.ClientSession() as session:
                async with session.get("http://www.cbr.ru/scripts/XML_daily.asp") as response:
                    xml_data = await response.read()
            root = await asyncio.to_thread(xml.etree.ElementTree.fromstring, xml_data)
            set_valutes = set()
            for Valute in root.findall("Valute"):
                CharCode = Valute.find("CharCode")
                set_valutes.add(CharCode.text)
            await asyncio.to_thread(self._write_set_valutes, set_valutes)
            info["last_day_check"]["valute"] = str(now)
            await asyncio.to_thread(self._write_json_file, info)
        set_valutes = await asyncio.to_thread(self._read_set_valutes)
        return self.name in set_valutes
    
    async def CurrentExchangeRate(self):
        '''Текущий курс обмена валюты на рубль'''
        async with aiohttp.ClientSession() as session:
            async with session.get("http://www.cbr.ru/scripts/XML_daily.asp") as response:
                xml_data = await response.read()
        root = await asyncio.to_thread(xml.etree.ElementTree.fromstring, xml_data)
        for Valute in root.findall("Valute"):
            for CharCode in Valute.findall("CharCode"):
                if CharCode.text == self.name:
                    return Valute.find("VunitRate").text

    def _read_json_file(self):
        with open(r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", "r", encoding="utf-8") as f:
            return json.load(f)
    
    def _write_json_file(self, info):
        with open(r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", "w", encoding="utf-8") as f:
            json.dump(info, f, indent=3, ensure_ascii=False)
    
    def _write_set_valutes(self, set_valutes):
        with open(r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin", "wb") as f:
            pickle.dump(set_valutes, f)
    
    def _read_set_valutes(self):
        with open(r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin", "rb") as f:
            return pickle.load(f)