import random
import torch
from torchvision import transforms
from datasets import load_dataset
from PIL import Image
import numpy as np
import requests
from io import BytesIO

class AlignmentDatasetCreator:
    def __init__(self, sample_size=1000):
        self.sample_size = sample_size
        self.transform = transforms.Compose([
            transforms.Resize((224, 224)),
            transforms.ToTensor(),
            transforms.Normalize(mean=[0.485, 0.456, 0.406], 
                              std=[0.229, 0.224, 0.225])
        ])

    def create_unrelated_pairs(self, image_text_pairs):
        """Creates unrelated image-text pairs by shuffling the text descriptions"""
        images, texts = zip(*image_text_pairs)
        shuffled_texts = list(texts)
        random.shuffle(shuffled_texts)
        return list(zip(images, shuffled_texts))

    def create_textual_pairs(self, dataset_name='quora'):
        """Creates semantically similar text pairs using paraphrase datasets"""
        dataset = load_dataset(dataset_name, split=f'train[:{self.sample_size}]')
        textual_pairs = []
        for item in dataset:
            if item['is_duplicate'] == 1:
                pair = (item['question1'], item['question2'])
                textual_pairs.append(pair)
        return textual_pairs[:self.sample_size]

    def create_visual_pairs(self, image_text_pairs):
        """Creates augmented image pairs while maintaining semantic meaning"""
        augmentation_transforms = transforms.Compose([
            transforms.RandomHorizontalFlip(p=1.0),
            transforms.ColorJitter(brightness=0.2, contrast=0.2),
            transforms.RandomRotation(15)
        ])
        
        visual_pairs = []
        for image, _ in image_text_pairs:
            if isinstance(image, Image.Image):
                augmented = augmentation_transforms(image)
                visual_pairs.append((image, augmented))
        return visual_pairs

    def load_mscoco_dataset(self):
        """Loads and preprocesses MSCOCO dataset by fetching images over HTTP"""
        # stream the dataset, but we will manually download images via URLs
        dataset = load_dataset(
            "shunk031/MSCOCO",
            year=2014,
            coco_task="captions",
            split='train',
            streaming=True
        )
        # take a larger chunk to allow for filtering out bad entries
        dataset = dataset.take(self.sample_size * 2)

        image_text_pairs = []
        for item in dataset:
            # choose the longest caption
            best_caption = max(item["captions"], key=len)
            if len(best_caption.split()) < 5:
                continue

            # extract a usable URL for the image
            url = None
            img_field = item.get("image")
            if isinstance(img_field, dict) and "url" in img_field:
                url = img_field["url"]
            elif isinstance(img_field, str) and img_field.startswith("http"):
                url = img_field
            else:
                # sometimes the field may be named differently
                url = item.get("image_url") or item.get("img_url")
            
            if not url:
                continue

            # download and open the image
            try:
                resp = requests.get(url, timeout=5)
                resp.raise_for_status()
                img = Image.open(BytesIO(resp.content)).convert("RGB")
            except Exception:
                continue

            image_text_pairs.append((img, best_caption))
            if len(image_text_pairs) >= self.sample_size:
                break

        return image_text_pairs

def main():
    # Initialize dataset creator
    creator = AlignmentDatasetCreator(sample_size=100)
    
    # Load and create datasets
    print("Loading MSCOCO dataset...")
    image_text_pairs = creator.load_mscoco_dataset()
    
    print("Creating unrelated pairs...")
    unrelated_pairs = creator.create_unrelated_pairs(image_text_pairs)
    
    print("Creating textual pairs...")
    textual_pairs = creator.create_textual_pairs()
    
    print("Creating visual pairs...")
    visual_pairs = creator.create_visual_pairs(image_text_pairs)
    
    # Print sample from each dataset
    print("Dataset Samples:")
    print(f"Image-Text Pair: {image_text_pairs[0]}")
    print(f"Unrelated Pair: {unrelated_pairs[0]}")
    print(f"Textual Pair: {textual_pairs[0]}")
    print(f"Visual Pair: {visual_pairs[0]}")

if __name__ == "__main__":
    main()