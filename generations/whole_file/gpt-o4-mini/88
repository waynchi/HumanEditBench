import requests #для запроса к API
import xml.etree.ElementTree #для обработки xml-ответа API
import matplotlib.pyplot as plt #для построения графиков
import pandas as pd #для создания датафрейма и разденеия всех свечей на два типа: close и open
import datetime #для дат по оси иксов
import pickle #для хранения переменных в файле
import json

import aiohttp  # для асинхронных HTTP-запросов
import aiofiles  # для асинхронной работы с файлами

#класс валюта
class valute():
    """Валюта и всё с ней связанное, через ЦБ РФ
    Требуются библиотеки:
    requests
    xml.etree.ElementTree
    matplotlib.pyplot as plt
    pandas as pd
    datetime
    pickle
    json
    aiohttp
    aiofiles
    """
    def __init__(self, name):
        self.name = name

    async def correct_name(self):
        """Проверка имени валюты на наличие в множестве валют.
           Множество обновляется не чаще раза в день."""
        info_path = r"D:\MoexAPI_bot_aiogram3\data_files\Info.json"
        # читаем Info.json
        async with aiofiles.open(info_path, "r", encoding="utf-8") as f:
            info_content = await f.read()
        info = json.loads(info_content)

        last_check = datetime.datetime.strptime(
            info["last_day_check"]["valute"], "%Y-%m-%d %H:%M:%S.%f"
        )
        # если прошло больше суток — обновляем список валют
        if datetime.datetime.now() - datetime.timedelta(days=1) > last_check:
            s = "http://www.cbr.ru/scripts/XML_daily.asp"
            set_valutes = set()
            # асинхронный HTTP-запрос
            async with aiohttp.ClientSession() as session:
                async with session.get(s) as resp:
                    xml_bytes = await resp.read()
            root = xml.etree.ElementTree.fromstring(xml_bytes)
            for Valute in root.findall("Valute"):
                code = Valute.find("CharCode")
                if code is not None and code.text:
                    set_valutes.add(code.text)

            # сохраняем новое множество в бинарный файл
            bin_path = r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin"
            bin_data = pickle.dumps(set_valutes)
            async with aiofiles.open(bin_path, "wb") as bf:
                await bf.write(bin_data)

            # обновляем время последней проверки
            info["last_day_check"]["valute"] = str(datetime.datetime.now())
            new_info = json.dumps(info, indent=3, ensure_ascii=False)
            async with aiofiles.open(info_path, "w", encoding="utf-8") as f:
                await f.write(new_info)

        # читаем множество валют из файла
        bin_path = r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin"
        async with aiofiles.open(bin_path, "rb") as bf:
            bin_content = await bf.read()
        set_valutes = pickle.loads(bin_content)

        return self.name in set_valutes

    async def CurrentExchangeRate(self):
        """Текущий курс обмена валюты на рубль"""
        url = "http://www.cbr.ru/scripts/XML_daily.asp"
        # асинхронный HTTP-запрос
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                xml_bytes = await resp.read()
        root = xml.etree.ElementTree.fromstring(xml_bytes)
        for Valute in root.findall("Valute"):
            code = Valute.find("CharCode")
            if code is not None and code.text == self.name:
                rate = Valute.find("VunitRate")
                return rate.text if rate is not None else None
        return None