def create_matrix(rows: int, cols: int, fill_value=0) -> list:
    """
    Создает матрицу размера rows x cols, заполненную значением fill_value.
    Параметры:
    rows (int): количество строк.
    cols (int): количество столбцов.
    fill_value (любой тип): значение для заполнения матрицы.
    Возвращает:
    list: матрица в виде списка списков.
    """
    if rows < 0 or cols < 0:
        raise ValueError("Number of rows and columns must be non-negative")
    return [[fill_value for _ in range(cols)] for _ in range(rows)]


def add_matrices(matrix_a: list, matrix_b: list) -> list:
    """
    Складывает две матрицы одинакового размера.
    Параметры:
    matrix_a (list): первая матрица.
    matrix_b (list): вторая матрица.
    Возвращает:
    list: результат сложения матриц.
    """
    if not matrix_a or not matrix_b:
        raise ValueError("Input matrices must not be empty")
    rows_a = len(matrix_a)
    cols_a = len(matrix_a[0])
    rows_b = len(matrix_b)
    cols_b = len(matrix_b[0])
    if rows_a != rows_b or cols_a != cols_b:
        raise ValueError("Matrices must have the same dimensions")
    result = []
    for i in range(rows_a):
        if len(matrix_a[i]) != cols_a or len(matrix_b[i]) != cols_b:
            raise ValueError("All rows must have the same number of columns")
        row = []
        for j in range(cols_a):
            row.append(matrix_a[i][j] + matrix_b[i][j])
        result.append(row)
    return result


def scalar_multiply(matrix: list, scalar: float) -> list:
    """
    Умножает все элементы матрицы на скаляр.
    Параметры:
    matrix (list): исходная матрица.
    scalar (float): число, на которое умножаются элементы матрицы.
    Возвращает:
    list: результат умножения матрицы на скаляр.
    """
    if not matrix:
        return []
    rows = len(matrix)
    cols = len(matrix[0])
    result = []
    for i in range(rows):
        if len(matrix[i]) != cols:
            raise ValueError("All rows must have the same number of columns")
        row = []
        for j in range(cols):
            row.append(matrix[i][j] * scalar)
        result.append(row)
    return result


def multiply_matrices(matrix_a: list, matrix_b: list) -> list:
    """
    Перемножает две матрицы.
    Параметры:
    matrix_a (list): первая матрица.
    matrix_b (list): вторая матрица.
    Возвращает:
    list: результат умножения матриц.
    """
    if not matrix_a or not matrix_b:
        raise ValueError("Input matrices must not be empty")
    rows_a = len(matrix_a)
    cols_a = len(matrix_a[0])
    rows_b = len(matrix_b)
    cols_b = len(matrix_b[0])
    if cols_a != rows_b:
        raise ValueError("Number of columns of A must equal number of rows of B")
    # Проверка вырожденных строк
    for row in matrix_a:
        if len(row) != cols_a:
            raise ValueError("All rows in matrix A must have the same number of columns")
    for row in matrix_b:
        if len(row) != cols_b:
            raise ValueError("All rows in matrix B must have the same number of columns")
    # Инициализация результирующей матрицы
    result = [[0 for _ in range(cols_b)] for _ in range(rows_a)]
    # Умножение
    for i in range(rows_a):
        for j in range(cols_b):
            total = 0
            for k in range(cols_a):
                total += matrix_a[i][k] * matrix_b[k][j]
            result[i][j] = total
    return result


def transpose_matrix(matrix: list) -> list:
    """
    Транспонирует матрицу.
    Параметры:
    matrix (list): исходная матрица.
    Возвращает:
    list: транспонированная матрица.
    """
    if not matrix:
        return []
    rows = len(matrix)
    cols = len(matrix[0])
    for row in matrix:
        if len(row) != cols:
            raise ValueError("All rows must have the same number of columns")
    # Транспонирование
    transposed = [[matrix[i][j] for i in range(rows)] for j in range(cols)]
    return transposed


def determinant_3x3(matrix: list) -> float:
    """
    Вычисляет определитель матрицы 3x3.
    Параметры:
    matrix (list): исходная матрица размером 3x3.
    Возвращает:
    float: определитель матрицы.
    """
    if len(matrix) != 3 or any(len(row) != 3 for row in matrix):
        raise ValueError("Matrix must be 3x3")
    a11, a12, a13 = matrix[0]
    a21, a22, a23 = matrix[1]
    a31, a32, a33 = matrix[2]
    det = (
        a11 * (a22 * a33 - a23 * a32)
        - a12 * (a21 * a33 - a23 * a31)
        + a13 * (a21 * a32 - a22 * a31)
    )
    return float(det)