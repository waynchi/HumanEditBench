import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.stats import skew

def medcouple(data):
    """
    Быстрая векторизованная реализация medcouple.
    """
    data = np.sort(data)
    median = np.median(data)

    # Split data into left and right of the median
    left = data[data <= median]
    right = data[data >= median]

    # Count of repeated median values
    k = np.sum(data == median)

    # Build the meshgrids for values and for indices
    xi, xj = np.meshgrid(left, right, indexing='ij')
    # i_idx: index in left, j_idx: index in right
    i_idx, j_idx = np.indices((len(left), len(right)))

    # Compute the standard kernel h(xi, xj) in vector form
    denom = (xj - xi)
    h_mat = ((xj - median) - (median - xi)) / denom
    # Wherever denom == 0 (xi == xj), set h to 0
    h_mat[denom == 0] = 0

    if k > 1:
        # Compute the special kernel for the center (both == median)
        # special_h = -1 if i + j - 1 < k, 0 if == k, 1 if > k
        sum_idx = i_idx + j_idx - 1
        special_mat = np.where(sum_idx < k, -1,
                               np.where(sum_idx > k, 1, 0))
        # Mask for positions where both xi and xj equal the median
        center_mask = (xi == median) & (xj == median)
        # Replace those positions in h_mat with the special values
        h_mat = np.where(center_mask, special_mat, h_mat)

    # Return the median of all h values
    return np.median(h_mat)

def adjusted_boxplot_bounds(data):
    """
    Вычисляет границы adjusted boxplot с учетом skewness-adjusted fences.
    """
    q1 = np.percentile(data, 25)
    q3 = np.percentile(data, 75)
    iqr = q3 - q1
    _medcouple = medcouple(data)

    if _medcouple > 0:
        lower_fence = q1 - 1.5 * np.exp(-4 * _medcouple) * iqr
        upper_fence = q3 + 1.5 * np.exp(3 * _medcouple) * iqr
    else:
        lower_fence = q1 - 1.5 * np.exp(-3 * _medcouple) * iqr
        upper_fence = q3 + 1.5 * np.exp(4 * _medcouple) * iqr

    return lower_fence, upper_fence

def normalize_column(data):
    """
    Нормализация с использованием adjusted boxplot.
    """
    lower_fence, upper_fence = adjusted_boxplot_bounds(data)
    print(f"Lower fence: {lower_fence}, Upper fence: {upper_fence}")
    return (data - lower_fence) / (upper_fence - lower_fence)

# Генерация данных
np.random.seed(42)
data_normal = np.random.normal(loc=50, scale=10, size=10000)
data_skewed = np.random.exponential(scale=20, size=10000)
data_skewed = np.concatenate([data_skewed[5:], [200, 250, 300, -100, -50]])
data_with_outliers = np.concatenate([data_normal, [150, 160, 170]])

# Нормализация
df = pd.DataFrame({
    "Normal": data_normal,
    "Skewed": data_skewed,
    # "With_Outliers": data_with_outliers[3:],
})

normalized_df = df.apply(normalize_column)

plt.figure(figsize=(16, 4), dpi=250)

bins = np.linspace(-5, 200, 206)
bin_width = bins[1] - bins[0]  # Ширина одного бина

for col in df.columns:
    hist, _ = np.histogram(df[col], bins=bins)
    bin_centers = (bins[:-1] + bins[1:]) / 2
    offset = bin_width / 4
    plt.bar(bin_centers - offset, hist, width=bin_width,
            align='center', alpha=0.2, label=f'{col}')
    plt.legend()
    plt.title("Histogram Before Normalization")
plt.xlim(-10, 200)
plt.show()

bins = np.linspace(-2, 2, 101)
bin_width = bins[1] - bins[0]

plt.figure(figsize=(16, 4), dpi=250)
for col in normalized_df.columns:
    hist, _ = np.histogram(normalized_df[col], bins=bins)
    bin_centers = (bins[:-1] + bins[1:]) / 2
    offset = bin_width / 2
    plt.bar(bin_centers - offset, hist, width=bin_width,
            align='center', label=f'{col}', alpha=0.2)
    plt.legend()
    plt.title("Histogram After Normalization")
plt.show()