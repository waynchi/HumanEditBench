from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

def cluster_data(features_transformed, clustering_specs, n_clusters=2, clustering_method='kmeans'):
    """
    Выполняет кластеризацию данных отдельно для каждого указанного набора столбцов.

    Args:
        features_transformed (pandas.DataFrame): Преобразованный DataFrame с параметрами.
        clustering_specs (dict): Словарь вида {new_col_name: (col1, col2, ...), ...},
                                 где ключ — имя нового столбца для меток кластеров,
                                 а значение — кортеж исходных столбцов для кластеризации.
        n_clusters (int): Количество кластеров для каждого запуска.
        clustering_method (str): Метод кластеризации ('kmeans').

    Returns:
        pandas.DataFrame: DataFrame с добавленными столбцами меток кластеров.
    """
    if features_transformed is None:
        print("Сначала выполните преобразование данных (этап 5).")
        return None

    # Проходим по всем спецификациям кластеризации
    for cluster_feature_name, cols in clustering_specs.items():
        # Проверяем, что указанные столбцы есть в DataFrame
        missing = [c for c in cols if c not in features_transformed.columns]
        if missing:
            print(f"Столбцы {missing} отсутствуют в данных. Пропускаем '{cluster_feature_name}'.")
            continue

        # Берём только нужные признаки для данного кластера
        features_for_clustering = features_transformed[list(cols)].copy()

        if clustering_method == 'kmeans':
            model = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
            labels = model.fit_predict(features_for_clustering)

            # Оценка качества кластеризации
            if len(np.unique(labels)) > 1:
                silhouette_avg = silhouette_score(features_for_clustering, labels)
                print(f"Коэффициент силуэта для '{cluster_feature_name}' ({n_clusters} кластеров): {silhouette_avg:.4f}")
            else:
                print(f"Невозможно рассчитать коэффициент силуэта для '{cluster_feature_name}' "
                      f"({n_clusters} кластеров): все точки в одном кластере.")
        else:
            print(f"Неподдерживаемый метод кластеризации '{clustering_method}' для '{cluster_feature_name}'.")
            continue

        # Сохраняем метки в исходный DataFrame под новым именем столбца
        features_transformed[cluster_feature_name] = labels
        print(f"Кластеризация выполнена для '{cluster_feature_name}'. "
              f"Метки добавлены в столбец '{cluster_feature_name}'.")

    return features_transformed

# Выполнение кластеризации (после этапа 5 и до этапа 6)
if 'features_transformed' in locals() and features_transformed is not None:
    # Задаём спецификации: имя нового столбца -> кортеж признаков для кластеризации
    clustering_specs = {
        'cluster1': ('столбец1', 'столбец2'),
        'cluster2': ('столбец3',),
        # добавьте другие наборы по необходимости
    }
    n_clusters = 3  # Количество кластеров (одно для всех наборов)
    features_transformed = cluster_data(features_transformed, clustering_specs, n_clusters)

    # Визуализация кластеров (пример для случая, когда есть 2 числовых признака)
    numerical_features = features_transformed.select_dtypes(include=np.number)
    if numerical_features.shape[1] >= 2:
        plt.figure(figsize=(8, 6))
        plt.scatter(
            numerical_features.iloc[:, 0],
            numerical_features.iloc[:, 1],
            c=features_transformed[list(clustering_specs.keys())[0]],
            cmap='viridis'
        )
        plt.xlabel(numerical_features.columns[0])
        plt.ylabel(numerical_features.columns[1])
        plt.title('Результаты кластеризации')
        plt.colorbar(label='Номер кластера')
        plt.show()
    else:
        print("Недостаточно числовых признаков для визуализации кластеров на плоскости.")
else:
    print("Сначала выполните этап 5 (Преобразование данных).")