from beem.discussions import Discussions, Query
from beem.comment import Comment
import random
import string

n_respuestas_minimas = 5
diccionario = {}

def procesar(texto: str):
    return "count me " in texto

def is_own_author(autor: str):
    return autor == 'subidu'

def is_banned(autor: str):
    list_banned = []
    return autor in list_banned

def generar_permlink_unico() -> str:
    return "".join(random.choices(string.digits, k=10))

def procesar_replies(replies: Comment):
    pass

def preparar_comentario(parent_author: str, parent_permlink: str,
                        permlink: str, title: str = '',
                        author: str = 'subidu',
                        body: str = 'Count me in ^^ @subidu') -> dict[str, str]:
    return {
        "parent_author": parent_author,
        "parent_permlink": parent_permlink,
        "author": author,
        "permlink": permlink,
        "title": title,
        "body": body,
    }

q = Query()
d = Discussions()
posts_generator = d.get_discussions("created", q, limit=6000)

# Nueva sección: construcción de diccionario jerárquico
hierarchy = {}
X = 0

for post in posts_generator:
    post_author = post['author']
    post_permlink = post['permlink']
    post_key = f"{post_author}/{post_permlink}"
    hierarchy[post_key] = {}
    X += 1

    # solo procesar si tiene suficientes respuestas
    if post.get('children', 0) > n_respuestas_minimas:
        comment = Comment(authorperm=post_key)
        replies_list = comment.get_replies()

        cnt = 0
        for reply in replies_list:
            author = reply['author']
            text = reply['body']
            permlink = reply['permlink']

            # filtros de autor
            if is_own_author(author):
                break
            if is_banned(author):
                break

            # procesar contenido
            if procesar(text):
                cnt += 1
                # agregar al diccionario jerárquico
                reply_key = f"{author}/{permlink}"
                hierarchy[post_key][reply_key] = {
                    "body": text
                }

        # ejemplo de salida si se alcanzó umbral
        if cnt > 3:
            print("Iterador:", X)
            print("Replies válidas en", post_key, "->", list(hierarchy[post_key].keys()))

# ahora `hierarchy` contiene la estructura de posts y sus replies procesados