class Token:
    start: int
    end: int

class IntegerToken(Token):
    value: int

    @staticmethod
    def is_digit(input: str, start_pos) -> bool:
        '''Returns True if the character at start_pos is a digit, otherwise False'''
        return input[start_pos].isdigit()
    
def is_int(input: str, start_pos) -> int:
    max_pos = len(input)
    current_pos = start_pos
    digit_found = False

    # Consume as many digit characters as possible using str.isdigit()
    while current_pos < max_pos and input[current_pos].isdigit():
        digit_found = True
        current_pos += 1

    assert digit_found, "Not an integer"
    return current_pos

if __name__=="__main__":
    # print(IntegerToken.is_digit("1234", 0))
    # print(IntegerToken.is_digit("a123", 0))
    print(is_int("1234", 0))
    try:
        print(is_int("a123", 0))
    except AssertionError as e:
        print(e)