import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

def cluster_data(features_transformed, cluster_configs, n_clusters=2, clustering_method='kmeans'):
    """
    Выполняет кластеризацию данных независимо для указанных наборов столбцов.

    Args:
        features_transformed (pandas.DataFrame): Преобразованный DataFrame с параметрами.
        cluster_configs (dict): Словарь, где ключи - имена новых столбцов для меток кластеров,
                                значения - строки или кортежи/списки имен столбцов для кластеризации.
        n_clusters (int): Количество кластеров.
        clustering_method (str): Метод кластеризации ('kmeans').

    Returns:
        pandas.DataFrame: DataFrame с добавленными столбцами меток кластеров.
    """
    if features_transformed is None:
        print("Сначала выполните преобразование данных (этап 5).")
        return None

    if clustering_method != 'kmeans':
        print("Неподдерживаемый метод кластеризации.")
        return None

    for cluster_name, cols in cluster_configs.items():
        if isinstance(cols, str):
            cols = [cols]
        elif isinstance(cols, (list, tuple)):
            cols = list(cols)
        else:
            print(f"Неверный формат столбцов для {cluster_name}: {cols}")
            continue

        missing = [c for c in cols if c not in features_transformed.columns]
        if missing:
            print(f"Отсутствующие столбцы для {cluster_name}: {missing}")
            continue

        subset = features_transformed[cols].copy()

        if subset.empty or subset.shape[1] == 0:
            print(f"Нет данных для кластеризации {cluster_name}.")
            continue

        model = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
        cluster_labels = model.fit_predict(subset)
        
        # Оценка качества кластеризации (например, с помощью коэффициента силуэта)
        if len(np.unique(cluster_labels)) > 1: # Проверка на случай, когда все точки отнесены к одному кластеру
            silhouette_avg = silhouette_score(subset, cluster_labels)
            print(f"Коэффициент силуэта для {cluster_name} ({n_clusters} кластеров): {silhouette_avg:.4f}")
        else:
            print(f"Невозможно рассчитать коэффициент силуэта для {cluster_name} ({n_clusters} кластера(ов)) (все точки в одном кластере).")

        features_transformed[cluster_name] = cluster_labels
        print(f"Кластеризация для {cluster_name} выполнена. Метки кластеров добавлены в столбец '{cluster_name}'.")

    print("Все кластеризации выполнены.")
    return features_transformed

# Выполнение кластеризации (после этапа 5 и до этапа 6)
if 'features_transformed' in locals() and features_transformed is not None:
    cluster_configs = {
        'Кластер1': ('столбец1', 'столбец2'),  # Замените на реальные имена столбцов
        'Кластер2': ('столбец3',)
    }  # Конфигурация для независимой кластеризации
    n_clusters = 3  # Количество кластеров (подберите оптимальное значение)
    features_transformed = cluster_data(features_transformed, cluster_configs, n_clusters)
    
    # Визуализация кластеров (пример для случая, когда есть 2 числовых признака, используя первый кластер)
    cluster_keys = list(cluster_configs.keys())
    if cluster_keys:
        cluster_feature_name = cluster_keys[0]  # Используем первый кластер для визуализации
        if cluster_feature_name in features_transformed.columns:
            numerical_features = features_transformed.select_dtypes(include=[np.number])
            if len(numerical_features.columns) >= 2:
                plt.figure(figsize=(8, 6))
                plt.scatter(numerical_features.iloc[:, 0], numerical_features.iloc[:, 1], 
                           c=features_transformed[cluster_feature_name], cmap='viridis')
                plt.xlabel(numerical_features.columns[0])
                plt.ylabel(numerical_features.columns[1])
                plt.title(f'Результаты кластеризации ({cluster_feature_name})')
                plt.colorbar(label='Номер кластера')
                plt.show()
            else:
                print("Недостаточно числовых признаков для визуализации кластеров на плоскости.")
        else:
            print("Столбец кластера не найден для визуализации.")
else:
    print("Сначала выполните этап 5 (Преобразование данных).")