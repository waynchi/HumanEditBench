from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

def cluster_data(features_transformed, cluster_definitions, n_clusters=2, clustering_method='kmeans'):
    """
    Выполняет кластеризацию данных.

    Args:
        features_transformed (pandas.DataFrame): Преобразованный DataFrame с параметрами.
        cluster_definitions (dict): Словарь, где ключ - имя нового столбца для кластера,
                                    а значение - кортеж или список имен столбцов для кластеризации.
                                    Пример: {'Кластер1': ('столбец1', 'столбец2'), 'Кластер2': ('столбе3')}
        n_clusters (int): Количество кластеров.
        clustering_method (str): Метод кластеризации ('kmeans').

    Returns:
        pandas.DataFrame: DataFrame с добавленными столбцами меток кластеров.
    """
    if features_transformed is None:
        print("Сначала выполните преобразование данных (этап 5).")
        return None

    features_with_clusters = features_transformed.copy()

    if clustering_method != 'kmeans':
        print("Неподдерживаемый метод кластеризации.")
        return None

    for cluster_feature_name, columns_for_clustering in cluster_definitions.items():
        if not isinstance(columns_for_clustering, (list, tuple)):
            print(f"Ошибка: Для '{cluster_feature_name}' ожидается список или кортеж имен столбцов.")
            continue

        if not all(col in features_transformed.columns for col in columns_for_clustering):
            print(f"Ошибка: Некоторые столбцы для кластеризации '{columns_for_clustering}' не найдены в DataFrame.")
            continue

        data_for_clustering = features_transformed[list(columns_for_clustering)]

        model = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
        cluster_labels = model.fit_predict(data_for_clustering)
        
        # Оценка качества кластеризации (например, с помощью коэффициента силуэта)
        if len(np.unique(cluster_labels)) > 1: # Проверка на случай, когда все точки отнесены к одному кластеру
            silhouette_avg = silhouette_score(data_for_clustering, cluster_labels)
            print(f"Для '{cluster_feature_name}': Коэффициент силуэта для {n_clusters} кластеров: {silhouette_avg:.4f}")
        else:
            print(f"Для '{cluster_feature_name}': Невозможно рассчитать коэффициент силуэта для {n_clusters} кластера (все точки в одном кластере).")

        features_with_clusters[cluster_feature_name] = cluster_labels
        print(f"Кластеризация выполнена. Метки кластеров добавлены в столбец '{cluster_feature_name}'.")

    return features_with_clusters

# Выполнение кластеризации (после этапа 5 и до этапа 6)
if 'features_transformed' in locals() and features_transformed is not None:
    # Пример использования с новой структурой cluster_definitions
    # Предположим, 'feature1', 'feature2', 'feature3' - это имена столбцов в features_transformed
    cluster_definitions = {
        'cluster_group_1': ('feature1', 'feature2'),
        'cluster_group_2': ('feature3',),
        'cluster_all': features_transformed.columns.tolist() # Пример кластеризации по всем признакам
    }
    n_clusters = 3  # Количество кластеров (подберите оптимальное значение)
    features_transformed = cluster_data(features_transformed, cluster_definitions, n_clusters)
    
    # Визуализация кластеров (пример для случая, когда есть 2 числовых признака)
    # Здесь вам нужно будет решить, какой из новых столбцов кластеров вы хотите визуализировать.
    # Для примера возьмем первый добавленный столбец кластеров.
    first_cluster_column = list(cluster_definitions.keys())[0] if cluster_definitions else None

    if first_cluster_column and first_cluster_column in features_transformed.columns:
        numerical_features = features_transformed.select_dtypes(include=np.number).drop(columns=[col for col in cluster_definitions.keys() if col in features_transformed.columns], errors='ignore')

        if numerical_features.shape[1] >= 2:
            plt.figure(figsize=(8, 6))
            plt.scatter(numerical_features.iloc[:, 0], numerical_features.iloc[:, 1], 
                        c=features_transformed[first_cluster_column], cmap='viridis')
            plt.xlabel(numerical_features.columns[0])
            plt.ylabel(numerical_features.columns[1])
            plt.title(f'Результаты кластеризации для {first_cluster_column}')
            plt.colorbar(label='Номер кластера')
            plt.show()
        else:
            print("Недостаточно числовых признаков для визуализации кластеров на плоскости (без учета новых столбцов кластеров).")
    else:
        print("Не удалось найти столбец кластеров для визуализации.")

else:
    print("Сначала выполните этап 5 (Преобразование данных).")