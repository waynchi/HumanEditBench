import math
class Value:
    """ stores a single scalar value and its gradient """

    def __init__(self, data, _children=(), _op=''):
        self.data = data
        self.grad = 0
        # internal variables used for autograd graph construction
        self._backward = lambda: None
        self._prev = set(_children)
        self._op = _op # the op that produced this node, for graphviz / debugging / etc

    def __add__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data + other.data, (self, other), '+')

        def _backward():
            self.grad += out.grad
            other.grad += out.grad
        out._backward = _backward

        return out

    def __mul__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data * other.data, (self, other), '*')

        def _backward():
            self.grad += other.data * out.grad
            other.grad += self.data * out.grad
        out._backward = _backward

        return out

    def __pow__(self, other):
        assert isinstance(other, (int, float)), "only supporting int/float powers for now"
        out = Value(self.data**other, (self,), f'**{other}')

        def _backward():
            self.grad += (other * self.data**(other-1)) * out.grad
        out._backward = _backward

        return out


        print(f'** EXP {self}')
        out = Value(math.exp(self.data), (self,), "e")
        def _backward():
            self.grad += math.exp(self.data) * out.grad
        out._backward = _backward
        
        return out
    
    def log(self):
        out = Value(math.log(self.data), (self,), f'log{self.data}')
        def _backward():
            self.grad += 1 / self.data
        out._backward = _backward       
        
        return out
    
    def relu(self):
        assert isinstance(self.data, (int, float)), "only supporting int/float powers for now"
        out = Value(0 if self.data < 0 else self.data, (self,), 'ReLU')

        def _backward():
            self.grad += (out.data > 0) * out.grad
        out._backward = _backward

        return out
    
    # Softmax requires operating on a list of Values, not just a single Value
    # This implementation assumes `x` is a list of Value objects
    @staticmethod
    def softmax(x):
        # Calculate exponents for numerical stability
        max_val = max(val.data for val in x)
        exps = [Value(math.exp(val.data - max_val), (val,), f'exp({val.data} - {max_val})') for val in x]
        sum_exps = sum(exps) # Uses __add__ for Values

        outs = []
        for i, exp_val in enumerate(exps):
            out = Value(exp_val.data / sum_exps.data, (exp_val, sum_exps), 'softmax')

            def _backward(exp_val=exp_val, sum_exps=sum_exps, out=out): # Capture current values
                # d(softmax_i)/dx_j = softmax_i * (delta_ij - softmax_j)
                # For input x_k:
                # grad_k += out_i.grad * (out_i * (1 - out_i))  if i == k
                # grad_k += out_i.grad * (-out_i * out_k)      if i != k
                # This needs to be applied to each input x_j for each output softmax_i

                # A more direct way to backpropagate through division:
                # out = exp_val / sum_exps
                # d(out)/d(exp_val) = 1 / sum_exps
                # d(out)/d(sum_exps) = -exp_val / (sum_exps)^2
                exp_val.grad += (1 / sum_exps.data) * out.grad
                sum_exps.grad += (-exp_val.data / (sum_exps.data ** 2)) * out.grad

            out._backward = _backward
            outs.append(out)
        
        # After calculating individual gradients for exp_val and sum_exps,
        # we need to propagate these back to the original input `x`.
        # The sum_exps.grad will distribute to each exp_val's input via
        # the `_backward` of the exp_val.
        # The exp_val.grad will also go back to its input.
        
        # This implementation assumes the caller will iterate through the 'outs'
        # and trigger backward on each if they want to calculate gradients for all inputs.
        # For a more robust softmax, the 'backward' process needs to handle
        # the interdependencies between outputs.
        
        # A simpler way when implementing `_backward` for each `out` in the softmax list
        # is to directly compute the gradient with respect to its own specific input 
        # using the chain rule. However, softmax has cross-dependencies.
        #
        # A more holistic `_backward` for softmax that handles all inputs simultaneously
        # would be more complex and usually handled in a tensor library.
        # For this scalar Value class, we'll try to approximate it by propagating
        # the gradients to the direct children in the division. The `exp_val` itself
        # has a `_backward` that passes gradient to `x_i`.
        
        return outs

    def backward(self):

        # topological order all of the children in the graph
        topo = []
        visited = set()
        def build_topo(v):
            if v not in visited:
                visited.add(v)
                for child in v._prev:
                    build_topo(child)
                topo.append(v)
        build_topo(self)

        # go one variable at a time and apply the chain rule to get its gradient
        self.grad = 1
        for v in reversed(topo):
            v._backward()

    def __neg__(self): # -self
        return self * -1
    def __gt__(self, other):
        return self.data > other.data

    def __radd__(self, other): # other + self
        return self + other

    def __sub__(self, other): # self - other
        return self + (-other)

    def __rsub__(self, other): # other - self
        return other + (-self)

    def __rmul__(self, other): # other * self
        return self * other

    def __truediv__(self, other): # self / other
        return self * other**-1

    def __rtruediv__(self, other): # other / self
        return other * self**-1

    def __repr__(self):
        return f"Value(data={self.data}, grad={self.grad})"