import pandas as pd
import numpy as np

class Stock:
	def __init__(self, filename, name):
		self.filename = filename
		try:
			self.data = pd.read_csv(self.filename,index_col=0,parse_dates=True)
		except Exception as e:
			print(f"Unable to read file {self.filename}")
			raise e
		self.data.index.name = 'time'
		self.name = name
		self.attrs = {}

	def get_attr(self, key):
		try:
			return self.attrs[key]
		except KeyError:
			return None

	def set_attr(self, key, value):
		self.attrs[key] = value

	def get(self, i):
		return self.data.iloc[i]

	def get_range(self, s, t):
		return self.data.iloc[s:t+1]

	def __len__(self):
		return len(self.data)

class Transaction:
	def __init__(self, num, price):
		self.num = num
		self.price = price
		self.date = None

	def set_date(self, date):
		self.date = date

class Trade:
	def __init__(self, stock, long=True, num=0, price=0.0):
		self.stock = stock
		self.num = 0
		self.profit = 0
		self.closed = False
		self.long = long

		self.opens = []
		self.closes = []

		if num != 0:
			self.open(num, price)

	def close(self, num, price):
		if num > self.num:
			raise ValueError(f"ERR: Trying to close {num} of {self.stock.name} but only {self.num} available")
		self.num -= num
		self.closes.append(Transaction(num, price))

		if self.long:
			self.profit = self.get_num_closed() * (self.get_avg_close_price() - self.get_avg_open_price())
		else:
			self.profit = self.get_num_closed() * (self.get_avg_open_price() - self.get_avg_close_price())

		if self.num == 0:
			self.closed = True

	def open(self, num, price):
		self.num += num

		self.opens.append(Transaction(num, price))

	def get_equity(self, i):
		current_price = self.stock.get(i)["close"]
		if self.long:
			return self.num * current_price
		else:
			# For short trades, equity could reflect the potential cost to close the position
			return self.num * (self.get_avg_open_price() - current_price)

	def set_date(self, date):
		[transaction.set_date(date) for transaction in self.opens if transaction.date is None]
		[transaction.set_date(date) for transaction in self.closes if transaction.date is None]

	def get_avg_open_price(self):
		total_price = sum(transaction.price * transaction.num for transaction in self.opens)
		total_num = sum(transaction.num for transaction in self.opens)
		return total_price / total_num if total_num else 0
	
	def get_avg_close_price(self):
		total_price = sum(transaction.price * transaction.num for transaction in self.closes)
		total_num = sum(transaction.num for transaction in self.closes)
		return total_price / total_num if total_num else 0

	def get_num_opened(self):
		return sum(transaction.num for transaction in self.opens)

	def get_num_closed(self):
		return sum(transaction.num for transaction in self.closes)

class Strategy:
	def __init__(self):
		self.stocks = []
		self.starting_money = 100000.0
		self.money = self.starting_money
		self.closed_trades = []
		self.open_trades = []
		self.attrs = {}
		self.analyzers = []

	def get_attr(self, key):
		return self.attrs[key]

	def set_attr(self, key, value):
		self.attrs[key] = value

	def add_analyzer(self, analyzer):
		analyzer.strategy = self
		self.analyzers.append(analyzer)

	def has_open_trade(self, stock):
		for trade in self.open_trades:
			if stock is trade.stock:
				return True
		return False

	def get_open_trade(self, stock):
		for trade in self.open_trades:
			if trade.stock is stock:
				return trade
		raise ValueError("No open trade on stock "+str(stock.name))

	def open_trade(self, stock, num, price):
		if self.money < num*price:
			raise ValueError("Insufficient funds: have $"+str(self.money)+" available and trying to open "+str(num)+" of "+str(stock.name)+" at $"+str(price)+" on "+str(stock.get(self.get_attr("i")).name))

		if self.has_open_trade(stock):
			trade = self.get_open_trade(stock)
			trade.open(num, price)
			trade.set_date(stock.get(self.get_attr("i")).name)
		else:
			self.open_trades.append(Trade(stock, True, num, price))
			self.open_trades[-1].set_date(stock.get(self.get_attr("i")).name)

		self.money -= num*price

	def sell(self, stock, num, price):
		if self.has_open_trade(stock):
			trade = self.get_open_trade(stock)
			trade.close(num, price)
			if trade.closed:
				self.open_trades.remove(trade)
				self.closed_trades.append(trade)
			trade.set_date(stock.get(self.get_attr("i")).name)
		else:
			raise ValueError("No position to close in "+str(stock.name))

		self.money += num*price

	def get_equity(self, i):
		res = self.money
		for trade in self.open_trades:
			res += trade.get_equity(i)
		return res

	def next(self, i):
		pass

class Computer:
	def __init__(self):
		self.stocks = []
		self.strategies = []
		self.simulation_runs = 1 # Default to 1 run (no simulation)

	def add_stock(self, stock):
		if not isinstance(stock, Stock):
			exit("ERR: called 'add_stock' on type: "+str(type(stock)))
		self.stocks.append(stock)
	
	def add_strategy(self, strategy):
		if not isinstance(strategy, Strategy):
			exit("ERR: called 'add_strategy' on type: "+str(type(strategy)))
		self.strategies.append(strategy)

	def configure_simulations(self, runs):
		self.simulation_runs = runs

	def _apply_candlestick_variation(self, candlestick_data, variation_percentage_hlcv=0.01, variation_percentage_o=0.005):
		"""
		Applies random variation to high, low, close, and volume of a candlestick.
		Variation percentage is relative to the original value.
		"""
		varied_data = candlestick_data.copy()

		# Original values
		original_open = varied_data['open']
		original_high = varied_data['high']
		original_low = varied_data['low']
		original_close = varied_data['close']
		original_volume = varied_data['volume']

		# Apply variation to high, low, close, volume (typically a percentage of the original value)
		varied_data['high'] = original_high * (1 + np.random.uniform(-variation_percentage_hlcv, variation_percentage_hlcv))
		varied_data['low'] = original_low * (1 + np.random.uniform(-variation_percentage_hlcv, variation_percentage_hlcv))
		varied_data['close'] = original_close * (1 + np.random.uniform(-variation_percentage_hlcv, variation_percentage_hlcv))
		varied_data['volume'] = original_volume * (1 + np.random.uniform(-variation_percentage_hlcv, variation_percentage_hlcv))
		
		# Ensure high is not less than low
		if varied_data['high'] < varied_data['low']:
			varied_data['high'], varied_data['low'] = varied_data['low'], varied_data['high']

		# Ensure open is within high and low after adjustment of high/low. Or apply a small variation.
		# A small variation for open relative to its original value
		varied_data['open'] = original_open * (1 + np.random.uniform(-variation_percentage_o, variation_percentage_o))
		
		# Ensure open is within high and low, if not, adjust it.
		if varied_data['open'] > varied_data['high']:
			varied_data['open'] = varied_data['high']
		elif varied_data['open'] < varied_data['low']:
			varied_data['open'] = varied_data['low']

		return varied_data

	def run(self):
		# Store original dataframes to restore them later
		original_stock_data = {stock.name: stock.data.copy() for stock in self.stocks}

		for strategy in self.strategies:
			j = 1
			for stock in self.stocks:
				# Restore original stock data for each stock before running simulations
				stock.data = original_stock_data[stock.name].copy()
				
				strategy.stocks = [stock]
				print(f"stock #{j}/{len(self.stocks)}")
				j += 1

				# The outer loop now considers the simulation runs
				for run_idx in range(self.simulation_runs):
					print(f"  Simulation Run {run_idx + 1}/{self.simulation_runs}")
					
					# Reset strategy state for each simulation run if needed
					# This part might need more sophisticated handling if strategy state needs
					# to be deep-copied or re-initialized for each simulation.
					# For now, we assume simple re-evaluation of next() and analyzer.next().
					# If trades carry over, this needs careful consideration.
					if run_idx > 0:
						# Reinitialize strategy for fresh start or save/restore state
						# For simplicity, let's assume we reinitialize money and clear trades
						strategy.money = strategy.starting_money
						strategy.open_trades = []
						strategy.closed_trades = []


					# run every day on the strategies
					for i in range(len(stock)):
						original_candlestick = stock.data.iloc[i].copy()

						# Apply random variation for this specific candlestick for simulation
						simulated_candlestick = self._apply_candlestick_variation(original_candlestick)
						
						# Temporarily modify the stock's data for the current candlestick
						# We only need to modify 'i' for the current simulation step
						stock.data.loc[stock.data.index[i]] = simulated_candlestick

						strategy.set_attr("i", i)
						strategy.next(i)

						for analyzer in strategy.analyzers:
							analyzer.next(i)
						
						# After strategy.next(i) and analyzer.next(i) are called with varied data,
						# ensure the stock data for this index returns to its original value.
						# This is crucial so that subsequent iterations for 'i+1' operate on the
						# original data, and the 'final' values are the original ones.
						stock.data.loc[stock.data.index[i]] = original_candlestick

						# close any open trades on the end of the last day
						if i == len(stock)-1:
							for strat in self.strategies:
								while len(strat.open_trades) > 0:
									trade = strat.open_trades[0]
									strat.sell(trade.stock, trade.num, trade.stock.get(i)["close"])

		# get rid of strategies (clear stock references from strategies)
		for strategy in self.strategies:
			strategy.stocks = []
		
		# Restore all stock data to their original state after all runs
		for stock in self.stocks:
			stock.data = original_stock_data[stock.name].copy()
