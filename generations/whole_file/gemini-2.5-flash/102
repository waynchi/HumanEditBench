import numpy as np

INPUT_FILE_PATH = './input.txt'
INPUT_FILE_PATH = './example_in.txt'

def main():
    lines = parse_input_file()
    #for l in lines:
    #    print(l)
    
    # Handle empty lines or files gracefully
    if not lines or all(not line.strip() for line in lines):
        print("Input file is empty or contains only blank lines.")
        return

    # Convert lines to a NumPy array of characters
    grid = np.array([list(line) for line in lines if line.strip()])
    
    # Check if the grid is empty after processing
    if grid.size == 0:
        print("Grid is empty after parsing input.")
        return

    print(grid)
    str_to_match = "XMAS"
    count = 0
    # Check horizontally
    for row in grid:
        row_str = ''.join(row)
        count += row_str.count(str_to_match)

    # Check vertically 
    # Ensure there are columns to iterate over
    if grid.shape[1] > 0:
        for col in range(grid.shape[1]):
            col_str = ''.join(grid[:,col])
            count += col_str.count(str_to_match)
    else:
        print("Grid has no columns, skipping vertical check.")


    # Check diagonally (top-left to bottom-right)
    # Ensure grid has at least one row and one column for diagonal checks
    if grid.shape[0] > 0 and grid.shape[1] > 0:
        for i in range(-(grid.shape[0]-1), grid.shape[1]):
            diag = np.diagonal(grid, offset=i)
            diag_str = ''.join(diag)
            count += diag_str.count(str_to_match)

        # Check diagonally (top-right to bottom-left)
        flipped_grid = np.fliplr(grid)
        for i in range(-(grid.shape[0]-1), grid.shape[1]):
            diag = np.diagonal(flipped_grid, offset=i)
            diag_str = ''.join(diag)
            count += diag_str.count(str_to_match)
    else:
        print("Grid has no rows or columns, skipping diagonal checks.")


    print(f"Found {count} occurrences of {str_to_match}")

def parse_input_file():
    with open(INPUT_FILE_PATH, 'r') as f:
        # Filter out empty lines to prevent issues with np.array(list(line)) for empty strings
        lines = [line.strip() for line in f.read().split("\n") if line.strip()]
    return lines

if __name__ == "__main__":
    main()