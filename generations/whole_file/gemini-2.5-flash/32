from beem.discussions import Discussions, Query
from beem.comment import Comment

n_respuestas_minimas = 5
diccionario = {}

def procesar (texto: str):
    return "count me " in texto
def is_own_author (autor: str):
    return author == 'subidu'
def is_banned (autor: str):
    list_banned = []
    return autor in list_banned
def generar_permlink_unico () -> str:
    return "".join(random.choices(string.digits, k=10))
def procesar_replies (replies: Comment):
    pass
def preparar_comentario (parent_author: str, parent_permlink: str, permlink: str, title: str = '', author: str = 'subidu' , body: str = 'Count me in ^^ @subidu') -> dict[str:str]:
    return {
        "parent_author": parent_author,
        "parent_permlink": parent_permlink,
        "author": author,
        "permlink": permlink,
        "title": title,
        "body": body,
    }


q = Query()
d = Discussions()
posts_generator = d.get_discussions("created", q, limit=6000)
X = 0

def crear_diccionario_jerarquico(posts_generator):
    diccionario_jerarquico = {}
    for post in posts_generator:
        post_author = post['author']
        post_permlink = post['permlink']
        post_identifier = f"{post_author}/{post_permlink}"
        
        post_data = {
            "author": post_author,
            "permlink": post_permlink,
            "title": post.get('title', ''),
            "body": post.get('body', ''),
            "replies": []
        }
        
        if post['children'] > n_respuestas_minimas:
            comment = Comment(authorperm=post_identifier)
            replies_list = comment.get_replies()
            
            for reply in replies_list:
                reply_author = reply['author']
                reply_permlink = reply['permlink']
                reply_text = reply['body']
                
                reply_data = {
                    "author": reply_author,
                    "permlink": reply_permlink,
                    "body": reply_text
                }
                post_data["replies"].append(reply_data)
        
        diccionario_jerarquico[post_identifier] = post_data
    return diccionario_jerarquico

diccionario_de_posts_y_replies = crear_diccionario_jerarquico(posts_generator)

# El resto del código que utiliza el diccionario si es necesario.
# Por ejemplo, para procesar los datos ya estructurados:
for post_identifier, post_info in diccionario_de_posts_y_replies.items():
    cnt = 0
    X += 1
    if post_info['replies']: # Si hay respuestas en el diccionario
        for reply in post_info['replies']:
            author = reply['author']
            text = reply['body']
            if is_own_author(author):
                # Reevaluar el comentario
                break
            if is_banned(author):
                break
            if procesar(text):
                cnt+= 1
    if cnt > 3:
        print("Iterador: ",X)
        # Aquí reply podría no estar definido si no hay respuestas
        # o si la condición de break se cumple antes de que se use.
        # Es mejor referirse al post_info['replies'] si es necesario.
        # Por ahora, mantendremos la lógica original con un ajuste para que funcione.
        if post_info['replies']: # Asegurarse de que hay al menos una respuesta procesada
            last_processed_reply = reply # La última 'reply' que se procesó en el bucle
            print(last_processed_reply['author'],'/',last_processed_reply['permlink']) 
