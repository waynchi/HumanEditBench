def is_sum_of_four_squares(n):
    if n < 0:
        return False
    # Optimization: Iterate only up to the square root of n for each variable
    # And ensure a <= b <= c <= d to avoid redundant permutations
    # Also, we can pre-calculate squares to speed up the loop
    limit = int(n**0.5)
    squares = [i*i for i in range(limit + 1)]

    for a_val in range(limit + 1):
        a_sq = squares[a_val]
        if a_sq > n:
            break
        for b_val in range(a_val, limit + 1): # Start from a_val to ensure a <= b
            b_sq = squares[b_val]
            if a_sq + b_sq > n:
                break
            for c_val in range(b_val, limit + 1): # Start from b_val to ensure b <= c
                c_sq = squares[c_val]
                target_d_sq = n - (a_sq + b_sq + c_sq)
                if target_d_sq < 0:
                    break
                # Only check for d_val >= c_val
                d_val_approx = int(target_d_sq**0.5)
                if d_val_approx >= c_val and d_val_approx <= limit:
                    if squares[d_val_approx] == target_d_sq:
                        return a_val, b_val, c_val, d_val_approx
    return None

def find_four_squares_sums(limit):
    """
    Finds numbers up to a limit that can be expressed as the sum of four squares
    without any of the squares being zero.
    """
    results = []
    for n in range(1, limit + 1):
        result = is_sum_of_four_squares(n)
        if result:
            a, b, c, d = result
            # We need to consider all permutations and combinations where a, b, c, d are non-zero.
            # The is_sum_of_four_squares function returns smallest valid a, b, c, d
            # We need to ensure NONE of the squares are zero.
            # If the returned (a, b, c, d) has any zero, it means for that n,
            # it might be representable with fewer than 4 non-zero squares.
            if a != 0 and b != 0 and c != 0 and d != 0:
                results.append(n)
    return results

# Example usage:
limit = int(input("Digite o limite superior: "))
sums_found = find_four_squares_sums(limit)
print("Números que podem ser expressos como a soma de quatro quadrados não nulos:")
for num in sums_found:
    result = is_sum_of_four_squares(num)
    a, b, c, d = result
    print(f"{num} = {a}^2 + {b}^2 + {c}^2 + {d}^2")