from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import numpy as np
import matplotlib.pyplot as plt

def cluster_data(features_transformed, cluster_specs, n_clusters=2, clustering_method='kmeans'):
    """
    Выполняет кластеризацию данных независимо для указанных наборов столбцов.

    Args:
        features_transformed (pandas.DataFrame): Преобразованный DataFrame с параметрами.
        cluster_specs (dict): Словарь вида {имя_столбца_с_метками: (col1, col2, ...), ...}.
        n_clusters (int): Количество кластеров для всех наборов признаков.
        clustering_method (str): Метод кластеризации ('kmeans').

    Returns:
        pandas.DataFrame: DataFrame с добавленными столбцами меток кластеров.
    """
    if features_transformed is None:
        print("Сначала выполните преобразование данных (этап 5).")
        return None

    for cluster_feature_name, cols in cluster_specs.items():
        # Проверяем наличие указанных столбцов
        missing = [c for c in cols if c not in features_transformed.columns]
        if missing:
            print(f"Пропущенные столбцы для '{cluster_feature_name}': {missing}. Пропускаем этот кластер.")
            continue

        features = features_transformed[list(cols)].copy()

        if clustering_method == 'kmeans':
            model = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
            cluster_labels = model.fit_predict(features)

            # Оценка качества кластеризации (коэффициент силуэта)
            if len(np.unique(cluster_labels)) > 1:
                silhouette_avg = silhouette_score(features, cluster_labels)
                print(f"Коэффициент силуэта для {n_clusters} кластеров в '{cluster_feature_name}': {silhouette_avg:.4f}")
            else:
                print(f"Невозможно рассчитать коэффициент силуэта для '{cluster_feature_name}' (все точки в одном кластере).")
        else:
            print(f"Неподдерживаемый метод кластеризации: {clustering_method}")
            return None

        features_transformed[cluster_feature_name] = cluster_labels
        print(f"Кластеризация выполнена для '{cluster_feature_name}'. Добавлен столбец меток кластеров.")

    return features_transformed

# Выполнение кластеризации (после этапа 5 и до этапа 6)
if 'features_transformed' in locals() and features_transformed is not None:
    # Задание спецификаций кластеризации: ключи — имена новых столбцов, значения — кортежи столбцов для кластеризации
    cluster_specs = {
        'cluster1': ('column1', 'column2'),
        'cluster2': ('column3',)
    }
    n_clusters = 3  # Количество кластеров (одинаково для всех наборов столбцов)
    features_transformed = cluster_data(features_transformed, cluster_specs, n_clusters)

    # Визуализация кластеров для каждого набора столбцов
    for cf_name, cols in cluster_specs.items():
        numeric_cols = [c for c in cols if np.issubdtype(features_transformed[c].dtype, np.number)]
        if len(numeric_cols) >= 2:
            plt.figure(figsize=(8, 6))
            plt.scatter(
                features_transformed[numeric_cols[0]],
                features_transformed[numeric_cols[1]],
                c=features_transformed[cf_name],
                cmap='viridis'
            )
            plt.xlabel(numeric_cols[0])
            plt.ylabel(numeric_cols[1])
            plt.title(f"Результаты кластеризации '{cf_name}'")
            plt.colorbar(label='Номер кластера')
            plt.show()
        else:
            print(f"Недостаточно числовых признаков для визуализации '{cf_name}'.")
else:
    print("Сначала выполните этап 5 (Преобразование данных).")