import torch
import torch.nn as nn

class SimpleConvNet1(nn.Module):
    def __init__(self, input_shape):  # Принимаем форму входа вместо заранее вычисленного flattened_size
        super(SimpleConvNet1, self).__init__()

        # Первый сверточный блок
        self.conv1 = nn.Sequential(
            nn.Conv2d(input_shape[0], 32, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(2)
        )

        # Второй сверточный блок
        self.conv2 = nn.Sequential(
            nn.Conv2d(32, 64, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(2)
        )

        # Выравнивание перед полносвязными слоями
        self.flatten = nn.Flatten()

        # Автоматический расчет размера фич после сверточных слоев
        with torch.no_grad():
            dummy = torch.zeros(1, *input_shape)
            dummy = self.conv1(dummy)
            dummy = self.conv2(dummy)
            flat_dim = dummy.numel()

        # Полносвязный блок
        self.fc1 = nn.Sequential(
            nn.Linear(flat_dim, 512),
            nn.ReLU(),
            nn.Linear(512, 3)
        )

    def forward(self, x):
        x = self.conv1(x)
        x = self.conv2(x)
        x = self.flatten(x)
        x = self.fc1(x)
        return x