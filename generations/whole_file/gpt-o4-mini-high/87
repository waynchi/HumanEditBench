import tkinter as tk
import random
import math

class Square:
    def __init__(self, canvas, size, x, y):
        self.canvas = canvas
        self.size = size
        self.x = x
        self.y = y
        # choose a random velocity for more visible movement
        self.dx = random.choice([-4, -3, -2, 2, 3, 4])
        self.dy = random.choice([-4, -3, -2, 2, 3, 4])
        # generate a random color for each square
        self.color = "#{:02x}{:02x}{:02x}".format(
            random.randint(0, 255),
            random.randint(0, 255),
            random.randint(0, 255)
        )
        # draw the square with the random color
        self.square = canvas.create_rectangle(
            x, y, x + size, y + size,
            fill=self.color, outline=""
        )

    def move(self):
        # update position
        self.x += self.dx
        self.y += self.dy
        # move on the canvas
        self.canvas.move(self.square, self.dx, self.dy)

        # ensure the canvas has up-to-date size info
        self.canvas.update_idletasks()
        canvas_width = self.canvas.winfo_width()
        canvas_height = self.canvas.winfo_height()

        # check for boundary collision
        if (self.x <= 0 or self.x + self.size >= canvas_width or
            self.y <= 0 or self.y + self.size >= canvas_height):
            # remove this square
            self.canvas.delete(self.square)
            # split into two new squares if still large enough
            if self.size > 10:
                new_size = self.size // 2
                cx = canvas_width // 2
                cy = canvas_height // 2
                offset = new_size // 2
                # top-left new square
                squares.append(Square(
                    self.canvas,
                    new_size,
                    cx - offset,
                    cy - offset
                ))
                # bottom-right new square
                squares.append(Square(
                    self.canvas,
                    new_size,
                    cx + offset,
                    cy + offset
                ))
            return False
        return True

def update():
    global squares
    # move each square; keep only those that didn't split
    squares = [sq for sq in squares if sq.move()]
    # schedule next frame
    root.after(20, update)

# Create main window
root = tk.Tk()
root.title("Splitting Squares")

# Create canvas
canvas = tk.Canvas(root, width=600, height=600, bg="white")
canvas.pack(expand=True, fill="both")

# Create initial square
squares = [Square(canvas, 100, 250, 250)]

# Start animation
update()

# Start main loop
root.mainloop()