import requests #для запроса к API
import xml.etree.ElementTree #для обработки xml-ответа API
import matplotlib.pyplot as plt #для построения графиков
import pandas as pd #для создания датафрейма и разденеия всех свечей на два типа: close и open
import datetime #для дат по оси иксов
import pickle #для хранения переменных в файле
import json

#фак ю нигер
#допиши чтобы set_valutes заполнялось!!! оно факинг нигер и не заполняется


#класс валюта
class valute():
    """Валюта и всё с ней связанное, через ЦБ РФ \n
    Требуются библеотеки: \n
    requests \n
    xml.etree.ElementTree \n
    matplotlib.pyplot as plt \n
    pandas as pd \n
    datetime \n
    pickle \n
    json \n
    """
    def __init__(self, name):
        self.name = name

    async def correct_name(self):
        """Проверка имени валюты на наличие в множестве валют. Множество обновляется не чаще раза в день"""
        # читаем инфо о последней проверке
        with open(r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", "r", encoding="utf-8") as info_file:
            info = json.load(info_file)

        # если с последней проверки прошло больше дня — обновляем список валют
        last_check = datetime.datetime.strptime(info["last_day_check"]["valute"], "%Y-%m-%d %H:%M:%S.%f")
        if datetime.datetime.now() - last_check > datetime.timedelta(days=1):
            set_valutes = set()
            url = "http://www.cbr.ru/scripts/XML_daily.asp"
            import aiohttp
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as resp:
                    content = await resp.read()
            root = xml.etree.ElementTree.fromstring(content)
            for Valute in root.findall("Valute"):
                code = Valute.find("CharCode").text
                set_valutes.add(code)
            # сохраняем обновлённый список
            with open(r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin", "wb") as f:
                pickle.dump(set_valutes, f)
            # обновляем время последней проверки
            info["last_day_check"]["valute"] = str(datetime.datetime.now())
            with open(r"D:\MoexAPI_bot_aiogram3\data_files\Info.json", "w", encoding="utf-8") as info_file:
                json.dump(info, info_file, indent=3, ensure_ascii=False)

        # читаем существующее множество и проверяем валюту
        with open(r"D:\MoexAPI_bot_aiogram3\data_files\set_valutes.bin", "rb") as f:
            set_valutes = pickle.load(f)
        return self.name in set_valutes

    async def CurrentExchangeRate(self):
        '''Текущий курс обмена валюты на рубль'''
        import aiohttp
        async with aiohttp.ClientSession() as session:
            async with session.get("http://www.cbr.ru/scripts/XML_daily.asp") as resp:
                content = await resp.read()
        root = xml.etree.ElementTree.fromstring(content)
        for Valute in root.findall("Valute"):
            for CharCode in Valute.findall("CharCode"):
                if CharCode.text == self.name:
                    return Valute.find("VunitRate").text