import logging
import random
from typing import List, Dict

app = FastAPI()

CHAT_URL = "https://duckduckgo.com/duckchat/v1/chat"
STATUS_URL = "https://duckduckgo.com/duckchat/v1/status"
MODELS = {
    "gpt-4o-mini": {"owned_by": "openai", "is_free": True},
    "llama-3.1-70b": {"owned_by": "Meta", "is_free": True},
    "mixtral-8x7b": {"owned_by": "mistralai", "is_free": True},
    "claude-3-haiku": {"owned_by": "Anthropic", "is_free": False},
}

# Define valid user-agent strings for macOS, Windows, and Linux systems
USER_AGENTS = {
    "mac": [
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1.2 Safari/605.1.15",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 11_2_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36",
    ],
    "win": [
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36",
        "Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Firefox/82.0 Safari/537.36",
    ],
    "linux": [
        "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:85.0) Gecko/20100101 Firefox/85.0",
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.182 Safari/537.36",
    ]
}

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def fetch_vqd() -> Dict[str, str]:
    """Fetch the VQD token and a random user-agent required for authentication."""
    # Randomly select a user-agent from the available choices
    all_user_agents = USER_AGENTS["mac"] + USER_AGENTS["win"] + USER_AGENTS["linux"]
    random_user_agent = random.choice(all_user_agents)

    async with httpx.AsyncClient() as client:
        response = await client.get(
            STATUS_URL,
            headers={
                "User-Agent": random_user_agent,
                "x-vqd-accept": "1",
            },
        )
        if response.status_code != 200:
            logger.error(f"Failed to fetch VQD: {response.status_code}")
            raise HTTPException(status_code=500, detail="Failed to retrieve VQD token")
        
        # Return both the VQD token and the user-agent used
        return {
            "vqd": response.headers.get("x-vqd-4", ""),
            "user-agent": random_user_agent
        }

The updated code adjusts the `fetch_vqd` function to select a random user-agent from defined lists for macOS, Windows, and Linux, and then includes both the VQD token and the chosen user-agent in its return value.