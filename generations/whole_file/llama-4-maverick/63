from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

def cluster_data(features_transformed, cluster_definitions, n_clusters=2, clustering_method='kmeans'):
    """
    Выполняет кластеризацию данных независимо для указанных наборов столбцов.

    Args:
        features_transformed (pandas.DataFrame): Преобразованный DataFrame с параметрами.
        cluster_definitions (dict): Словарь, где ключи - имена новых столбцов, а значения - кортежи или отдельные столбцы для кластеризации.
        n_clusters (int or dict): Количество кластеров для каждого кластера (если dict) или общее количество кластеров (если int).
        clustering_method (str): Метод кластеризации ('kmeans').

    Returns:
        pandas.DataFrame: DataFrame с добавленными столбцами меток кластеров.
    """
    if features_transformed is None:
        print("Сначала выполните преобразование данных (этап 5).")
        return None

    features_for_clustering = features_transformed.copy()

    for cluster_feature_name, columns in cluster_definitions.items():
        if isinstance(columns, str):  # Если передана строка, преобразуем в кортеж
            columns = (columns,)
        
        # Проверка, что все указанные столбцы существуют в DataFrame
        if not all(col in features_for_clustering.columns for col in columns):
            print(f"Не все столбцы {columns} найдены в DataFrame для кластеризации '{cluster_feature_name}'. Пропускаем.")
            continue

        cluster_data_subset = features_for_clustering[list(columns)]

        if clustering_method == 'kmeans':
            # Определение количества кластеров для текущего набора столбцов
            if isinstance(n_clusters, dict):
                current_n_clusters = n_clusters.get(cluster_feature_name, 2)  # По умолчанию 2, если не указано
            else:
                current_n_clusters = n_clusters

            model = KMeans(n_clusters=current_n_clusters, random_state=42, n_init=10)
            cluster_labels = model.fit_predict(cluster_data_subset)
            
            # Оценка качества кластеризации (например, с помощью коэффициента силуэта)
            if len(np.unique(cluster_labels)) > 1: 
                silhouette_avg = silhouette_score(cluster_data_subset, cluster_labels)
                print(f"Коэффициент силуэта для кластера '{cluster_feature_name}' с {current_n_clusters} кластерами: {silhouette_avg:.4f}")
            else:
                print(f"Невозможно рассчитать коэффициент силуэта для кластера '{cluster_feature_name}' с {current_n_clusters} кластером (все точки в одном кластере).")

        else:
            print("Неподдерживаемый метод кластеризации.")
            return None

        features_transformed[cluster_feature_name] = cluster_labels
        print(f"Кластеризация выполнена. Метки кластеров добавлены в столбец '{cluster_feature_name}'.")

    return features_transformed

# Выполнение кластеризации (после этапа 5 и до этапа 6)
if 'features_transformed' in locals() and features_transformed is not None:
    cluster_definitions = {
        'cluster1': ('столбец1', 'столбец2'),
        'cluster2': 'столбец3'
    }  # Определения кластеров
    n_clusters = 3  # Количество кластеров (подберите оптимальное значение)
    features_transformed = cluster_data(features_transformed, cluster_definitions, n_clusters)
    
    # Визуализация кластеров (пример для случая, когда есть 2 числовых признака)
    numerical_features = features_transformed.select_dtypes(include=np.number)
    if numerical_features.shape[1] >= 2:
        plt.figure(figsize=(8, 6))
        # Визуализация для первого кластера
        if 'cluster1' in features_transformed.columns:
            plt.scatter(numerical_features.iloc[:, 0], numerical_features.iloc[:, 1], c=features_transformed['cluster1'], cmap='viridis')
        plt.xlabel(numerical_features.columns[0])
        plt.ylabel(numerical_features.columns[1])
        plt.title('Результаты кластеризации')
        plt.colorbar(label='Номер кластера')
        plt.show()
    else:
        print("Недостаточно числовых признаков для визуализации кластеров на плоскости.")
else:
    print("Сначала выполните этап 5 (Преобразование данных).")