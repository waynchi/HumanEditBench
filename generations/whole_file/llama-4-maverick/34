import math
import numpy as np

class Value:
    """ stores a single scalar value and its gradient """

    def __init__(self, data, _children=(), _op=''):
        self.data = data
        self.grad = 0
        # internal variables used for autograd graph construction
        self._backward = lambda: None
        self._prev = set(_children)
        self._op = _op # the op that produced this node, for graphviz / debugging / etc

    def __add__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data + other.data, (self, other), '+')

        def _backward():
            self.grad += out.grad
            other.grad += out.grad
        out._backward = _backward

        return out

    def __mul__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data * other.data, (self, other), '*')

        def _backward():
            self.grad += other.data * out.grad
            other.grad += self.data * out.grad
        out._backward = _backward

        return out

    def __pow__(self, other):
        assert isinstance(other, (int, float)), "only supporting int/float powers for now"
        out = Value(self.data**other, (self,), f'**{other}')

        def _backward():
            self.grad += (other * self.data**(other-1)) * out.grad
        out._backward = _backward

        return out


    def exp(self):
        print(f'** EXP {self}')
        out = Value(math.exp(self.data), (self,), "e")
        def _backward():
            self.grad += math.exp(self.data) * out.grad
        out._backward = _backward
        
        return out
    
    def log(self):
        out = Value(math.log(self.data), (self,), f'log{self.data}')
        def _backward():
            self.grad += (1 / self.data) * out.grad
        out._backward = _backward       
        
        return out
    
    def relu(self):
        assert isinstance(self.data, (int, float)), "only supporting int/float powers for now"
        out = Value(0 if self.data < 0 else self.data, (self,), 'ReLU')

        def _backward():
            self.grad += (out.data > 0) * out.grad
        out._backward = _backward

        return out
    
    def softmax(self):
        # To handle multiple Value instances, we need to access their data as a numpy array
        # Assuming self is a Value that contains a numpy array or a list of Value instances
        if isinstance(self.data, list):
            values_data = np.array([v.data for v in self.data])
        else:
            values_data = self.data
        
        e_x = np.exp(values_data - np.max(values_data))
        softmax_data = e_x / e_x.sum(axis=0)
        
        if isinstance(self.data, list):
            out = [Value(data, (self,), 'softmax') for data in softmax_data]
        else:
            out = Value(softmax_data, (self,), 'softmax')

        def _backward():
            if isinstance(out, list):
                for i, o in enumerate(out):
                    for j, v in enumerate(self.data):
                        if i == j:
                            v.grad += o.grad * (o.data * (1 - o.data))
                        else:
                            v.grad += o.grad * (-o.data * out[j].data)
            else:
                # Handle the case when self.data is not a list but a numpy array or a single value
                # This requires a different implementation depending on the exact requirements
                # For simplicity, let's assume it's a numpy array
                for i in range(len(self.data)):
                    for j in range(len(self.data)):
                        if i == j:
                            self.grad += out.grad[i] * (out.data[i] * (1 - out.data[i]))
                        else:
                            self.grad += out.grad[i] * (-out.data[i] * out.data[j])
        if isinstance(out, list):
            for o in out:
                o._backward = _backward
        else:
            out._backward = _backward

        return out

    def backward(self):

        # topological order all of the children in the graph
        topo = []
        visited = set()
        def build_topo(v):
            if v not in visited:
                visited.add(v)
                for child in v._prev:
                    build_topo(child)
                topo.append(v)
        build_topo(self)

        # go one variable at a time and apply the chain rule to get its gradient
        self.grad = 1
        for v in reversed(topo):
            v._backward()

    def __neg__(self): # -self
        return self * -1
    def __gt__(self, other):
        return self.data > other.data

    def __radd__(self, other): # other + self
        return self + other

    def __sub__(self, other): # self - other
        return self + (-other)

    def __rsub__(self, other): # other - self
        return other + (-self)

    def __rmul__(self, other): # other * self
        return self * other

    def __truediv__(self, other): # self / other
        return self * other**-1

    def __rtruediv__(self, other): # other / self
        return other * self**-1

    def __repr__(self):
        return f"Value(data={self.data}, grad={self.grad})"