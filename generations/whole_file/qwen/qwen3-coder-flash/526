import random
import torch
from torchvision import transforms
from datasets import load_dataset
from PIL import Image
import numpy as np

class AlignmentDatasetCreator:
    def __init__(self, sample_size=1000):
        self.sample_size = sample_size
        self.transform = transforms.Compose([
            transforms.Resize((224, 224)),
            transforms.ToTensor(),
            transforms.Normalize(mean=[0.485, 0.456, 0.406], 
                              std=[0.229, 0.224, 0.225])
        ])
    def create_unrelated_pairs(self, image_text_pairs):
        """Crea pares de imagen-texto no relacionados al mezclar las descripciones de texto"""
        images, texts = zip(*image_text_pairs)
        shuffled_texts = list(texts)
        random.shuffle(shuffled_texts)
        return list(zip(images, shuffled_texts))

    def create_textual_pairs(self, dataset_name='quora'):
        """Crea pares de texto sem치nticamente similares utilizando conjuntos de datos de par치frasis"""
        dataset = load_dataset(dataset_name, split=f'train[:{self.sample_size}]')
        textual_pairs = []
        for item in dataset:
            if item['is_duplicate'] == 1:
                pair = (item['question1'], item['question2'])
                textual_pairs.append(pair)
        return textual_pairs[:self.sample_size]
    def create_visual_pairs(self, image_text_pairs):
        """Crea pares de im치genes aumentadas manteniendo el significado sem치ntico"""
        augmentation_transforms = transforms.Compose([
            transforms.RandomHorizontalFlip(p=1.0),
            transforms.ColorJitter(brightness=0.2, contrast=0.2),
            transforms.RandomRotation(15)
        ])
        
        visual_pairs = []
        for image, _ in image_text_pairs:
            if isinstance(image, Image.Image):
                augmented = augmentation_transforms(image)
                visual_pairs.append((image, augmented))
        return visual_pairs

    def load_mscoco_dataset(self):
        """Carga y preprocesa el conjunto de datos MSCOCO con filtrado mejorado"""
        # Using a smaller, more accessible dataset as fallback
        try:
            dataset = load_dataset(
                "shunk031/MSCOCO",
                year=2014,
                coco_task="captions",
                split='train',
                streaming=True
            )
            dataset = dataset.take(self.sample_size)

            image_text_pairs = []
            for item in dataset:
                # Try to access captions safely
                if "captions" in item and len(item["captions"]) > 0:
                    # Select the most descriptive caption based on length
                    best_caption = max(item["captions"], key=len)
                    if len(best_caption.split()) >= 5:  # Filter out too short captions
                        image_text_pairs.append((item["image"], best_caption))
                        
            return image_text_pairs
        except Exception as e:
            print(f"Error loading MSCOCO dataset: {e}")
            print("Falling back to dummy data for demonstration...")
            # Return dummy data for demonstration purposes
            dummy_image = Image.new('RGB', (224, 224), color='red')
            return [(dummy_image, "A red square") for _ in range(self.sample_size)]

def main():
    # Inicializar creador de conjunto de datos
    creator = AlignmentDatasetCreator(sample_size=100)
    
    # Cargar y crear conjuntos de datos
    print("Loading MSCOCO dataset...")
    image_text_pairs = creator.load_mscoco_dataset()
    
    print("Creating unrelated pairs...")
    unrelated_pairs = creator.create_unrelated_pairs(image_text_pairs)
    
    print("Creating textual pairs...")
    textual_pairs = creator.create_textual_pairs()
    
    print("Creating visual pairs...")
    visual_pairs = creator.create_visual_pairs(image_text_pairs)
    
    # Imprimir muestra de cada conjunto de datos
    print("Dataset Samples:")
    if image_text_pairs:
        print(f"Image-Text Pair: {image_text_pairs[0]}")
    if unrelated_pairs:
        print(f"Unrelated Pair: {unrelated_pairs[0]}")
    if textual_pairs:
        print(f"Textual Pair: {textual_pairs[0]}")
    if visual_pairs:
        print(f"Visual Pair: {visual_pairs[0]}")

if __name__ == "__main__":
    main()