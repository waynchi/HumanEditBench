plik = open("dane_obrazki.txt")
maxbitybledne = 0
bityBledne = list()
def czyPoprawny(obrazek): # obrzek zawiera liste łancuchów znaków  i można korzystać z operatora balicowego
                            # obrazek[i][j]
    for wiersz in obrazek[:-1]: # nie liczymy z ostaniego wiersza tam są bity parzystosci
        if wiersz[:-1].count('1') % 2 != int(wiersz[-1]):
            return False
    for i in range(20): # i = 0,1,2,3,4,5,6,7..19
        kolumna = ""
        for j in range(21):  # j = 0,1,2,3,4,5,..20
            kolumna+=obrazek[j][i]
        if kolumna[:-1].count('1')% 2 != int(kolumna[-1]):
            return False
    return True

def czyNaprawialny(obrazek):
    bityKolBleden = 0
    bityWierBledne = 0
    for wiersz in obrazek[:-1]: # nie liczymy z ostaniego wiersza tam są bity parzystosci
        if wiersz[:-1].count('1') % 2 != int(wiersz[-1]):
            bityWierBledne+=1
    for i in range(20): # i = 0,1,2,3,4,5,6,7..19
        kolumna = ""
        for j in range(21):  # j = 0,1,2,3,4,5,..20
            kolumna+=obrazek[j][i]
        if kolumna[:-1].count('1')% 2 != int(kolumna[-1]):
           bityKolBleden+=1
    global maxbitybledne
    if maxbitybledne<(bityKolBleden+bityWierBledne):
        maxbitybledne = bityKolBleden+bityWierBledne
    bityBledne.append(bityKolBleden+bityWierBledne)

    if bityWierBledne >1 :
        return False
    if bityKolBleden > 1:
        return False

    return True

def napraw(obrazek):
    """Wejście stanowi plik tekstowy zawierający dane czarnobiałego obrazka zakodowane jak piksele.
0 - piksel biały 1 - piksel czarny. 
Każdy wiersz oraz kolumna zwiera na swoim końcu bit parzystości . 
Bit parzystości jest równy 0, jeśli ilość jedynek w wierszy (lub w kolumnie dla kolumn) jest parzysta a 
1 jeśli jest nieparzysta.
np.
0 1 1 0 1 1 bit błędny należy zmienić go na przeciwny
1 1 1 0 1 0
1 1 1 1 1 1
0 1 1 0 0 0
1 1 0 1 1 0
1 1 0 0 0 - bity parzystości kolumny 
 ^
 |- bity parzystości wiersza
Napisz funkcje który znajdzie uszkodzone obrazki oraz je naprawi . tzn Jest to obrazek naprawialny ( 
posiada co najwyżej jeden bit parzystości wiersza i co najwyżej jeden bit parzystości kolumny 
niepoprawny ) a następnie naprawi te obrazy 
Wynik ma zawierać obrazek błędny(naprawialny) oraz obrazek poprawiony"""
    
    # Znajdujemy indeksy błędnych wierszy i kolumn
    bledne_wiersze = []
    bledne_kol = []
    
    # Sprawdzamy błędy w wierszach
    for i, wiersz in enumerate(obrazek[:-1]):
        if wiersz[:-1].count('1') % 2 != int(wiersz[-1]):
            bledne_wiersze.append(i)
    
    # Sprawdzamy błędy w kolumnach
    for i in range(20):
        kolumna = ""
        for j in range(21):
            kolumna += obrazek[j][i]
        if kolumna[:-1].count('1') % 2 != int(kolumna[-1]):
            bledne_kol.append(i)
    
    # Tworzymy kopię obrazka do naprawy
    naprawiony_obrazek = [wiersz[:] for wiersz in obrazek]
    
    # Naprawiamy obrazek - zmieniamy odpowiedni bit parzystości (błąd w wierszu lub kolumnie)
    if len(bledne_wiersze) == 1 and len(bledne_kol) == 1:
        # Jeden błąd w wierszu i jeden w kolumnie - przecięcie punktu
        wiersz_index = bledne_wiersze[0]
        kol_index = bledne_kol[0]
        # Odwracamy bit w miejscu przecięcia
        aktualny_bit = naprawiony_obrazek[wiersz_index][kol_index]
        nowy_bit = '0' if aktualny_bit == '1' else '1'
        nowy_wiersz = naprawiony_obrazek[wiersz_index][:kol_index] + nowy_bit + naprawiony_obrazek[wiersz_index][kol_index+1:]
        naprawiony_obrazek[wiersz_index] = nowy_wiersz
        
        # Aktualizujemy bity parzystości dla zmienionego wiersza i kolumny
        # Wiersz
        wiersz_bez_bitu = naprawiony_obrazek[wiersz_index][:-1]
        suma_jedynek = wiersz_bez_bitu.count('1')
        nowy_bit_parzystosci = str(suma_jedynek % 2)
        naprawiony_obrazek[wiersz_index] = wiersz_bez_bitu + nowy_bit_parzystosci
        
        # Kolumna
        kolumna = ""
        for j in range(21):
            kolumna += naprawiony_obrazek[j][kol_index]
        kolumna_bez_bitu = kolumna[:-1]
        suma_jedynek = kolumna_bez_bitu.count('1')
        nowy_bit_parzystosci = str(suma_jedynek % 2)
        for j in range(21):
            if j == 20:  # ostatni wiersz jest już koniec
                break
            aktualny_wiersz = naprawiony_obrazek[j]
            nowy_wiersz = aktualny_wiersz[:kol_index] + nowy_bit_parzystosci + aktualny_wiersz[kol_index+1:]
            naprawiony_obrazek[j] = nowy_wiersz
    
    elif len(bledne_wiersze) == 1 and len(bledne_kol) == 0:
        # Błąd tylko w jednym wierszu
        wiersz_index = bledne_wiersze[0]
        # Odwracamy bit parzystości w tym wierszu
        nowy_bit = '0' if obrazek[wiersz_index][-1] == '1' else '1'
        nowy_wiersz = obrazek[wiersz_index][:-1] + nowy_bit
        naprawiony_obrazek[wiersz_index] = nowy_wiersz
        
    elif len(bledne_wiersze) == 0 and len(bledne_kol) == 1:
        # Błąd tylko w jednej kolumnie
        kol_index = bledne_kol[0]
        # Odwracamy bit parzystości w tej kolumnie
        kolumna = ""
        for j in range(21):
            kolumna += obrazek[j][kol_index]
        
        nowy_bit = '0' if obrazek[20][kol_index] == '1' else '1'  # 20-ta linia to bity parzystości
        
        # Zmieniamy odpowiedni bit w kolumnie
        for j in range(20):
            aktualny_wiersz = naprawiony_obrazek[j]
            nowy_wiersz = aktualny_wiersz[:kol_index] + nowy_bit + aktualny_wiersz[kol_index+1:]
            naprawiony_obrazek[j] = nowy_wiersz
            
        # Ustawiamy poprawny bit parzystości w kolumnie
        kolumna_bez_bitu = kolumna[:-1]
        suma_jedynek = kolumna_bez_bitu.count('1')
        nowy_bit_parzystosci = str(suma_jedynek % 2)
        # Wstawiamy bit parzystości w odpowiednie miejsce w ostatnim wierszu
        ostatni_wiersz = naprawiony_obrazek[20]
        nowy_ostatni_wiersz = ostatni_wiersz[:kol_index] + nowy_bit_parzystosci + ostatni_wiersz[kol_index+1:]
        naprawiony_obrazek[20] = nowy_ostatni_wiersz
        
    wynik = list()
    wynik.append(obrazek)
    wynik.append(naprawiony_obrazek)
    return wynik

poprawne = 0
naprawialne = 0
obrazek = list()
for linia in plik:
    wiersz = linia.strip() # odcinamy białe znaki np enter
   # wiersz = wiersz[:-1]  # tylko dane obrazka bez bitu parzystosci  teraz czytamy cala wiersz danych
    obrazek.append(wiersz)
    if len(obrazek) == 21: # mamy 21 lini czyli cały obrazek razem z wierszam bitów parzystosci
        if czyPoprawny(obrazek):
            poprawne+=1
        elif czyNaprawialny(obrazek):
            naprawialne+=1
            naprawiony = napraw(obrazek)


    if len(obrazek) == 22:  # po 22 lini czyscimy obrazek by czytać wiersze nastepnego obrazka
        obrazek = list()

print(poprawne,naprawialne,200-poprawne-naprawialne)
print(maxbitybledne,max(bityBledne))