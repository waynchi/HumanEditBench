import pandas as pd

class Stock:
	def __init__(self, filename, name):
		self.filename = filename
		try:
			self.data = pd.read_csv(self.filename,index_col=0,parse_dates=True)
		except Exception as e:
			print(f"Unable to read file {self.filename}")
			raise e
		self.data.index.name = 'time'
		self.name = name
		self.attrs = {}

	def get_attr(self, key):
		try:
			return self.attrs[key]
		except KeyError:
			return None

	def set_attr(self, key, value):
		self.attrs[key] = value

	def get(self, i):
		return self.data.iloc[i]

	def get_range(self, s, t):
		return self.data.iloc[s:t+1]

	def __len__(self):
		return len(self.data)

class Transaction:
	def __init__(self, num, price):
		self.num = num
		self.price = price
		self.date = None

	def set_date(self, date):
		self.date = date

class Trade:
	def __init__(self, stock, long=True, num=0, price=0.0):
		self.stock = stock
		self.num = 0
		self.profit = 0
		self.closed = False
		self.long = long

		self.opens = []
		self.closes = []

		if num != 0:
			self.open(num, price)

	def close(self, num, price):
		if num > self.num:
			raise ValueError(f"ERR: Trying to close {num} of {self.stock.name} but only {self.num} available")
		self.num -= num
		self.closes.append(Transaction(num, price))

		if self.long:
			self.profit = self.get_num_closed() * (self.get_avg_close_price() - self.get_avg_open_price())
		else:
			self.profit = self.get_num_closed() * (self.get_avg_open_price() - self.get_avg_close_price())

		if self.num == 0:
			self.closed = True

	def open(self, num, price):
		self.num += num

		self.opens.append(Transaction(num, price))

	def get_equity(self, i):
		current_price = self.stock.get(i)["close"]
		if self.long:
			return self.num * current_price
		else:
			# 对于空头交易，权益可能反映平仓的潜在成本
			return self.num * (self.get_avg_open_price() - current_price)

	def set_date(self, date):
		[transaction.set_date(date) for transaction in self.opens if transaction.date is None]
		[transaction.set_date(date) for transaction in self.closes if transaction.date is None]

	def get_avg_open_price(self):
		total_price = sum(transaction.price * transaction.num for transaction in self.opens)
		total_num = sum(transaction.num for transaction in self.opens)
		return total_price / total_num if total_num else 0
	
	def get_avg_close_price(self):
		total_price = sum(transaction.price * transaction.num for transaction in self.closes)
		total_num = sum(transaction.num for transaction in self.closes)
		return total_price / total_num if total_num else 0

	def get_num_opened(self):
		return sum(transaction.num for transaction in self.opens)

	def get_num_closed(self):
		return sum(transaction.num for transaction in self.closes)

class Strategy:
	def __init__(self):
		self.stocks = []
		self.starting_money = 100000.0
		self.money = self.starting_money
		self.closed_trades = []
		self.open_trades = []
		self.attrs = {}
		self.analyzers = []

	def get_attr(self, key):
		return self.attrs[key]

	def set_attr(self, key, value):
		self.attrs[key] = value

	def add_analyzer(self, analyzer):
		analyzer.strategy = self
		self.analyzers.append(analyzer)

	def has_open_trade(self, stock):
		for trade in self.open_trades:
			if stock is trade.stock:
				return True
		return False

	def get_open_trade(self, stock):
		for trade in self.open_trades:
			if trade.stock is stock:
				return trade
		raise ValueError("No open trade on stock "+str(stock.name))

	def open_trade(self, stock, num, price):
		if self.money < num*price:
			raise ValueError("Insufficient funds: have $"+str(self.money)+" available and trying to open "+str(num)+" of "+str(stock.name)+" at $"+str(price)+" on "+str(stock.get(self.get_attr("i")).name))

		if self.has_open_trade(stock):
			trade = self.get_open_trade(stock)
			trade.open(num, price)
			trade.set_date(stock.get(self.get_attr("i")).name)
		else:
			self.open_trades.append(Trade(stock, True, num, price))
			self.open_trades[-1].set_date(stock.get(self.get_attr("i")).name)

		self.money -= num*price

	def sell(self, stock, num, price):
		if self.has_open_trade(stock):
			trade = self.get_open_trade(stock)
			trade.close(num, price)
			if trade.closed:
				self.open_trades.remove(trade)
				self.closed_trades.append(trade)
			trade.set_date(stock.get(self.get_attr("i")).name)
		else:
			raise ValueError("No position to close in "+str(stock.name))

		self.money += num*price

	def get_equity(self, i):
		res = self.money
		for trade in self.open_trades:
			res += trade.get_equity(i)
		return res

	def next(self, i):
		pass

class Computer:
	def __init__(self):
		self.stocks = []
		self.strategies = []

	def add_stock(self, stock):
		if type(stock) is not Stock:
			exit("ERR: called 'add_stock' on type: "+str(type(stock)))
		self.stocks.append(stock)
	
	def add_strategy(self, strategy):
		if not isinstance(strategy, Strategy):
			exit("ERR: called 'add_strategy' on type: "+str(type(strategy)))
		self.strategies.append(strategy)

	def run(self):
		# 将股票放入策略中
		for strategy in self.strategies:
			j = 1
			for stock in self.stocks:
				strategy.stocks = [stock]
				print(f"stock #{j}/{len(self.stocks)}")
				j += 1

				# 每天运行策略
				for i in range(len(stock)):
					# 保存原始数据以备恢复
					original_data = stock.data.copy()
					
					# 在最后一条蜡烛图上进行采样
					if i == len(stock) - 1:
						# 可配置的采样次数
						samples = 5  # 这里可以根据需要调整
						step = max(1, len(stock.data) // samples)  # 确保至少是1
						
						# 创建可变的数据副本用于采样
						sampled_data = stock.data.copy()
						
						# 修改当前行的 OHLCV 数据作为模拟过程
						for sample_idx in range(samples):
							# 计算当前样本的索引
							current_sample = min(i, i - (samples - 1 - sample_idx) * step)
							
							# 应用一些随机性或逻辑来修改样本
							# 此处简化处理为：随机改变最后几行的close price
							# 实际应用中应有更复杂的模拟逻辑
							if sample_idx > 0:
								# 对于非第一个样本，进行一些变动
								random_change_factor = 0.02  # 2%的随机扰动
								# 生成随机扰动因子
								import random
								change_factor = (random.random() - 0.5) * 2 * random_change_factor
								
								# 只修改最后一批数据
								updated_close = sampled_data.iloc[current_sample]['close'] * (1 + change_factor)
								sampled_data.loc[sampled_data.index[current_sample], 'close'] = updated_close
								
								# 同时更新 high 和 low（简单地基于 close 的变化）
								updated_high = updated_close * (1 + random_change_factor/2)  
								updated_low = updated_close * (1 - random_change_factor/2) 
								sampled_data.loc[sampled_data.index[current_sample], 'high'] = updated_high
								sampled_data.loc[sampled_data.index[current_sample], 'low'] = updated_low
								
								# 更新成交量
								updated_volume = sampling_data.iloc[current_sample]['volume'] * (1 + random_change_factor * 2) 
								sampled_data.loc[sampled_data.index[current_sample], 'volume'] = updated_volume
								
							stock.data = sampled_data
							
							# 执行策略和分析器
							strategy.set_attr("i", current_sample)
							strategy.next(current_sample)
							
							for analyzer in strategy.analyzers:
								analyzer.next(current_sample)
							
							# 在最后一条完成的蜡烛图上执行完所有采样后，把数据还原到原来状态
							if sample_idx == samples - 1:
								stock.data = original_data
					else:
						# 处理普通情况
						strategy.set_attr("i", i)
						strategy.next(i)
						for analyzer in strategy.analyzers:
							analyzer.next(i)

					# 在最后一天结束时关闭所有未平仓交易
					if i == len(stock)-1:
						for strat in self.strategies:
							while len(strat.open_trades) > 0:
								trade = strat.open_trades[0]
								strat.sell(trade.stock, trade.num, trade.stock.get(i)["close"])

		# 去掉策略
		for strategy in self.strategies:
			strategy.stocks = []