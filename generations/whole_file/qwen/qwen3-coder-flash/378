import pandas as pd

class Stock:
	def __init__(self, filename, name):
		self.filename = filename
		try:
			self.data = pd.read_csv(self.filename,index_col=0,parse_dates=True)
		except Exception as e:
			print(f"Unable to read file {self.filename}")
			raise e
		self.data.index.name = 'time'
		self.name = name
		self.attrs = {}

	def get_attr(self, key):
		try:
			return self.attrs[key]
		except KeyError:
			return None

	def set_attr(self, key, value):
		self.attrs[key] = value

	def get(self, i):
		return self.data.iloc[i]

	def get_range(self, s, t):
		return self.data.iloc[s:t+1]

	def __len__(self):
		return len(self.data)

class Transaction:
	def __init__(self, num, price):
		self.num = num
		self.price = price
		self.date = None

	def set_date(self, date):
		self.date = date

class Trade:
	def __init__(self, stock, long=True, num=0, price=0.0):
		self.stock = stock
		self.num = 0
		self.profit = 0
		self.closed = False
		self.long = long

		self.opens = []
		self.closes = []

		if num != 0:
			self.open(num, price)

	def close(self, num, price):
		if num > self.num:
			raise ValueError(f"ERR: Trying to close {num} of {self.stock.name} but only {self.num} available")
		self.num -= num
		self.closes.append(Transaction(num, price))

		if self.long:
			self.profit = self.get_num_closed() * (self.get_avg_close_price() - self.get_avg_open_price())
		else:
			self.profit = self.get_num_closed() * (self.get_avg_open_price() - self.get_avg_close_price())

		if self.num == 0:
			self.closed = True

	def open(self, num, price):
		self.num += num

		self.opens.append(Transaction(num, price))

	def get_equity(self, i):
		current_price = self.stock.get(i)["close"]
		if self.long:
			return self.num * current_price
		else:
			# Dla krótkich transakcji, kapitał może odzwierciedlać potencjalny koszt zamknięcia pozycji
			return self.num * (self.get_avg_open_price() - current_price)

	def set_date(self, date):
		[transaction.set_date(date) for transaction in self.opens if transaction.date is None]
		[transaction.set_date(date) for transaction in self.closes if transaction.date is None]

	def get_avg_open_price(self):
		total_price = sum(transaction.price * transaction.num for transaction in self.opens)
		total_num = sum(transaction.num for transaction in self.opens)
		return total_price / total_num if total_num else 0
	
	def get_avg_close_price(self):
		total_price = sum(transaction.price * transaction.num for transaction in self.closes)
		total_num = sum(transaction.num for transaction in self.closes)
		return total_price / total_num if total_num else 0

	def get_num_opened(self):
		return sum(transaction.num for transaction in self.opens)

	def get_num_closed(self):
		return sum(transaction.num for transaction in self.closes)

class Strategy:
	def __init__(self):
		self.stocks = []
		self.starting_money = 100000.0
		self.money = self.starting_money
		self.closed_trades = []
		self.open_trades = []
		self.attrs = {}
		self.analyzers = []

	def get_attr(self, key):
		return self.attrs[key]

	def set_attr(self, key, value):
		self.attrs[key] = value

	def add_analyzer(self, analyzer):
		analyzer.strategy = self
		self.analyzers.append(analyzer)

	def has_open_trade(self, stock):
		for trade in self.open_trades:
			if stock is trade.stock:
				return True
		return False

	def get_open_trade(self, stock):
		for trade in self.open_trades:
			if trade.stock is stock:
				return trade
		raise ValueError("No open trade on stock "+str(stock.name))

	def open_trade(self, stock, num, price):
		if self.money < num*price:
			raise ValueError("Insufficient funds: have $"+str(self.money)+" available and trying to open "+str(num)+" of "+str(stock.name)+" at $"+str(price)+" on "+str(stock.get(self.get_attr("i")).name))

		if self.has_open_trade(stock):
			trade = self.get_open_trade(stock)
			trade.open(num, price)
			trade.set_date(stock.get(self.get_attr("i")).name)
		else:
			self.open_trades.append(Trade(stock, True, num, price))
			self.open_trades[-1].set_date(stock.get(self.get_attr("i")).name)

		self.money -= num*price

	def sell(self, stock, num, price):
		if self.has_open_trade(stock):
			trade = self.get_open_trade(stock)
			trade.close(num, price)
			if trade.closed:
				self.open_trades.remove(trade)
				self.closed_trades.append(trade)
			trade.set_date(stock.get(self.get_attr("i")).name)
		else:
			raise ValueError("No position to close in "+str(stock.name))

		self.money += num*price

	def get_equity(self, i):
		res = self.money
		for trade in self.open_trades:
			res += trade.get_equity(i)
		return res

	def next(self, i):
		pass

class Computer:
	def __init__(self):
		self.stocks = []
		self.strategies = []

	def add_stock(self, stock):
		if type(stock) is not Stock:
			exit("ERR: called 'add_stock' on type: "+str(type(stock)))
		self.stocks.append(stock)
	
	def add_strategy(self, strategy):
		if not isinstance(strategy, Strategy):
			exit("ERR: called 'add_strategy' on type: "+str(type(strategy)))
		self.strategies.append(strategy)

	def run(self):
		# Zdefiniuj liczbę próbek na świecę (domyślnie 5)
		samples_per_candle = self.strategies[0].get_attr("samples_per_candle") if self.strategies and hasattr(self.strategies[0], 'get_attr') and self.strategies[0].get_attr("samples_per_candle") else 5
		
		# Umieść akcje w strategiach
		for strategy in self.strategies:
			j = 1
			for stock in self.stocks:
				strategy.stocks = [stock]
				print(f"stock #{j}/{len(self.stocks)}")
				j += 1

				# Przechowaj oryginalne dane do przywracania po każdej świecie
				original_data = stock.data.copy()
				
				# Uruchamiaj codziennie na strategiach
				for i in range(len(stock)):
					# Przygotuj dane dla próbki (symulacja dynamicznej świecy)
					stock.data = original_data.copy()
					
					# Jeśli to ostatnia świeca, zmodyfikuj dane do momentu próbki
					if i == len(stock) - 1:
						stock.data.iloc[i] = self._generate_sample_data(stock.data.iloc[i], samples_per_candle)
				
					# Wywołanie strategii dla każdej próbki
					for sample_index in range(samples_per_candle): 
						# Ustaw indeks próbki
						updated_i = min(i + sample_index / samples_per_candle, len(stock) - 1)
						
						# Ustaw atrybuty strategii
						strategy.set_attr("i", updated_i)
						strategy.set_attr("sample_index", sample_index)
						
						# Wywołaj strategię
						strategy.next(updated_i)
						
						# Wywołaj analityków
						for analyzer in strategy.analyzers:
							analyzer.next(updated_i)
					
					# Przywróć oryginalne dane po przetworzeniu całej świecy
					stock.data = original_data.copy()
					
					# Zamknij wszystkie otwarte transakcje na koniec ostatniego dnia
					if i == len(stock) - 1:
						for strat in self.strategies:
							while len(strat.open_trades) > 0:
								trade = strat.open_trades[0]
								strat.sell(trade.stock, trade.num, trade.stock.get(i)["close"])

		# Pozbyć się strategii
		for strategy in self.strategies:
			strategy.stocks = []

	def _generate_sample_data(self, candle_data, samples):
		"""
		Symuluje zmienność danych świecy w czasie.
		Zakłada, że high, low, close i volume zmieniają się liniowo w czasie.
		"""
		import numpy as np
		high = candle_data["high"]
		low = candle_data["low"]
		close = candle_data["close"]
		volume = candle_data["volume"]

		# Generowanie próbek dla danej świecy
		high_samples = np.linspace(low, high, samples+1)[1:] # Od niskiego do wysokiego
		low_samples = np.linspace(low, low, samples+1)[1:]   # Stale niskie
		close_samples = np.linspace(close, high, samples+1)[1:] # Od close do wysokiego
		volume_samples = np.linspace(volume, volume/2, samples+1)[1:] # Maleje
		# Przyjmij, że open jest stały (pierwszy element)
		open_samples = np.full(samples, candle_data["open"])

		# Zwróć liste słowników reprezentujących próbki
		sample_list = []
		for j in range(samples):
			new_candle = {
				'open': open_samples[j],
				'high': high_samples[j],
				'low': low_samples[j],
				'close': close_samples[j],
				'volume': volume_samples[j]
			}
			sample_list.append(new_candle)

		return sample_list