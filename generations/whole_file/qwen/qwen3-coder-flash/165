import math
import numpy as np
class Value:
    """存储单个标量值及其梯度"""

    def __init__(self, data, _children=(), _op=''):
        self.data = data
        self.grad = 0
        # 用于自动微分图构建的内部变量
        self._backward = lambda: None
        self._prev = set(_children)
        self._op = _op # 生成此节点的操作，用于 graphviz / 调试 / 等等。

    def __add__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data + other.data, (self, other), '+')

        def _backward():
            self.grad += out.grad
            other.grad += out.grad
        out._backward = _backward

        return out

    def __mul__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data * other.data, (self, other), '*')

        def _backward():
            self.grad += other.data * out.grad
            other.grad += self.data * out.grad
        out._backward = _backward

        return out

    def __pow__(self, other):
        assert isinstance(other, (int, float)), "only supporting int/float powers for now"
        out = Value(self.data**other, (self,), f'**{other}')

        def _backward():
            self.grad += (other * self.data**(other-1)) * out.grad
        out._backward = _backward

        return out

    def exp(self):
        print(f'** EXP {self}')
        out = Value(math.exp(self.data), (self,), "e")
        def _backward():
            self.grad += math.exp(self.data) * out.grad
        out._backward = _backward
        
        return out
    
    def log(self):
        out = Value(math.log(self.data), (self,), f'log{self.data}')
        def _backward():
            self.grad += 1 / self.data
        out._backward = _backward       
        
        return out
    
    def relu(self):
        assert isinstance(self.data, (int, float)), "only supporting int/float powers for now"
        out = Value(0 if self.data < 0 else self.data, (self,), 'ReLU')

        def _backward():
            self.grad += (out.data > 0) * out.grad
        out._backward = _backward

        return out
    
    def softmax(self):
        # 假设self是向量，计算softmax
        max_val = max(self.data) if isinstance(self.data, list) else self.data
        exp_vals = [math.exp(x - max_val) for x in self.data] if isinstance(self.data, list) else [math.exp(self.data - max_val)]
        sum_exp = sum(exp_vals)
        softmax_vals = [x / sum_exp for x in exp_vals]
        
        out = Value(softmax_vals if isinstance(self.data, list) else softmax_vals[0], (self,), 'softmax')
        
        def _backward():
            # Softmax的梯度计算比较复杂，这里简化处理
            if isinstance(self.data, list):
                # 对于向量情况，需要更复杂的梯度计算
                for i in range(len(self.data)):
                    self.grad += out.grad * softmax_vals[i] * (out.grad[i] - sum(out.grad * softmax_vals))
            else:
                # 标量情况
                self.grad += out.grad * softmax_vals * (1 - softmax_vals)
        out._backward = _backward
        
        return out
    
    def backward(self):

        # 对图中所有子节点进行拓扑排序
        topo = []
        visited = set()
        def build_topo(v):
            if v not in visited:
                visited.add(v)
                for child in v._prev:
                    build_topo(child)
                topo.append(v)
        build_topo(self)

        # 逐个变量应用链式法则以获得其梯度
        self.grad = 1
        for v in reversed(topo):
            v._backward()

    def __neg__(self): # -自我
        return self * -1
    def __gt__(self, other):
        return self.data > other.data

    def __radd__(self, other): # 其他 + 自身
        return self + other

    def __sub__(self, other): # self - other
        return self + (-other)

    def __rsub__(self, other): # 其他 - self
        return other + (-self)

    def __rmul__(self, other): # 其他 * self
        return self * other

    def __truediv__(self, other): # self / other
        return self * other**-1

    def __rtruediv__(self, other): # 其他 / self
        return other * self**-1

    def __repr__(self):
        return f"Value(data={self.data}, grad={self.grad})"