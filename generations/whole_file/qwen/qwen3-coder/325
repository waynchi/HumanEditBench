Looking at the error, the issue is that `grid.shape[1]` is trying to access the second dimension of the shape tuple, but the array appears to be 1-dimensional when created from the input lines. This happens when the input file is empty or when there are issues with the array creation.

The fix is to ensure we're working with a 2D array by converting each line into a list of characters, and also adding proper error handling to avoid the IndexError.
python
import numpy as np

INPUT_FILE_PATH = './input.txt'
INPUT_FILE_PATH = './example_in.txt'

def main():
    lines = parse_input_file()
    # для l в lines:
    # напечатать(l)
    grid = np.array([list(line) for line in lines if line])
    print(grid)
    str_to_match = "XMAS"
    count = 0
    # Проверить по горизонтали
    for row in grid:
        row_str = ''.join(row)
        count += row_str.count(str_to_match)

    # Проверить по вертикали
    if grid.size > 0 and len(grid.shape) > 1:
        for col in range(grid.shape[1]):
            col_str = ''.join(grid[:,col])
            count += col_str.count(str_to_match)

    # Проверка по диагонали (сверху слева вниз направо)
    if grid.size > 0 and len(grid.shape) > 1:
        for i in range(-(grid.shape[0]-1), grid.shape[1]):
            diag = np.diagonal(grid, offset=i)
            diag_str = ''.join(diag)
            count += diag_str.count(str_to_match)

    # Проверка по диагонали (сверху справа вниз влево)
    if grid.size > 0 and len(grid.shape) > 1:
        flipped_grid = np.fliplr(grid)
        for i in range(-(grid.shape[0]-1), grid.shape[1]):
            diag = np.diagonal(flipped_grid, offset=i)
            diag_str = ''.join(diag)
            count += diag_str.count(str_to_match)

    print(f"Found {count} occurrences of {str_to_match}")

def parse_input_file():
    with open(INPUT_FILE_PATH, 'r') as f:
        lines = f.read().split("\n")
    return lines

if __name__ == "__main__":
    main()