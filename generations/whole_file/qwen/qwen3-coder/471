import math
import numpy as np

class Value:
    """almacena un único valor escalar y su gradiente"""

    def __init__(self, data, _children=(), _op=''):
        self.data = data
        self.grad = 0
        # variables internas utilizadas para la construcción del gráfico de autograd
        self._backward = lambda: None
        self._prev = set(_children)
        self._op = _op # la operación que produjo este nodo, para graphviz / depuración / etc

    def __add__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data + other.data, (self, other), '+')

        def _backward():
            self.grad += out.grad
            other.grad += out.grad
        out._backward = _backward

        return out

    def __mul__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data * other.data, (self, other), '*')

        def _backward():
            self.grad += other.data * out.grad
            other.grad += self.data * out.grad
        out._backward = _backward

        return out

    def __pow__(self, other):
        assert isinstance(other, (int, float)), "only supporting int/float powers for now"
        out = Value(self.data**other, (self,), f'**{other}')

        def _backward():
            self.grad += (other * self.data**(other-1)) * out.grad
        out._backward = _backward

        return out


        print(f'** EXP {self}')
        out = Value(math.exp(self.data), (self,), "e")
        def _backward():
            self.grad += math.exp(self.data) * out.grad
        out._backward = _backward
        
        return out
    
    def log(self):
        out = Value(math.log(self.data), (self,), f'log{self.data}')
        def _backward():
            self.grad += 1 / self.data
        out._backward = _backward       
        
        return out
    
    def relu(self):
        assert isinstance(self.data, (int, float)), "only supporting int/float powers for now"
        out = Value(0 if self.data < 0 else self.data, (self,), 'ReLU')

        def _backward():
            self.grad += (out.data > 0) * out.grad
        out._backward = _backward

        return out
    
    def softmax(self, other_values):
        # Collect all values including self
        values = [self] + other_values
        # Compute softmax in a numerically stable way
        max_val = max(v.data for v in values)
        exp_values = [math.exp(v.data - max_val) for v in values]
        sum_exp = sum(exp_values)
        softmax_values = [ev / sum_exp for ev in exp_values]
        
        # Create output for self's softmax
        out = Value(softmax_values[0], tuple(values), 'softmax')
        
        def _backward():
            # Derivative of softmax: yi * (delta_ij - yj) where yi is output of neuron i
            # For self with respect to itself: yi * (1 - yi)
            # For self with respect to other j: -yi * yj
            
            # Since we're computing gradient for the entire softmax operation,
            # we need to consider the gradients from all outputs
            for i, vi in enumerate(values):
                gradient_contribution = 0
                for j, vj in enumerate(values):
                    # Get the softmax output values (which are stored in the downstream nodes)
                    # This is a simplification - in practice the softmax would create multiple outputs
                    yi = softmax_values[i]
                    yj = softmax_values[j]
                    
                    if i == j:
                        kronecker_delta = 1
                    else:
                        kronecker_delta = 0
                    
                    # This assumes that all softmax outputs contribute equally to the final loss
                    # In a real implementation, the downstream gradient would be provided
                    downstream_grad = 1  # This would normally come from the loss function
                    gradient_contribution += yi * (kronecker_delta - yj) * downstream_grad
                
                vi.grad += gradient_contribution
        
        out._backward = _backward
        return out

    def backward(self):

        # orden topológico de todos los hijos en el grafo
        topo = []
        visited = set()
        def build_topo(v):
            if v not in visited:
                visited.add(v)
                for child in v._prev:
                    build_topo(child)
                topo.append(v)
        build_topo(self)

        # ir una variable a la vez y aplicar la regla de la cadena para obtener su gradiente
        self.grad = 1
        for v in reversed(topo):
            v._backward()

    def __neg__(self): # -self
        return self * -1
    def __gt__(self, other):
        return self.data > other.data

    def __radd__(self, other): # otro + self
        return self + other

    def __sub__(self, other): # self - otro
        return self + (-other)

    def __rsub__(self, other): # otro - self
        return other + (-self)

    def __rmul__(self, other): # otro * self
        return self * other

    def __truediv__(self, other): # self / otro
        return self * other**-1

    def __rtruediv__(self, other): # otro / self
        return other * self**-1

    def __repr__(self):
        return f"Value(data={self.data}, grad={self.grad})"
