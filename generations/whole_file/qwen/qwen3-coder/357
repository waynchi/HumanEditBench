import numpy as np

def conjugate_gradient(A, b, x0=None, tol=1e-6, max_iter=None):
    """
    Metoda sprzężonych gradientów do rozwiązywania układu równań liniowych Ax = b
    
    Parametry:
    A : array_like
        Macierz współczynników układu (musi być symetryczna i dodatnio określona)
    b : array_like
        Wektor prawych stron
    x0 : array_like, opcjonalny
        Punkt początkowy (domyślnie wektor zerowy)
    tol : float, opcjonalny
        Tolerancja zbieżności (domyślnie 1e-6)
    max_iter : int, opcjonalny
        Maksymalna liczba iteracji (domyślnie rozmiar macierzy)
    
    Zwraca:
    x : ndarray
        Przybliżone rozwiązanie układu równań
    """
    A = np.asarray(A)
    b = np.asarray(b)
    
    n = len(b)
    
    if max_iter is None:
        max_iter = n
    
    if x0 is None:
        x = np.zeros(n)
    else:
        x = np.asarray(x0)
    
    # Pierwszy krok
    r = b - np.dot(A, x)  # residuum
    p = r.copy()  # pierwszy kierunek poszukiwań
    
    rsold = np.dot(r, r)
    
    for i in range(max_iter):
        Ap = np.dot(A, p)
        alpha = rsold / np.dot(p, Ap)
        
        x = x + alpha * p
        r = r - alpha * Ap
        
        rsnew = np.dot(r, r)
        
        # Sprawdzenie warunku zbieżności
        if np.sqrt(rsnew) < tol:
            break
            
        beta = rsnew / rsold
        p = r + beta * p
        
        rsold = rsnew
    
    return x

# Przykład użycia:
if __name__ == "__main__":
    # Przykład układu równań:
    # 4x + y = 1
    # x + 3y = 2
    
    A = np.array([[4, 1],
                  [1, 3]], dtype=float)
    
    b = np.array([1, 2], dtype=float)
    
    x = conjugate_gradient(A, b)
    print("Rozwiązanie:", x)
    
    # Sprawdzenie wyniku
    print("Sprawdzenie Ax:", np.dot(A, x))
    print("Wektor b:", b)