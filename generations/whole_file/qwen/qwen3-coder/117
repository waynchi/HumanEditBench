def can_be_expressed_as_four_nonzero_squares(n):
    """
    Check if a number can be expressed as the sum of four non-zero squares.
    
    Based on Lagrange's four-square theorem and its refinements:
    - Every natural number can be represented as the sum of four integer squares
    - A number can be expressed as sum of four non-zero squares if and only if:
      * n is not of the form 4^a(8b+7) for non-negative integers a,b
      * n > 4 (since 1+1+1+1 = 4 is the smallest sum of four positive squares)
    """
    
    # Numbers less than 4 cannot be expressed as sum of four positive squares
    if n < 4:
        return False
    
    # Check if n is of the form 4^a(8b+7)
    # This is equivalent to checking if n/4^a ≡ 7 (mod 8) for some a ≥ 0
    temp = n
    while temp % 4 == 0:
        temp //= 4
    
    # If temp ≡ 7 (mod 8), then n cannot be expressed as sum of four non-zero squares
    if temp % 8 == 7:
        return False
    
    return True

def find_four_nonzero_squares_representation(n):
    """
    Find a representation of n as sum of four non-zero squares.
    Returns a tuple (a,b,c,d) such that a²+b²+c²+d² = n, or None if impossible.
    """
    if not can_be_expressed_as_four_nonzero_squares(n):
        return None
    
    # Brute force search for the representation
    # We can limit our search since we're looking for positive squares
    import math
    max_val = int(math.sqrt(n)) + 1
    
    for a in range(1, max_val):
        for b in range(a, max_val):  # b >= a to avoid duplicates
            for c in range(b, max_val):  # c >= b to avoid duplicates
                remaining = n - a*a - b*b - c*c
                if remaining > 0:
                    d = int(math.sqrt(remaining))
                    if d >= c and d*d == remaining:  # d >= c to avoid duplicates
                        return (a, b, c, d)
    
    return None

# Example usage and testing
if __name__ == "__main__":
    # Test some numbers
    test_numbers = [4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 23, 28, 31, 32]
    
    print("Numbers expressible as sum of four non-zero squares:")
    for num in test_numbers:
        if can_be_expressed_as_four_nonzero_squares(num):
            representation = find_four_nonzero_squares_representation(num)
            if representation:
                squares = [x*x for x in representation]
                print(f"{num} = {representation[0]}² + {representation[1]}² + {representation[2]}² + {representation[3]}² = {squares[0]} + {squares[1]} + {squares[2]} + {squares[3]}")
            else:
                print(f"{num}: Can be expressed (but no representation found)")
        else:
            print(f"{num}: Cannot be expressed as sum of four non-zero squares")