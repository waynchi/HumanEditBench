Looking at the error, the issue is that the MSCOCO dataset is trying to load image files that don't exist locally and can't be downloaded properly. The error shows a `FileNotFoundError` when trying to open image files from the dataset.

Let me modify the `load_mscoco_dataset` method to handle this more robustly by adding error handling and potentially using a different approach:
python
import random
import torch
from torchvision import transforms
from datasets import load_dataset
from PIL import Image
import numpy as np

class AlignmentDatasetCreator:
    def __init__(self, sample_size=1000):
        self.sample_size = sample_size
        self.transform = transforms.Compose([
            transforms.Resize((224, 224)),
            transforms.ToTensor(),
            transforms.Normalize(mean=[0.485, 0.456, 0.406], 
                              std=[0.229, 0.224, 0.225])
        ])
    def create_unrelated_pairs(self, image_text_pairs):
        """Создает несвязанные пары изображение-текст, перемешивая текстовые описания"""
        images, texts = zip(*image_text_pairs)
        shuffled_texts = list(texts)
        random.shuffle(shuffled_texts)
        return list(zip(images, shuffled_texts))

    def create_textual_pairs(self, dataset_name='quora'):
        """Создает семантически похожие текстовые пары, используя наборы данных парафраз."""
        dataset = load_dataset(dataset_name, split=f'train[:{self.sample_size}]')
        textual_pairs = []
        for item in dataset:
            if item['is_duplicate'] == 1:
                pair = (item['question1'], item['question2'])
                textual_pairs.append(pair)
        return textual_pairs[:self.sample_size]
    def create_visual_pairs(self, image_text_pairs):
        """Создает увеличенные пары изображений, сохраняя семантическое значение"""
        augmentation_transforms = transforms.Compose([
            transforms.RandomHorizontalFlip(p=1.0),
            transforms.ColorJitter(brightness=0.2, contrast=0.2),
            transforms.RandomRotation(15)
        ])
        
        visual_pairs = []
        for image, _ in image_text_pairs:
            if isinstance(image, Image.Image):
                augmented = augmentation_transforms(image)
                visual_pairs.append((image, augmented))
        return visual_pairs

    def load_mscoco_dataset(self):
        """Загружает и предварительно обрабатывает набор данных MSCOCO с улучшенной фильтрацией"""
        try:
            dataset = load_dataset(
                "shunk031/MSCOCO",
                year=2014,
                coco_task="captions",
                split='train',
                streaming=True
            )
            dataset = dataset.take(self.sample_size)

            image_text_pairs = []
            successful_items = 0
            
            for item in dataset:
                try:
                    # Проверить, что изображение может быть загружено
                    if item["image"] is not None:
                        # Выбрать наиболее описательный заголовок на основе длины
                        best_caption = max(item["captions"], key=len)
                        if len(best_caption.split()) >= 5:  # Отфильтровать слишком короткие подписи
                            image_text_pairs.append((item["image"], best_caption))
                            successful_items += 1
                            if successful_items >= self.sample_size:
                                break
                except Exception as e:
                    # Пропустить элементы с ошибками загрузки изображений
                    continue
                    
            return image_text_pairs
            
        except Exception as e:
            print(f"Ошибка при загрузке MSCOCO: {e}")
            print("Использование синтетических данных для демонстрации...")
            # Возврат синтетических данных в случае ошибки
            return self._generate_dummy_data()

    def _generate_dummy_data(self):
        """Генерирует синтетические данные для демонстрации в случае ошибок загрузки"""
        dummy_pairs = []
        for i in range(self.sample_size):
            # Создать простое тестовое изображение
            dummy_image = Image.new('RGB', (224, 224), color=(random.randint(0, 255), 
                                                              random.randint(0, 255), 
                                                              random.randint(0, 255)))
            dummy_caption = f"Это тестовое изображение номер {i} с некоторым описанием объектов на сцене"
            dummy_pairs.append((dummy_image, dummy_caption))
        return dummy_pairs

def main():
    # Инициализация создателя набора данных
    creator = AlignmentDatasetCreator(sample_size=100)
    
    # Загрузить и создать наборы данных
    print("Loading MSCOCO dataset...")
    image_text_pairs = creator.load_mscoco_dataset()
    
    print("Creating unrelated pairs...")
    unrelated_pairs = creator.create_unrelated_pairs(image_text_pairs)
    
    print("Creating textual pairs...")
    textual_pairs = creator.create_textual_pairs()
    
    print("Creating visual pairs...")
    visual_pairs = creator.create_visual_pairs(image_text_pairs)
    
    # Вывести образец из каждого набора данных
    print("Dataset Samples:")
    print(f"Image-Text Pair: {image_text_pairs[0]}")
    print(f"Unrelated Pair: {unrelated_pairs[0]}")
    print(f"Textual Pair: {textual_pairs[0]}")
    print(f"Visual Pair: {visual_pairs[0]}")

if __name__ == "__main__":
    main()