def create_matrix(rows: int, cols: int, fill_value=0) -> list:
    """
    创建一个大小为rows x cols的矩阵，并用fill_value填充。

    参数：
        rows (int): 行数。
        cols (int): 列数。
        fill_value (任意类型): 用于填充矩阵的值。

    返回：
        list: 以列表形式表示的矩阵。
    """
    matrix = []
    for i in range(rows):
        row = []
        for j in range(cols):
            row.append(fill_value)
        matrix.append(row)
    return matrix


def add_matrices(matrix_a: list, matrix_b: list) -> list:
    """
    加法两个相同大小的矩阵。

    参数：
        matrix_a (list): 第一个矩阵。
        matrix_b (list): 第二个矩阵。

    返回：
        list: 矩阵加法的结果。
    """
    result = []
    for i in range(len(matrix_a)):
        row = []
        for j in range(len(matrix_a[0])):
            row.append(matrix_a[i][j] + matrix_b[i][j])
        result.append(row)
    return result


def scalar_multiply(matrix: list, scalar: float) -> list:
    """
    将矩阵的所有元素乘以标量。

    参数：
        matrix (list): 原始矩阵。
        scalar (float): 用于乘以矩阵元素的数。

    返回：
        list: 矩阵数乘的结果。
    """
    result = []
    for i in range(len(matrix)):
        row = []
        for j in range(len(matrix[0])):
            row.append(matrix[i][j] * scalar)
        result.append(row)
    return result


def multiply_matrices(matrix_a: list, matrix_b: list) -> list:
    """
    乘法两个矩阵。

    参数：
        matrix_a (list): 第一个矩阵。
        matrix_b (list): 第二个矩阵。

    返回：
        list: 矩阵乘法的结果。
    """
    result = []
    for i in range(len(matrix_a)):
        row = []
        for j in range(len(matrix_b[0])):
            sum_value = 0
            for k in range(len(matrix_b)):
                sum_value += matrix_a[i][k] * matrix_b[k][j]
            row.append(sum_value)
        result.append(row)
    return result


def transpose_matrix(matrix: list) -> list:
    """
    转置矩阵。

    参数：
        matrix (list): 原始矩阵。

    返回：
        list: 转置后的矩阵。
    """
    result = []
    for j in range(len(matrix[0])):
        row = []
        for i in range(len(matrix)):
            row.append(matrix[i][j])
        result.append(row)
    return result


def determinant_3x3(matrix: list) -> float:
    """
    计算3x3矩阵的行列式。

    参数：
        matrix (list): 大小为3x3的原始矩阵。

    返回：
        float: 矩阵的行列式。
    """
    a11, a12, a13 = matrix[0][0], matrix[0][1], matrix[0][2]
    a21, a22, a23 = matrix[1][0], matrix[1][1], matrix[1][2]
    a31, a32, a33 = matrix[2][0], matrix[2][1], matrix[2][2]
    
    det = (a11 * (a22 * a33 - a23 * a32) - 
           a12 * (a21 * a33 - a23 * a31) + 
           a13 * (a21 * a32 - a22 * a31))
    return det