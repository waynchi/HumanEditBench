from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import numpy as np
import matplotlib.pyplot as plt

def cluster_data(features_transformed, cluster_config, n_clusters=2, clustering_method='kmeans'):
    """
    Выполняет кластеризацию данных.

    Args:
        features_transformed (pandas.DataFrame): Преобразованный DataFrame с параметрами.
        cluster_config (dict): Словарь вида {имя_кластера: (столбец1, столбец2, ...)}.
        n_clusters (int): Количество кластеров.
        clustering_method (str): Метод кластеризации ('kmeans').

    Returns:
        pandas.DataFrame: DataFrame с добавленными столбцами меток кластеров.
    """
    if features_transformed is None:
        print("Сначала выполните преобразование данных (этап 5).")
        return None

    for cluster_name, columns in cluster_config.items():
        # Проверяем, что все указанные столбцы существуют в данных
        missing_cols = [col for col in columns if col not in features_transformed.columns]
        if missing_cols:
            print(f"Столбцы {missing_cols} не найдены в данных для кластера {cluster_name}. Пропускаем.")
            continue

        # Выбираем подмножество данных для кластеризации
        features_for_clustering = features_transformed[list(columns)].copy()

        if clustering_method == 'kmeans':
            model = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
            cluster_labels = model.fit_predict(features_for_clustering)
            
            # Оценка качества кластеризации (например, с помощью коэффициента силуэта)
            if len(np.unique(cluster_labels)) > 1:  # Проверка на случай, когда все точки отнесены к одному кластеру
                silhouette_avg = silhouette_score(features_for_clustering, cluster_labels)
                print(f"Коэффициент силуэта для кластера '{cluster_name}' ({n_clusters} кластеров): {silhouette_avg:.4f}")
            else:
                print(f"Невозможно рассчитать коэффициент силуэта для кластера '{cluster_name}' ({n_clusters} кластера) - все точки в одном кластере.")

        else:
            print("Неподдерживаемый метод кластеризации.")
            return None

        features_transformed[cluster_name] = cluster_labels
        print(f"Кластеризация выполнена. Метки кластеров добавлены в столбец '{cluster_name}'.")

    return features_transformed

# Выполнение кластеризации (после этапа 5 и до этапа 6)
if 'features_transformed' in locals() and features_transformed is not None:
    cluster_config = {
        'cluster1': ('column1', 'column2'),  # Замените на реальные имена столбцов
        'cluster2': ('column3',)             # Замените на реальные имена столбцов
    }
    n_clusters = 3  # Количество кластеров (подберите оптимальное значение)
    features_transformed = cluster_data(features_transformed, cluster_config, n_clusters)
    
    # Визуализация кластеров (пример для случая, когда есть 2 числовых признака)
    numerical_features = features_transformed.select_dtypes(include=np.number)
    if numerical_features.shape[1] >= 2:
        # Визуализация для каждого кластера из конфигурации
        for cluster_name, columns in cluster_config.items():
            if cluster_name in features_transformed.columns and len(columns) >= 2:
                cols_to_plot = [col for col in columns if col in numerical_features.columns]
                if len(cols_to_plot) >= 2:
                    plt.figure(figsize=(8, 6))
                    plt.scatter(features_transformed[cols_to_plot[0]], features_transformed[cols_to_plot[1]], 
                                c=features_transformed[cluster_name], cmap='viridis')
                    plt.xlabel(cols_to_plot[0])
                    plt.ylabel(cols_to_plot[1])
                    plt.title(f'Результаты кластеризации для {cluster_name}')
                    plt.colorbar(label='Номер кластера')
                    plt.show()
    else:
        print("Недостаточно числовых признаков для визуализации кластеров на плоскости.")
else:
    print("Сначала выполните этап 5 (Преобразование данных).")