def create_matrix(rows: int, cols: int, fill_value=0) -> list:
    """
    Tworzy macierz o rozmiarze rows x cols, wypełnioną wartością fill_value.
    
    Parametry:
    rows (int): liczba wierszy.
    cols (int): liczba kolumn.
    fill_value (dowolny typ): wartość do wypełnienia macierzy.
    
    Zwraca:
    list: macierz w postaci listy list.
    """
    return [[fill_value for _ in range(cols)] for _ in range(rows)]


def add_matrices(matrix_a: list, matrix_b: list) -> list:
    """
    Dodaje dwie macierze o tym samym rozmiarze.
    
    Parametry:
    matrix_a (list): pierwsza macierz.
    matrix_b (list): druga macierz.
    
    Zwraca:
    list: wynik dodawania macierzy.
    """
    rows = len(matrix_a)
    cols = len(matrix_a[0])
    return [[matrix_a[i][j] + matrix_b[i][j] for j in range(cols)] for i in range(rows)]


def scalar_multiply(matrix: list, scalar: float) -> list:
    """
    Mnoży wszystkie elementy macierzy przez skalar.
    
    Parametry:
    matrix (list): macierz źródłowa.
    scalar (float): liczba, przez którą mnożone są elementy macierzy.
    
    Zwraca:
    list: wynik mnożenia macierzy przez skalar.
    """
    return [[element * scalar for element in row] for row in matrix]


def multiply_matrices(matrix_a: list, matrix_b: list) -> list:
    """
    Mnoży dwie macierze.
    
    Parametry:
    matrix_a (list): pierwsza macierz.
    matrix_b (list): druga macierz.
    
    Zwraca:
    list: wynik mnożenia macierzy.
    """
    rows_a = len(matrix_a)
    cols_a = len(matrix_a[0])
    cols_b = len(matrix_b[0])
    
    # Tworzymy macierz wynikową wypełnioną zerami
    result = create_matrix(rows_a, cols_b)
    
    for i in range(rows_a):
        for j in range(cols_b):
            for k in range(cols_a):
                result[i][j] += matrix_a[i][k] * matrix_b[k][j]
                
    return result


def transpose_matrix(matrix: list) -> list:
    """
    Transponuje macierz.
    
    Parametry:
    matrix (list): macierz źródłowa.
    
    Zwraca:
    list: macierz transponowana.
    """
    rows = len(matrix)
    cols = len(matrix[0])
    return [[matrix[i][j] for i in range(rows)] for j in range(cols)]


def determinant_3x3(matrix: list) -> float:
    """
    Oblicza wyznacznik macierzy 3x3.
    
    Parametry:
    matrix (list): macierz źródłowa o rozmiarze 3x3.
    
    Zwraca:
    float: wyznacznik macierzy.
    """
    a, b, c = matrix[0]
    d, e, f = matrix[1]
    g, h, i = matrix[2]
    
    return a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g)
