import numpy as np

def conjugate_gradient(A, b, x0=None, tol=1e-6, max_iter=None):
    """
    Метод сопряжённых градиентов для решения системы линейных уравнений Ax = b
    
    Параметры:
    A : array_like
        Симметричная положительно определённая матрица
    b : array_like
        Вектор правой части
    x0 : array_like, optional
        Начальное приближение
    tol : float, optional
        Точность решения
    max_iter : int, optional
        Максимальное число итераций
    
    Возвращает:
    x : ndarray
        Решение системы
    info : dict
        Информация о процессе решения
    """
    A = np.asarray(A)
    b = np.asarray(b)
    
    if x0 is None:
        x = np.zeros_like(b)
    else:
        x = np.asarray(x0)
    
    if max_iter is None:
        max_iter = len(b) * 2
    
    r = b - np.dot(A, x)  # начальный вектор невязки
    p = r.copy()  # начальное направление поиска
    rsold = np.dot(r, r)
    
    iterations = 0
    residual_norms = [np.linalg.norm(r)]
    
    for i in range(max_iter):
        iterations += 1
        Ap = np.dot(A, p)
        alpha = rsold / np.dot(p, Ap)
        x = x + alpha * p
        r = r - alpha * Ap
        
        residual_norm = np.linalg.norm(r)
        residual_norms.append(residual_norm)
        
        if residual_norm < tol:
            break
            
        rsnew = np.dot(r, r)
        beta = rsnew / rsold
        p = r + beta * p
        rsold = rsnew
    
    info = {
        'iterations': iterations,
        'residual_norm': residual_norm,
        'residual_norms': residual_norms,
        'converged': residual_norm < tol
    }
    
    return x, info

# Пример использования:
if __name__ == "__main__":
    # Создаем тестовую систему
    A = np.array([[4, 1], [1, 3]], dtype=float)
    b = np.array([1, 2], dtype=float)
    
    # Решаем систему
    x, info = conjugate_gradient(A, b)
    
    print("Решение:", x)
    print("Количество итераций:", info['iterations'])
    print("Норма невязки:", info['residual_norm'])
    print("Сошлось:", info['converged'])