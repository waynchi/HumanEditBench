Looking at the issue, the problem is that the squares aren't visible because they're being created at the center of the canvas for splitting, but we need to see them moving around the canvas. Also, they should have different colors to make them more visible.
python
import tkinter as tk
import random
import math

class Square:
    def __init__(self, canvas, size, x, y):
        self.canvas = canvas
        self.size = size
        self.x = x
        self.y = y
        self.dx = random.choice([-2, 2])
        self.dy = random.choice([-2, 2])
        # Generate a random color for each square
        color = "#{:02x}{:02x}{:02x}".format(random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))
        self.square = canvas.create_rectangle(x, y, x + size, y + size, fill=color)

    def move(self):
        self.x += self.dx
        self.y += self.dy
        self.canvas.move(self.square, self.dx, self.dy)
        
        # Check boundaries
        canvas_width = self.canvas.winfo_width()
        canvas_height = self.canvas.winfo_height()
        
        if (self.x <= 0 or self.x + self.size >= canvas_width or 
            self.y <= 0 or self.y + self.size >= canvas_height):
            # Delete current square
            self.canvas.delete(self.square)
            # Create two new squares if size is big enough
            if self.size > 10:
                new_size = self.size / 2
                # Create new squares at the boundary where collision occurred
                squares.append(Square(self.canvas, new_size, 
                                   max(0, min(self.x, canvas_width - new_size)), 
                                   max(0, min(self.y, canvas_height - new_size))))
                squares.append(Square(self.canvas, new_size, 
                                   max(0, min(self.x, canvas_width - new_size)), 
                                   max(0, min(self.y, canvas_height - new_size))))
            return False
        return True

def update():
    global squares
    # Move all squares and remove those that hit boundaries
    squares = [square for square in squares if square.move()]
    root.after(20, update)  # Update every 20ms

# Create main window
root = tk.Tk()
root.title("Splitting Squares")

# Create canvas
canvas = tk.Canvas(root, width=600, height=600, bg="white")
canvas.pack(expand=True, fill="both")

# Create initial square
squares = [Square(canvas, 100, 250, 250)]

# Start animation
update()

# Start main loop
root.mainloop()