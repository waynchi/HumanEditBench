import torch
import numpy as np
import time
from torch.utils.data import DataLoader
from transformers import TrainerCallback
from transformers.data.data_collator import default_data_collator


def check_answer_factual(output_str, expected_answer):
    """Verifica si la salida del modelo coincide con la respuesta esperada.

Args:
    output_str: La cadena de salida del modelo
    expected_answer: La cadena de la respuesta esperada

Returns:
    bool: True si la respuesta es correcta, False en caso contrario"""
    # Esta es una implementación simple - podrías querer mejorar esto
    # con una lógica de coincidencia más sofisticada basada en sus necesidades específicas
    return expected_answer.lower() in output_str.lower()


def check_answer_format(output_str, hard=False):
    """Verifica si la salida del modelo sigue el formato esperado.

Args:
    output_str: La cadena de salida del modelo
    hard: Si es True, aplica una verificación de formato más estricta

Returns:
    bool: True si el formato es correcto, False en caso contrario"""
    if hard:
        # Comprobación estricta del formato (por ejemplo, debe coincidir exactamente con un patrón)
        # Implementa aquí tu lógica de verificación de formato estricta
        return bool(output_str.strip())  # Verificación simple de que la salida no esté vacía
    else:
        # Comprobación de formato más flexible (por ejemplo, contiene secciones esperadas)
        # Implementa aquí tu lógica de verificación de formato suave
        return len(output_str.strip()) > 0  # Verificación simple de que la salida tiene contenido


# Define la clase FactualAccuracyCallbackBETTER (según lo proporcionado)
class FactualAccuracyCallbackBETTER(TrainerCallback):
    """Un callback para evaluar y registrar la precisión factual del modelo durante el entrenamiento."""

    def __init__(
        self, model, tokenizer, dataset, batch_size, verbose=False, output_format=False
    ):
        super().__init__()
        self.model = model
        self.tokenizer = tokenizer
        self.n_samp = len(dataset)
        self.verbose = verbose
        self.output_format = output_format
        tokenized_questions = dataset.map(
            lambda examples: tokenizer(
                examples["question"],
                padding="max_length",
                truncation=True,
                max_length=512,
            ),
            batched=True,
        )
        batched_tokenized_questions = DataLoader(
            tokenized_questions,
            batch_size=3,
            shuffle=False,
            collate_fn=default_data_collator,
        )
        self.tokenized_eval_dataset = batched_tokenized_questions
        self.batched_expected_answers = DataLoader(
            dataset["answer"], batch_size=3, shuffle=False
        )

    def on_log(self, args, state, control, model=None, **kwargs):
        """Llamado después de registrar los últimos registros."""
        if model is not None:
            self.model = model
        elif self.model is None:
            return

        if not state.is_local_process_zero:
            return

        start_time = time.time()
        try:
            with torch.no_grad():
                results = factual_score_dataloader(
                    model=model,
                    tokenizer=self.tokenizer,
                    tokenized_eval_dataset=self.tokenized_eval_dataset,
                    output_format=self.output_format,
                )
                if self.output_format:
                    fact_results, format_hard_results, format_soft_results = results
                    format_hard_avg = np.mean(format_hard_results)
                    format_soft_avg = np.mean(format_soft_results)
                    factual_accuracy_avg = np.mean(fact_results)
                else:
                    factual_accuracy_avg = np.mean(results)

                if len(state.log_history) > 0:
                    state.log_history[-1]["factual_accuracy"] = factual_accuracy_avg
                    if self.output_format:
                        state.log_history[-1]["format_hard"] = format_hard_avg
                        state.log_history[-1]["format_soft"] = format_soft_avg
        except Exception as e:
            print(f"Error during factual accuracy evaluation: {e}")
        finally:
            time_taken = time.time() - start_time
            if self.verbose:
                print(
                    f"[TIME] {time_taken:.2f} seconds: Model evaluated on FactualAccuracy."
                )


def factual_score_dataloader(
    model,
    tokenizer,
    dataset,
    expected_answers,
    max_new_tokens=32,
    output_format=False,
    random_state=42,
    device=None,
    verbose=False,
):
    """
    Evaluate the factual accuracy of answers from a language model.

    Args:
        model: The language model.
        tokenizer: The tokenizer.
        tokenized_eval_dataset: The tokenized evaluation dataset.
        max_new_tokens: Maximum number of new tokens to generate.
        output_format: Whether to check output format.
        random_state: Random seed for sampling.
        device: Device to run on (defaults to CUDA if available, else CPU).

    Returns:
        fact_results: List of factual accuracy results (boolean).
        format_hard_results (optional): List of hard format check results.
        format_soft_results (optional): List of soft format check results.
    """

    if device is None:
        device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model = model.to(device)
    fact_results = []
    format_hard_results, format_soft_results = (
        ([], []) if output_format else (None, None)
    )
    
    all_output_strings = []
    all_expected_answers = []
    all_detokenized_inputs = []
    
    for batch, batch_expected_answers in zip(dataset, expected_answers):
        batch = {
            k: v.to(device)
            for k, v in batch.items()
            if k in ["input_ids", "attention_mask"]
        }

        with torch.no_grad():
            outputs = model.generate(
                **batch,
                max_new_tokens=max_new_tokens,
                pad_token_id=tokenizer.pad_token_id,
            )

        detokenized_inputs = tokenizer.batch_decode(
            batch["input_ids"], skip_special_tokens=True
        )
        output_strings = tokenizer.batch_decode(
            outputs[:, batch["input_ids"].shape[-1] :], skip_special_tokens=True
        )

        all_output_strings.extend(output_strings)
        all_expected_answers.extend(batch_expected_answers)
        all_detokenized_inputs.extend(detokenized_inputs)

    # Vectorizar las comprobaciones
    for output_str, expected_answer, question in zip(
        all_output_strings, all_expected_answers, all_detokenized_inputs
    ):
        if verbose:
            print(repr(question), repr(output_str), repr(expected_answer))
        fact_results.append(check_answer_factual(output_str, expected_answer))
        if output_format:
            format_hard_results.append(check_answer_format(output_str, hard=True))
            format_soft_results.append(check_answer_format(output_str, hard=False))

    return (
        (fact_results, format_hard_results, format_soft_results)
        if output_format
        else fact_results
    )
