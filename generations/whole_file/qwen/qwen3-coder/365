import math
import numpy as np

class Value:
    """przechowuje pojedynczą wartość skalarną i jej gradient"""

    def __init__(self, data, _children=(), _op=''):
        self.data = data
        self.grad = 0
        # wewnętrzne zmienne używane do konstrukcji grafu autograd
        self._backward = lambda: None
        self._prev = set(_children)
        self._op = _op # operacja, która wygenerowała ten węzeł, dla graphviz / debugowania / itp.

    def __add__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data + other.data, (self, other), '+')

        def _backward():
            self.grad += out.grad
            other.grad += out.grad
        out._backward = _backward

        return out

    def __mul__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data * other.data, (self, other), '*')

        def _backward():
            self.grad += other.data * out.grad
            other.grad += self.data * out.grad
        out._backward = _backward

        return out

    def __pow__(self, other):
        assert isinstance(other, (int, float)), "only supporting int/float powers for now"
        out = Value(self.data**other, (self,), f'**{other}')

        def _backward():
            self.grad += (other * self.data**(other-1)) * out.grad
        out._backward = _backward

        return out


        print(f'** EXP {self}')
        out = Value(math.exp(self.data), (self,), "e")
        def _backward():
            self.grad += math.exp(self.data) * out.grad
        out._backward = _backward
        
        return out
    
    def log(self):
        out = Value(math.log(self.data), (self,), f'log{self.data}')
        def _backward():
            self.grad += 1 / self.data
        out._backward = _backward       
        
        return out
    
    def relu(self):
        assert isinstance(self.data, (int, float)), "only supporting int/float powers for now"
        out = Value(0 if self.data < 0 else self.data, (self,), 'ReLU')

        def _backward():
            self.grad += (out.data > 0) * out.grad
        out._backward = _backward

        return out
    
    def softmax(self, other_values):
        # Collect all values including self into a list
        all_values = [self] + other_values
        # Compute max for numerical stability
        max_val = max(v.data for v in all_values)
        # Compute exponentials
        exp_values = [math.exp(v.data - max_val) for v in all_values]
        # Compute sum of exponentials
        sum_exp = sum(exp_values)
        # Compute softmax for self
        softmax_val = exp_values[0] / sum_exp
        
        # Create output Value
        out = Value(softmax_val, tuple(all_values), 'softmax')
        
        # Define backward pass
        def _backward():
            # Gradient of softmax: for i=j: si(1-sj), for i!=j: -si*sj
            for i, v in enumerate(all_values):
                grad_component = 0
                for j, v2 in enumerate(all_values):
                    si = exp_values[i] / sum_exp
                    sj = exp_values[j] / sum_exp
                    if i == j:
                        grad_component += si * (1 - sj) * out.grad
                    else:
                        grad_component += -si * sj * out.grad
                v.grad += grad_component
        out._backward = _backward
       
        return out
    
    def backward(self):

        # uporządkować topologicznie wszystkie dzieci w grafie
        topo = []
        visited = set()
        def build_topo(v):
            if v not in visited:
                visited.add(v)
                for child in v._prev:
                    build_topo(child)
                topo.append(v)
        build_topo(self)

        # przejdź po jednej zmiennej na raz i zastosuj regułę łańcuchową, aby uzyskać jej gradient
        self.grad = 1
        for v in reversed(topo):
            v._backward()

    def __neg__(self): # -self
        return self * -1
    def __gt__(self, other):
        return self.data > other.data

    def __radd__(self, other): # other + self
        return self + other

    def __sub__(self, other): # self - other
        return self + (-other)

    def __rsub__(self, other): # other - self
        return other + (-self)

    def __rmul__(self, other): # other * self
        return self * other

    def __truediv__(self, other): # self / other
        return self * other**-1

    def __rtruediv__(self, other): # other / self
        return other * self**-1

    def __repr__(self):
        return f"Value(data={self.data}, grad={self.grad})"
