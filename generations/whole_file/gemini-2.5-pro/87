import tkinter as tk
import random
import math

class Square:
    def __init__(self, canvas, size, x, y, canvas_width, canvas_height):
        self.canvas = canvas
        self.size = size
        self.x = x
        self.y = y
        self.canvas_width = canvas_width
        self.canvas_height = canvas_height
        self.dx = random.choice([-2, 2])
        self.dy = random.choice([-2, 2])
        # Assign a random color to each square
        color = f'#{random.randint(0, 0xFFFFFF):06x}'
        self.square = canvas.create_rectangle(x, y, x + size, y + size, fill=color)

    def move(self):
        self.x += self.dx
        self.y += self.dy
        self.canvas.move(self.square, self.dx, self.dy)
        
        # Check boundaries using fixed canvas dimensions
        if (self.x <= 0 or self.x + self.size >= self.canvas_width or 
            self.y <= 0 or self.y + self.size >= self.canvas_height):
            # Delete current square
            self.canvas.delete(self.square)
            # Create two new squares if size is big enough
            if self.size > 10:
                new_size = self.size / 2
                # Append new squares to the global list
                squares.append(Square(self.canvas, new_size, 
                                   self.canvas_width/2 - new_size/2, 
                                   self.canvas_height/2 - new_size/2,
                                   self.canvas_width, self.canvas_height))
                squares.append(Square(self.canvas, new_size, 
                                   self.canvas_width/2 + new_size/2, 
                                   self.canvas_height/2 + new_size/2,
                                   self.canvas_width, self.canvas_height))
            # Return False to indicate this square should be removed from the list
            return False
        return True

def update():
    global squares
    # Iterate over a copy of the list because the list itself is modified during the loop
    for square in squares[:]:
        # If move() returns False, the square has hit a boundary and should be removed.
        # New squares are handled by the move() method itself.
        if not square.move():
            squares.remove(square)
            
    root.after(20, update)  # Update every 20ms

# --- Main Program Setup ---

# Create main window
root = tk.Tk()
root.title("Splitting Squares")

# Define canvas dimensions
CANVAS_WIDTH = 600
CANVAS_HEIGHT = 600

# Create canvas
canvas = tk.Canvas(root, width=CANVAS_WIDTH, height=CANVAS_HEIGHT, bg="white")
canvas.pack(expand=True, fill="both")

# Create initial square, passing canvas dimensions to it
squares = [Square(canvas, 100, 250, 250, CANVAS_WIDTH, CANVAS_HEIGHT)]

# Start animation
update()

# Start main loop
root.mainloop()
