import math
class Value:
    """ stores a single scalar value and its gradient """

    def __init__(self, data, _children=(), _op=''):
        self.data = data
        self.grad = 0
        # internal variables used for autograd graph construction
        self._backward = lambda: None
        self._prev = set(_children)
        self._op = _op # the op that produced this node, for graphviz / debugging / etc

    def __add__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data + other.data, (self, other), '+')

        def _backward():
            self.grad += out.grad
            other.grad += out.grad
        out._backward = _backward

        return out

    def __mul__(self, other):
        other = other if isinstance(other, Value) else Value(other)
        out = Value(self.data * other.data, (self, other), '*')

        def _backward():
            self.grad += other.data * out.grad
            other.grad += self.data * out.grad
        out._backward = _backward

        return out

    def __pow__(self, other):
        assert isinstance(other, (int, float)), "only supporting int/float powers for now"
        out = Value(self.data**other, (self,), f'**{other}')

        def _backward():
            self.grad += (other * self.data**(other-1)) * out.grad
        out._backward = _backward

        return out


        print(f'** EXP {self}')
        out = Value(math.exp(self.data), (self,), "e")
        def _backward():
            self.grad += math.exp(self.data) * out.grad
        out._backward = _backward
        
        return out
    
    def log(self):
        out = Value(math.log(self.data), (self,), f'log{self.data}')
        def _backward():
            self.grad += 1 / self.data
        out._backward = _backward       
        
        return out
    
    def relu(self):
        assert isinstance(self.data, (int, float)), "only supporting int/float powers for now"
        out = Value(0 if self.data < 0 else self.data, (self,), 'ReLU')

        def _backward():
            self.grad += (out.data > 0) * out.grad
        out._backward = _backward

        return out
    
    @staticmethod
    def softmax(logits):
        """
        Applies softmax to a list of Value objects (logits).
        Returns a list of Value objects representing probabilities.
        """
        # ensure all inputs are Value objects
        logits = [l if isinstance(l, Value) else Value(l) for l in logits]

        # forward pass: numerically stable softmax
        max_logit = max(l.data for l in logits)
        exps = [math.exp(l.data - max_logit) for l in logits]
        sum_of_exps = sum(exps)
        probs = [Value(e / sum_of_exps, tuple(logits), 'softmax') for e in exps]

        def make_backward(i, all_probs, all_logits):
            def _backward():
                # This is the backward pass for a single output probability probs[i]
                # It needs to distribute its gradient to all input logits
                p_i = all_probs[i]
                for k, logit_k in enumerate(all_logits):
                    # Gradient of probs[i] with respect to logits[k]
                    # d(p_i) / d(l_k) = p_i * (delta_ik - p_k)
                    p_k = all_probs[k]
                    if i == k:
                        local_grad = p_i.data * (1 - p_i.data)
                    else:
                        local_grad = -p_i.data * p_k.data
                    
                    logit_k.grad += local_grad * p_i.grad
            return _backward

        for i, p in enumerate(probs):
            p._backward = make_backward(i, probs, logits)

        return probs

    def backward(self):

        # topological order all of the children in the graph
        topo = []
        visited = set()
        def build_topo(v):
            if v not in visited:
                visited.add(v)
                for child in v._prev:
                    build_topo(child)
                topo.append(v)
        build_topo(self)

        # go one variable at a time and apply the chain rule to get its gradient
        self.grad = 1
        for v in reversed(topo):
            v._backward()

    def __neg__(self): # -self
        return self * -1
    def __gt__(self, other):
        return self.data > other.data

    def __radd__(self, other): # other + self
        return self + other

    def __sub__(self, other): # self - other
        return self + (-other)

    def __rsub__(self, other): # other - self
        return other + (-self)

    def __rmul__(self, other): # other * self
        return self * other

    def __truediv__(self, other): # self / other
        return self * other**-1

    def __rtruediv__(self, other): # other / self
        return other * self**-1

    def __repr__(self):
        return f"Value(data={self.data}, grad={self.grad})"