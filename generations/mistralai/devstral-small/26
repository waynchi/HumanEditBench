def conjugate_gradient(A, b, x0=None, tol=1e-10, max_iter=1000):
    """
    Solves the linear system Ax = b using the Conjugate Gradient method.

    Parameters:
    A : array_like
        A square matrix.
    b : array_like
        Right-hand side vector.
    x0 : array_like, optional
        Initial guess for the solution.
    tol : float, optional
        Tolerance for convergence.
    max_iter : int, optional
        Maximum number of iterations.

    Returns:
    x : ndarray
        Solution to the linear system.
    """
    import numpy as np

    if x0 is None:
        x = np.zeros_like(b)
    else:
        x = x0

    r = b - np.dot(A, x)
    p = r
    rsold = np.dot(r, r)

    for _ in range(max_iter):
        Ap = np.dot(A, p)
        alpha = rsold / np.dot(p, Ap)
        x = x + alpha * p
        r = r - alpha * Ap

        rsnew = np.dot(r, r)
        if np.sqrt(rsnew) < tol:
            break

        p = r + (rsnew / rsold) * p
        rsold = rsnew

    return x